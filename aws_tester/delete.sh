#!/bin/bash

# lambdaforge-development Resource Cleanup Script
# Generated by LambdaForge on 2025-06-17T22:44:19.822Z
# ‚ö†Ô∏è  WARNING: This script will DELETE all resources created by the deployment!

set -e

# Configuration
PROJECT_NAME="lambdaforge-development"
# Auto-detect AWS region from AWS CLI configuration
AWS_REGION=$(aws configure get region)
if [ -z "$AWS_REGION" ]; then
    echo "‚ö†Ô∏è  No default region configured. Using us-east-1"
    AWS_REGION="us-east-1"
fi
STACK_NAME="${PROJECT_NAME}-stack"

# Web Application Deployment Configuration
# Set one of these to deploy the actual web application:
# WEB_APP_LOCAL_PATH="/path/to/your/web/app"          # Local folder path
# WEB_APP_GITHUB_REPO="https://github.com/user/repo" # GitHub repository URL
WEB_APP_LOCAL_PATH=""
WEB_APP_GITHUB_REPO=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print functions
print_status() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials not configured. Run 'aws configure' first."
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Check web application configuration
check_web_app_config() {
    if [ -n "$WEB_APP_LOCAL_PATH" ] && [ -n "$WEB_APP_GITHUB_REPO" ]; then
        print_error "Cannot specify both local path and GitHub repo. Choose one."
        exit 1
    fi
    
    if [ -n "$WEB_APP_LOCAL_PATH" ]; then
        if [ ! -d "$WEB_APP_LOCAL_PATH" ]; then
            print_error "Local web app path does not exist: $WEB_APP_LOCAL_PATH"
            exit 1
        fi
        print_status "Web app source: Local folder ($WEB_APP_LOCAL_PATH)"
    elif [ -n "$WEB_APP_GITHUB_REPO" ]; then
        print_status "Web app source: GitHub repository ($WEB_APP_GITHUB_REPO)"
    else
        print_warning "No web app source specified. Only AWS infrastructure will be created."
        print_status "To deploy a web app, set WEB_APP_LOCAL_PATH or WEB_APP_GITHUB_REPO in this script."
    fi
}

# Build and package web application
build_web_app() {
    if [ -z "$WEB_APP_LOCAL_PATH" ] && [ -z "$WEB_APP_GITHUB_REPO" ]; then
        print_status "Skipping web app build - no source specified"
        return 0
    fi
    
    print_status "Building web application..."
    
    if [ -n "$WEB_APP_LOCAL_PATH" ]; then
        # Build from local path (in place)
        print_status "Building from local path: $WEB_APP_LOCAL_PATH"
        
        # Save current directory
        ORIGINAL_DIR=$(pwd)
        
        # Go to the local path and build there
        cd "$WEB_APP_LOCAL_PATH"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="$WEB_APP_LOCAL_PATH/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="$WEB_APP_LOCAL_PATH/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                cd "$ORIGINAL_DIR"
                exit 1
            fi
        else
            print_error "No package.json found in $WEB_APP_LOCAL_PATH"
            cd "$ORIGINAL_DIR"
            exit 1
        fi
        
        # Return to original directory
        cd "$ORIGINAL_DIR"
        
    elif [ -n "$WEB_APP_GITHUB_REPO" ]; then
        # Clone from GitHub to temporary directory
        print_status "Cloning from GitHub repository: $WEB_APP_GITHUB_REPO"
        
        BUILD_DIR="$(mktemp -d)"
        print_status "Using build directory: $BUILD_DIR"
        
        git clone "$WEB_APP_GITHUB_REPO" "$BUILD_DIR"
        cd "$BUILD_DIR"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="$BUILD_DIR/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="$BUILD_DIR/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                exit 1
            fi
        else
            print_error "No package.json found in cloned repository"
            exit 1
        fi
    fi
    
    print_success "Web application built successfully"
    echo "Built app location: $BUILT_APP_PATH"
}

# Deploy web application to S3
deploy_web_app() {
    if [ -z "$BUILT_APP_PATH" ]; then
        print_status "Skipping web app deployment - no built app"
        return 0
    fi
    
    print_status "Deploying web application to S3..."
    
    # Get S3 bucket name from CloudFormation outputs
    S3_BUCKET=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
        --output text)
    
    if [ -z "$S3_BUCKET" ] || [ "$S3_BUCKET" = "None" ]; then
        print_warning "No S3 bucket found in stack outputs. Skipping web app deployment."
        return 0
    fi
    
    print_status "Uploading to S3 bucket: $S3_BUCKET"
    
    # Upload files to S3
    aws s3 sync "$BUILT_APP_PATH" "s3://$S3_BUCKET" \
        --region "$AWS_REGION" \
        --delete
    
    # Configure S3 for static website hosting
    aws s3 website "s3://$S3_BUCKET" \
        --index-document index.html \
        --error-document error.html \
        --region "$AWS_REGION"
    
    # Get website URL
    WEBSITE_URL="http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com"
    
    print_success "Web application deployed successfully!"
    echo ""
    print_success "üåê Your web application is available at:"
    echo "   $WEBSITE_URL"
    echo ""
}

# Deploy or update the CloudFormation stack
deploy_stack() {
    print_status "Checking if stack exists..."
    
    if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$AWS_REGION" &>/dev/null; then
        print_status "Stack exists. Updating..."
        OPERATION="update-stack"
    else
        print_status "Stack does not exist. Creating..."
        OPERATION="create-stack"
    fi
    
    print_status "Deploying CloudFormation stack..."
    print_status "Stack Name: $STACK_NAME"
    print_status "Region: $AWS_REGION"
    print_status "Template: template.yaml"
    
    # Deploy the stack
    aws cloudformation $OPERATION \
        --stack-name "$STACK_NAME" \
        --template-body file://template.yaml \
        --capabilities CAPABILITY_IAM \
        --region "$AWS_REGION"
    
    if [ $? -ne 0 ]; then
        print_error "Failed to create/update the stack"
        exit 1
    fi
    
    print_status "Waiting for stack operation to complete..."
    print_status "This may take several minutes..."
    
    # Wait for the operation to complete
    if [ "$OPERATION" = "create-stack" ]; then
        WAIT_CONDITION="stack-create-complete"
    else
        WAIT_CONDITION="stack-update-complete"
    fi
    
    if aws cloudformation wait $WAIT_CONDITION --stack-name "$STACK_NAME" --region "$AWS_REGION"; then
        print_success "Stack operation completed successfully! üéâ"
    else
        print_error "Stack operation failed or timed out"
        print_status "Check the CloudFormation console for details:"
        echo "https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks"
        exit 1
    fi
}

# Show deployment results
show_results() {
    print_success "üéâ Deployment completed successfully!"
    echo ""
    print_status "üìã Resource Summary:"
    
    # Get stack outputs
    aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \
        --output table
    
    echo ""
    print_status "üîó AWS Console Links:"
    
    # CloudFormation Console
    echo "üìä CloudFormation Stack:"
    echo "   https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks/stackinfo?stackId=$STACK_NAME"
    
    # Get resource links
    LAMBDA_FUNCTION=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
        --output text 2>/dev/null)
    
    API_GATEWAY=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
        --output text 2>/dev/null)
    
    S3_BUCKET=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
        --output text 2>/dev/null)
    
    if [ -n "$LAMBDA_FUNCTION" ] && [ "$LAMBDA_FUNCTION" != "None" ]; then
        echo "‚ö° Lambda Function:"
        echo "   https://$AWS_REGION.console.aws.amazon.com/lambda/home?region=$AWS_REGION#/functions/$LAMBDA_FUNCTION"
    fi
    
    if [ -n "$API_GATEWAY" ] && [ "$API_GATEWAY" != "None" ]; then
        echo "üåê API Gateway:"
        echo "   $API_GATEWAY"
    fi
    
    if [ -n "$S3_BUCKET" ] && [ "$S3_BUCKET" != "None" ]; then
        echo "ü™£ S3 Bucket:"
        echo "   https://s3.console.aws.amazon.com/s3/buckets/$S3_BUCKET?region=$AWS_REGION"
    fi
    
    echo ""
    print_status "üí° Next Steps:"
    echo "  ‚Ä¢ Test your deployed resources using the links above"
    echo "  ‚Ä¢ Monitor logs in CloudWatch"
    echo "  ‚Ä¢ Use delete.sh to clean up resources when done"
    echo ""
}

# Main deployment function
main() {
    echo ""
    echo "======================================"
    echo "üöÄ lambdaforge-development Deployment"
    echo "======================================"
    echo "Project: $PROJECT_NAME"
    echo "Region: $AWS_REGION"
    echo ""
    
    check_prerequisites
    check_web_app_config
    build_web_app
    deploy_stack
    deploy_web_app
    show_results
}

# Run with error handling
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi

#!/bin/bash

# lambdaforge-dev Deployment Script
# Generated by LambdaForge on 2025-06-17T22:07:22.369Z

set -e

# Configuration
PROJECT_NAME="lambdaforge-dev"
ENVIRONMENT="Development"
# Auto-detect AWS region from AWS CLI configuration
AWS_REGION=$(aws configure get region)
if [ -z "$AWS_REGION" ]; then
    echo "⚠️  No default region configured. Using us-east-1"
    AWS_REGION="us-east-1"
fi
STACK_NAME="${PROJECT_NAME}-stack"

# Template Selection - Choose based on IAM permissions
# Use template_no_iam.yaml for limited permissions, template.yaml for full permissions
TEMPLATE_FILE="template_no_iam.yaml"

# Web Application Configuration
# Set one of the following to deploy a web application:
WEB_APP_LOCAL_PATH="/Users/codinggents/Documents/lambdaforge"  # Deploy from local folder
# WEB_APP_GITHUB_REPO="https://github.com/user/repo"           # Deploy from GitHub repo

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Progress bar function
show_progress() {
    local duration=$1
    local message=$2
    local progress=0
    local bar_length=50
    
    echo -n "$message "
    while [ $progress -le $duration ]; do
        local filled=$((progress * bar_length / duration))
        local empty=$((bar_length - filled))
        
        printf "\r$message ["
        printf "%${filled}s" | tr ' ' '█'
        printf "%${empty}s" | tr ' ' '░'
        printf "] %d%%" $((progress * 100 / duration))
        
        sleep 1
        progress=$((progress + 1))
    done
    echo
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials not configured. Run 'aws configure' first."
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Check web application configuration
check_web_app_config() {
    if [ -n "$WEB_APP_LOCAL_PATH" ] && [ -n "$WEB_APP_GITHUB_REPO" ]; then
        print_error "Cannot specify both local path and GitHub repo. Choose one."
        exit 1
    fi
    
    if [ -n "$WEB_APP_LOCAL_PATH" ]; then
        if [ ! -d "$WEB_APP_LOCAL_PATH" ]; then
            print_error "Local web app path does not exist: $WEB_APP_LOCAL_PATH"
            exit 1
        fi
        print_status "Web app source: Local folder ($WEB_APP_LOCAL_PATH)"
    elif [ -n "$WEB_APP_GITHUB_REPO" ]; then
        print_status "Web app source: GitHub repository ($WEB_APP_GITHUB_REPO)"
    else
        print_warning "No web app source specified. Only AWS infrastructure will be created."
        print_status "To deploy a web app, set WEB_APP_LOCAL_PATH or WEB_APP_GITHUB_REPO in this script."
    fi
}

# Build and package web application
build_web_app() {
    if [ -z "$WEB_APP_LOCAL_PATH" ] && [ -z "$WEB_APP_GITHUB_REPO" ]; then
        print_status "Skipping web app build - no source specified"
        return 0
    fi
    
    print_status "Building web application..."
    
    if [ -n "$WEB_APP_LOCAL_PATH" ]; then
        # Build from local path (in place)
        print_status "Building from local path: $WEB_APP_LOCAL_PATH"
        
        # Save current directory
        ORIGINAL_DIR=$(pwd)
        
        # Go to the local path and build there
        cd "$WEB_APP_LOCAL_PATH"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="$WEB_APP_LOCAL_PATH/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="$WEB_APP_LOCAL_PATH/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                cd "$ORIGINAL_DIR"
                exit 1
            fi
        else
            print_error "No package.json found in $WEB_APP_LOCAL_PATH"
            cd "$ORIGINAL_DIR"
            exit 1
        fi
        
        # Return to original directory
        cd "$ORIGINAL_DIR"
        
    elif [ -n "$WEB_APP_GITHUB_REPO" ]; then
        # Clone from GitHub to temporary directory
        print_status "Cloning from GitHub repository: $WEB_APP_GITHUB_REPO"
        
        BUILD_DIR="$(mktemp -d)"
        print_status "Using build directory: $BUILD_DIR"
        
        git clone "$WEB_APP_GITHUB_REPO" "$BUILD_DIR"
        cd "$BUILD_DIR"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="$BUILD_DIR/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="$BUILD_DIR/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                exit 1
            fi
        else
            print_error "No package.json found in cloned repository"
            exit 1
        fi
    fi
    
    print_success "Web application built successfully"
    echo "Built app location: $BUILT_APP_PATH"
}

# Deploy web application to S3
deploy_web_app() {
    if [ -z "$BUILT_APP_PATH" ]; then
        print_status "Skipping web app deployment - no built app"
        return 0
    fi
    
    print_status "Deploying web application to S3..."
    
    # Get S3 bucket name from CloudFormation outputs
    S3_BUCKET=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
        --output text)
    
    if [ -z "$S3_BUCKET" ] || [ "$S3_BUCKET" = "None" ]; then
        print_warning "No S3 bucket found in stack outputs. Skipping web app deployment."
        return 0
    fi
    
    print_status "Uploading to S3 bucket: $S3_BUCKET"
    
    # Upload files to S3
    aws s3 sync "$BUILT_APP_PATH" "s3://$S3_BUCKET" \
        --region "$AWS_REGION" \
        --delete
    
    # Configure S3 for static website hosting
    aws s3 website "s3://$S3_BUCKET" \
        --index-document index.html \
        --error-document error.html \
        --region "$AWS_REGION"
    
    # Get website URL
    WEBSITE_URL="http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com"
    
    print_success "Web application deployed successfully!"
    echo ""
    print_success "🌐 Your web application is available at:"
    echo "   $WEBSITE_URL"
    echo ""
}

# Check specific AWS permissions
check_permissions() {
    print_status "Checking AWS permissions..."
    
    # Test S3 permissions
    if aws s3 ls &> /dev/null; then
        print_success "✓ S3 permissions OK"
    else
        print_error "✗ S3 permissions missing"
        return 1
    fi
    
    # Test CloudFormation permissions
    if aws cloudformation list-stacks --max-items 1 &> /dev/null; then
        print_success "✓ CloudFormation permissions OK"
    else
        print_error "✗ CloudFormation permissions missing"
        return 1
    fi
    
    # Test IAM permissions (optional)
    if aws iam list-roles --max-items 1 &> /dev/null 2>&1; then
        # Test Lambda permissions
        if aws lambda list-functions --max-items 1 &> /dev/null 2>&1; then
            # Test API Gateway permissions  
            if aws apigateway get-rest-apis --limit 1 &> /dev/null 2>&1; then
                print_success "✓ Full AWS permissions detected"
                print_warning "⚠ Using simplified template due to CloudFormation deployment issues"
                TEMPLATE_FILE="template_no_iam.yaml"
            else
                print_warning "⚠ Limited API Gateway permissions - using simplified template"
                TEMPLATE_FILE="template_no_iam.yaml"
            fi
        else
            print_warning "⚠ Limited Lambda permissions - using simplified template"
            TEMPLATE_FILE="template_no_iam.yaml"
        fi
    else
        print_warning "⚠ Limited IAM permissions - using simplified template"
        TEMPLATE_FILE="template_no_iam.yaml"
    fi
}

# Deploy CloudFormation stack
deploy_stack() {
    print_status "Checking if stack exists..."
    
    if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$AWS_REGION" &> /dev/null; then
        print_status "Stack exists. Updating..."
        print_status "Using template: $TEMPLATE_FILE"
        
        aws cloudformation update-stack \
            --stack-name "$STACK_NAME" \
            --template-body file://$TEMPLATE_FILE \
            --parameters ParameterKey=ProjectName,ParameterValue="$PROJECT_NAME" \
                        ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
            --capabilities CAPABILITY_IAM \
            --region "$AWS_REGION"
        
        print_status "Waiting for stack update to complete..."
        show_progress 180 "🔄 Updating AWS resources"
        
        if aws cloudformation wait stack-update-complete --stack-name "$STACK_NAME" --region "$AWS_REGION"; then
            print_success "Stack updated successfully!"
        else
            print_error "Stack update failed!"
            print_status "Checking stack events for details..."
            aws cloudformation describe-stack-events --stack-name "$STACK_NAME" --region "$AWS_REGION" --query 'StackEvents[?ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table
            return 1
        fi
    else
        print_status "Stack does not exist. Creating..."
        print_status "Using template: $TEMPLATE_FILE"
        
        # Show resource creation progress
        print_status "📋 Resources to be created:"
        if [ "$TEMPLATE_FILE" = "template.yaml" ]; then
            echo "  • S3 Bucket (Static Website)"
            echo "  • IAM Execution Role"
            echo "  • Lambda Function"  
            echo "  • API Gateway"
            echo "  • CloudWatch Log Group"
        else
            echo "  • S3 Bucket (Static Website)"
            echo "  • CloudWatch Log Group"
        fi
        echo
        
        aws cloudformation create-stack \
            --stack-name "$STACK_NAME" \
            --template-body file://$TEMPLATE_FILE \
            --parameters ParameterKey=ProjectName,ParameterValue="$PROJECT_NAME" \
                        ParameterKey=Environment,ParameterValue="$ENVIRONMENT" \
            --capabilities CAPABILITY_IAM \
            --region "$AWS_REGION"
        
        print_status "Waiting for stack creation to complete..."
        
        # Show progress for different resource types
        (
            show_progress 30 "🪣 Creating S3 Bucket" &
            sleep 35
            show_progress 20 "📊 Creating CloudWatch Log Group" &
            sleep 25
            if [ "$TEMPLATE_FILE" = "template.yaml" ]; then
                show_progress 60 "🔐 Creating IAM Role & Lambda Function" &
                sleep 65
                show_progress 40 "🌐 Creating API Gateway" &
            fi
        ) &
        
        if aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME" --region "$AWS_REGION"; then
            print_success "Stack created successfully!"
        else
            print_error "Stack creation failed!"
            print_status "Checking stack events for details..."
            aws cloudformation describe-stack-events --stack-name "$STACK_NAME" --region "$AWS_REGION" --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' --output table
            return 1
        fi
    fi
}

# Show deployment results
show_results() {
    print_success "🎉 Deployment completed successfully!"
    echo ""
    print_status "📋 Resource Summary:"
    
    # Get stack outputs
    aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \
        --output table
    
    echo ""
    print_status "🔗 AWS Console Links:"
    
    # CloudFormation Console
    echo "📊 CloudFormation Stack:"
    echo "   https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks/stackinfo?stackId=$STACK_NAME"
    
    # Get resource links
    LAMBDA_FUNCTION=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
        --output text 2>/dev/null)
    
    API_GATEWAY=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
        --output text 2>/dev/null)
    
    S3_BUCKET=$(aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
        --output text 2>/dev/null)
    
    if [ -n "$LAMBDA_FUNCTION" ] && [ "$LAMBDA_FUNCTION" != "None" ]; then
        echo "⚡ Lambda Function:"
        echo "   https://$AWS_REGION.console.aws.amazon.com/lambda/home?region=$AWS_REGION#/functions/$LAMBDA_FUNCTION"
    fi
    
    if [ -n "$API_GATEWAY" ] && [ "$API_GATEWAY" != "None" ]; then
        echo "🌐 API Gateway:"
        echo "   $API_GATEWAY"
    fi
    
    if [ -n "$S3_BUCKET" ] && [ "$S3_BUCKET" != "None" ]; then
        echo "🪣 S3 Bucket:"
        echo "   https://s3.console.aws.amazon.com/s3/buckets/$S3_BUCKET?region=$AWS_REGION"
    fi
    
    echo ""
    print_status "💡 Next Steps:"
    echo "  • Test your deployed resources using the links above"
    echo "  • Monitor logs in CloudWatch"
    echo "  • Use delete.sh to clean up resources when done"
    echo ""
}

# Main deployment function
main() {
    print_status "🚀 Starting deployment process..."
    echo "Project: $PROJECT_NAME"
    echo "Environment: $ENVIRONMENT" 
    echo "Region: $AWS_REGION"
    echo "Stack: $STACK_NAME"
    echo

    # Run checks
    check_prerequisites
    check_permissions
    check_web_app_config

    # Build and deploy
    build_web_app
    deploy_stack
    deploy_web_app

    print_success "🎉 Deployment completed successfully!"
    echo
    print_status "📋 Deployment Summary:"
    echo "• Stack Name: $STACK_NAME"
    echo "• Template Used: $TEMPLATE_FILE"
    echo "• Region: $AWS_REGION"
    echo "• Console: https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks"
    
    # Show stack outputs
    print_status "🔗 Resource Links:"
    aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$AWS_REGION" --query 'Stacks[0].Outputs[].[OutputKey,OutputValue]' --output table 2>/dev/null || echo "Stack outputs not available yet"
}

# Run with error handling
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi

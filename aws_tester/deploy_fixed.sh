#!/bin/bash

# LambdaForge Deployment Script - FIXED VERSION
# Generated by LambdaForge on 2025-06-17T19:47:21.063Z

set -e

# Configuration - FIXED: Using correct region
PROJECT_NAME="lambdaforge-production"
ENVIRONMENT="Development"
AWS_REGION="eu-west-2"  # Fixed: Changed from us-east-1 to eu-west-2
STACK_NAME="${PROJECT_NAME}-stack"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials are not configured. Please run 'aws configure' first."
        exit 1
    fi
    
    # Check if template file exists
    if [ ! -f "template_fixed.yaml" ]; then
        print_error "template_fixed.yaml not found. Please ensure the template file exists."
        exit 1
    fi
    
    print_success "Prerequisites check passed."
}

# Validate template
validate_template() {
    print_status "Validating CloudFormation template..."
    
    if aws cloudformation validate-template --template-body file://template_fixed.yaml --region "$AWS_REGION" > /dev/null 2>&1; then
        print_success "Template validation passed."
    else
        print_error "Template validation failed. Please check the template syntax."
        exit 1
    fi
}

# Deploy CloudFormation stack
deploy_stack() {
    print_status "Deploying CloudFormation stack..."
    print_status "Region: $AWS_REGION"
    print_status "Stack Name: $STACK_NAME"
    
    aws cloudformation deploy \
        --template-file template_fixed.yaml \
        --stack-name "$STACK_NAME" \
        --parameter-overrides \
            ProjectName="$PROJECT_NAME" \
            Environment="$ENVIRONMENT" \
        --capabilities CAPABILITY_IAM \
        --region "$AWS_REGION" \
        --no-fail-on-empty-changeset
    
    if [ $? -eq 0 ]; then
        print_success "Stack deployment completed successfully!"
    else
        print_error "Stack deployment failed!"
        print_error "Run this command to see the error details:"
        print_error "aws cloudformation describe-stack-events --stack-name $STACK_NAME --region $AWS_REGION"
        exit 1
    fi
}

# Get stack outputs
get_outputs() {
    print_status "Retrieving stack outputs..."
    
    aws cloudformation describe-stacks \
        --stack-name "$STACK_NAME" \
        --region "$AWS_REGION" \
        --query 'Stacks[0].Outputs' \
        --output table
}

# Main deployment function
main() {
    echo ""
    echo "======================================"
    echo "ðŸš€ LambdaForge Deployment (FIXED)"
    echo "======================================"
    echo "Project: $PROJECT_NAME"
    echo "Environment: $ENVIRONMENT"
    echo "Region: $AWS_REGION"
    echo ""
    
    check_prerequisites
    validate_template
    deploy_stack
    get_outputs
    
    print_success "Deployment completed successfully! ðŸŽ‰"
    echo ""
    echo "Next steps:"
    echo "1. Check the API endpoint in the outputs above"
    echo "2. Test your Lambda function"
    echo "3. View resources in AWS Console: https://$AWS_REGION.console.aws.amazon.com/cloudformation/"
}

main "$@" 
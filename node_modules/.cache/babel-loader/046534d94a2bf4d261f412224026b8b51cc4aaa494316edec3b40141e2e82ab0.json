{"ast":null,"code":"import _defineProperty from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { escapeAttribute } from \"./escape-attribute\";\nimport { XmlText } from \"./XmlText\";\nexport class XmlNode {\n  static of(name, childText, withName) {\n    const node = new XmlNode(name);\n    if (childText !== undefined) {\n      node.addChildNode(new XmlText(childText));\n    }\n    if (withName !== undefined) {\n      node.withName(withName);\n    }\n    return node;\n  }\n  constructor(name) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"children\", void 0);\n    _defineProperty(this, \"attributes\", {});\n    this.name = name;\n    this.children = children;\n  }\n  withName(name) {\n    this.name = name;\n    return this;\n  }\n  addAttribute(name, value) {\n    this.attributes[name] = value;\n    return this;\n  }\n  addChildNode(child) {\n    this.children.push(child);\n    return this;\n  }\n  removeAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  }\n  n(name) {\n    this.name = name;\n    return this;\n  }\n  c(child) {\n    this.children.push(child);\n    return this;\n  }\n  a(name, value) {\n    if (value != null) {\n      this.attributes[name] = value;\n    }\n    return this;\n  }\n  cc(input, field) {\n    let withName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : field;\n    if (input[field] != null) {\n      const node = XmlNode.of(field, input[field]).withName(withName);\n      this.c(node);\n    }\n  }\n  l(input, listName, memberName, valueProvider) {\n    if (input[listName] != null) {\n      const nodes = valueProvider();\n      nodes.map(node => {\n        node.withName(memberName);\n        this.c(node);\n      });\n    }\n  }\n  lc(input, listName, memberName, valueProvider) {\n    if (input[listName] != null) {\n      const nodes = valueProvider();\n      const containerNode = new XmlNode(memberName);\n      nodes.map(node => {\n        containerNode.c(node);\n      });\n      this.c(containerNode);\n    }\n  }\n  toString() {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = \"<\".concat(this.name);\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (attribute != null) {\n        xmlText += \" \".concat(attributeName, \"=\\\"\").concat(escapeAttribute(\"\" + attribute), \"\\\"\");\n      }\n    }\n    return xmlText += !hasChildren ? \"/>\" : \">\".concat(this.children.map(c => c.toString()).join(\"\"), \"</\").concat(this.name, \">\");\n  }\n}","map":{"version":3,"names":["escapeAttribute","XmlText","XmlNode","of","name","childText","withName","node","undefined","addChildNode","constructor","children","arguments","length","_defineProperty","addAttribute","value","attributes","child","push","removeAttribute","n","c","a","cc","input","field","l","listName","memberName","valueProvider","nodes","map","lc","containerNode","toString","hasChildren","Boolean","xmlText","concat","attributeName","Object","keys","attribute","join"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/xml-builder/dist-es/XmlNode.js"],"sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { XmlText } from \"./XmlText\";\nexport class XmlNode {\n    name;\n    children;\n    attributes = {};\n    static of(name, childText, withName) {\n        const node = new XmlNode(name);\n        if (childText !== undefined) {\n            node.addChildNode(new XmlText(childText));\n        }\n        if (withName !== undefined) {\n            node.withName(withName);\n        }\n        return node;\n    }\n    constructor(name, children = []) {\n        this.name = name;\n        this.children = children;\n    }\n    withName(name) {\n        this.name = name;\n        return this;\n    }\n    addAttribute(name, value) {\n        this.attributes[name] = value;\n        return this;\n    }\n    addChildNode(child) {\n        this.children.push(child);\n        return this;\n    }\n    removeAttribute(name) {\n        delete this.attributes[name];\n        return this;\n    }\n    n(name) {\n        this.name = name;\n        return this;\n    }\n    c(child) {\n        this.children.push(child);\n        return this;\n    }\n    a(name, value) {\n        if (value != null) {\n            this.attributes[name] = value;\n        }\n        return this;\n    }\n    cc(input, field, withName = field) {\n        if (input[field] != null) {\n            const node = XmlNode.of(field, input[field]).withName(withName);\n            this.c(node);\n        }\n    }\n    l(input, listName, memberName, valueProvider) {\n        if (input[listName] != null) {\n            const nodes = valueProvider();\n            nodes.map((node) => {\n                node.withName(memberName);\n                this.c(node);\n            });\n        }\n    }\n    lc(input, listName, memberName, valueProvider) {\n        if (input[listName] != null) {\n            const nodes = valueProvider();\n            const containerNode = new XmlNode(memberName);\n            nodes.map((node) => {\n                containerNode.c(node);\n            });\n            this.c(containerNode);\n        }\n    }\n    toString() {\n        const hasChildren = Boolean(this.children.length);\n        let xmlText = `<${this.name}`;\n        const attributes = this.attributes;\n        for (const attributeName of Object.keys(attributes)) {\n            const attribute = attributes[attributeName];\n            if (attribute != null) {\n                xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n            }\n        }\n        return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { streamCollector } from \"@smithy/fetch-http-handler\";\nimport { toBase64 } from \"@smithy/util-base64\";\nimport { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUtf8 } from \"@smithy/util-utf8\";\nimport { isReadableStream } from \"./stream-type-check\";\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport const sdkStreamMixin = stream => {\n  if (!isBlobInstance(stream) && !isReadableStream(stream)) {\n    var _stream$__proto__;\n    const name = (stream === null || stream === void 0 || (_stream$__proto__ = stream.__proto__) === null || _stream$__proto__ === void 0 || (_stream$__proto__ = _stream$__proto__.constructor) === null || _stream$__proto__ === void 0 ? void 0 : _stream$__proto__.name) || stream;\n    throw new Error(\"Unexpected stream implementation, expect Blob or ReadableStream, got \".concat(name));\n  }\n  let transformed = false;\n  const transformToByteArray = async () => {\n    if (transformed) {\n      throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n    }\n    transformed = true;\n    return await streamCollector(stream);\n  };\n  const blobToWebStream = blob => {\n    if (typeof blob.stream !== \"function\") {\n      throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" + \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n    }\n    return blob.stream();\n  };\n  return Object.assign(stream, {\n    transformToByteArray: transformToByteArray,\n    transformToString: async encoding => {\n      const buf = await transformToByteArray();\n      if (encoding === \"base64\") {\n        return toBase64(buf);\n      } else if (encoding === \"hex\") {\n        return toHex(buf);\n      } else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n        return toUtf8(buf);\n      } else if (typeof TextDecoder === \"function\") {\n        return new TextDecoder(encoding).decode(buf);\n      } else {\n        throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n      }\n    },\n    transformToWebStream: () => {\n      if (transformed) {\n        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n      }\n      transformed = true;\n      if (isBlobInstance(stream)) {\n        return blobToWebStream(stream);\n      } else if (isReadableStream(stream)) {\n        return stream;\n      } else {\n        throw new Error(\"Cannot transform payload to web stream, got \".concat(stream));\n      }\n    }\n  });\n};\nconst isBlobInstance = stream => typeof Blob === \"function\" && stream instanceof Blob;","map":{"version":3,"names":["streamCollector","toBase64","toHex","toUtf8","isReadableStream","ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED","sdkStreamMixin","stream","isBlobInstance","_stream$__proto__","name","__proto__","constructor","Error","concat","transformed","transformToByteArray","blobToWebStream","blob","Object","assign","transformToString","encoding","buf","undefined","TextDecoder","decode","transformToWebStream","Blob"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js"],"sourcesContent":["import { streamCollector } from \"@smithy/fetch-http-handler\";\nimport { toBase64 } from \"@smithy/util-base64\";\nimport { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUtf8 } from \"@smithy/util-utf8\";\nimport { isReadableStream } from \"./stream-type-check\";\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport const sdkStreamMixin = (stream) => {\n    if (!isBlobInstance(stream) && !isReadableStream(stream)) {\n        const name = stream?.__proto__?.constructor?.name || stream;\n        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);\n    }\n    let transformed = false;\n    const transformToByteArray = async () => {\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await streamCollector(stream);\n    };\n    const blobToWebStream = (blob) => {\n        if (typeof blob.stream !== \"function\") {\n            throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" +\n                \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n        }\n        return blob.stream();\n    };\n    return Object.assign(stream, {\n        transformToByteArray: transformToByteArray,\n        transformToString: async (encoding) => {\n            const buf = await transformToByteArray();\n            if (encoding === \"base64\") {\n                return toBase64(buf);\n            }\n            else if (encoding === \"hex\") {\n                return toHex(buf);\n            }\n            else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                return toUtf8(buf);\n            }\n            else if (typeof TextDecoder === \"function\") {\n                return new TextDecoder(encoding).decode(buf);\n            }\n            else {\n                throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n            }\n        },\n        transformToWebStream: () => {\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            transformed = true;\n            if (isBlobInstance(stream)) {\n                return blobToWebStream(stream);\n            }\n            else if (isReadableStream(stream)) {\n                return stream;\n            }\n            else {\n                throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n            }\n        },\n    });\n};\nconst isBlobInstance = (stream) => typeof Blob === \"function\" && stream instanceof Blob;\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,2BAA2B;AACjD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,MAAMC,mCAAmC,GAAG,0CAA0C;AACtF,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACtC,IAAI,CAACC,cAAc,CAACD,MAAM,CAAC,IAAI,CAACH,gBAAgB,CAACG,MAAM,CAAC,EAAE;IAAA,IAAAE,iBAAA;IACtD,MAAMC,IAAI,GAAG,CAAAH,MAAM,aAANA,MAAM,gBAAAE,iBAAA,GAANF,MAAM,CAAEI,SAAS,cAAAF,iBAAA,gBAAAA,iBAAA,GAAjBA,iBAAA,CAAmBG,WAAW,cAAAH,iBAAA,uBAA9BA,iBAAA,CAAgCC,IAAI,KAAIH,MAAM;IAC3D,MAAM,IAAIM,KAAK,yEAAAC,MAAA,CAAyEJ,IAAI,CAAE,CAAC;EACnG;EACA,IAAIK,WAAW,GAAG,KAAK;EACvB,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAID,WAAW,EAAE;MACb,MAAM,IAAIF,KAAK,CAACR,mCAAmC,CAAC;IACxD;IACAU,WAAW,GAAG,IAAI;IAClB,OAAO,MAAMf,eAAe,CAACO,MAAM,CAAC;EACxC,CAAC;EACD,MAAMU,eAAe,GAAIC,IAAI,IAAK;IAC9B,IAAI,OAAOA,IAAI,CAACX,MAAM,KAAK,UAAU,EAAE;MACnC,MAAM,IAAIM,KAAK,CAAC,kGAAkG,GAC9G,0IAA0I,CAAC;IACnJ;IACA,OAAOK,IAAI,CAACX,MAAM,CAAC,CAAC;EACxB,CAAC;EACD,OAAOY,MAAM,CAACC,MAAM,CAACb,MAAM,EAAE;IACzBS,oBAAoB,EAAEA,oBAAoB;IAC1CK,iBAAiB,EAAE,MAAOC,QAAQ,IAAK;MACnC,MAAMC,GAAG,GAAG,MAAMP,oBAAoB,CAAC,CAAC;MACxC,IAAIM,QAAQ,KAAK,QAAQ,EAAE;QACvB,OAAOrB,QAAQ,CAACsB,GAAG,CAAC;MACxB,CAAC,MACI,IAAID,QAAQ,KAAK,KAAK,EAAE;QACzB,OAAOpB,KAAK,CAACqB,GAAG,CAAC;MACrB,CAAC,MACI,IAAID,QAAQ,KAAKE,SAAS,IAAIF,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,EAAE;QAC5E,OAAOnB,MAAM,CAACoB,GAAG,CAAC;MACtB,CAAC,MACI,IAAI,OAAOE,WAAW,KAAK,UAAU,EAAE;QACxC,OAAO,IAAIA,WAAW,CAACH,QAAQ,CAAC,CAACI,MAAM,CAACH,GAAG,CAAC;MAChD,CAAC,MACI;QACD,MAAM,IAAIV,KAAK,CAAC,sEAAsE,CAAC;MAC3F;IACJ,CAAC;IACDc,oBAAoB,EAAEA,CAAA,KAAM;MACxB,IAAIZ,WAAW,EAAE;QACb,MAAM,IAAIF,KAAK,CAACR,mCAAmC,CAAC;MACxD;MACAU,WAAW,GAAG,IAAI;MAClB,IAAIP,cAAc,CAACD,MAAM,CAAC,EAAE;QACxB,OAAOU,eAAe,CAACV,MAAM,CAAC;MAClC,CAAC,MACI,IAAIH,gBAAgB,CAACG,MAAM,CAAC,EAAE;QAC/B,OAAOA,MAAM;MACjB,CAAC,MACI;QACD,MAAM,IAAIM,KAAK,gDAAAC,MAAA,CAAgDP,MAAM,CAAE,CAAC;MAC5E;IACJ;EACJ,CAAC,CAAC;AACN,CAAC;AACD,MAAMC,cAAc,GAAID,MAAM,IAAK,OAAOqB,IAAI,KAAK,UAAU,IAAIrB,MAAM,YAAYqB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
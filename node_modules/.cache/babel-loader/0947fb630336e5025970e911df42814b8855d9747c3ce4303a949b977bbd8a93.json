{"ast":null,"code":"import { deref } from \"../deref\";\nimport { ListSchema } from \"./ListSchema\";\nimport { MapSchema } from \"./MapSchema\";\nimport { SCHEMA } from \"./sentinels\";\nimport { SimpleSchema } from \"./SimpleSchema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class NormalizedSchema {\n  constructor(ref, memberName) {\n    this.ref = ref;\n    this.memberName = memberName;\n    const traitStack = [];\n    let _ref = ref;\n    let schema = ref;\n    this._isMemberSchema = false;\n    while (Array.isArray(_ref)) {\n      traitStack.push(_ref[1]);\n      _ref = _ref[0];\n      schema = deref(_ref);\n      this._isMemberSchema = true;\n    }\n    if (traitStack.length > 0) {\n      this.memberTraits = {};\n      for (let i = traitStack.length - 1; i >= 0; --i) {\n        const traitSet = traitStack[i];\n        Object.assign(this.memberTraits, NormalizedSchema.translateTraits(traitSet));\n      }\n    } else {\n      this.memberTraits = 0;\n    }\n    if (schema instanceof NormalizedSchema) {\n      this.name = schema.name;\n      this.traits = schema.traits;\n      this._isMemberSchema = schema._isMemberSchema;\n      this.schema = schema.schema;\n      this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());\n      this.normalizedTraits = void 0;\n      this.ref = schema.ref;\n      this.memberName = memberName ?? schema.memberName;\n      return;\n    }\n    this.schema = deref(schema);\n    if (this.schema && typeof this.schema === \"object\") {\n      this.traits = this.schema?.traits ?? {};\n    } else {\n      this.traits = 0;\n    }\n    this.name = (typeof this.schema === \"object\" ? this.schema?.name : void 0) ?? this.memberName ?? this.getSchemaName();\n    if (this._isMemberSchema && !memberName) {\n      throw new Error(`@smithy/core/schema - NormalizedSchema member schema ${this.getName(true)} must initialize with memberName argument.`);\n    }\n  }\n  static of(ref, memberName) {\n    if (ref instanceof NormalizedSchema) {\n      return ref;\n    }\n    return new NormalizedSchema(ref, memberName);\n  }\n  static translateTraits(indicator) {\n    if (typeof indicator === \"object\") {\n      return indicator;\n    }\n    indicator = indicator | 0;\n    const traits = {};\n    if ((indicator & 1) === 1) {\n      traits.httpLabel = 1;\n    }\n    if ((indicator >> 1 & 1) === 1) {\n      traits.idempotent = 1;\n    }\n    if ((indicator >> 2 & 1) === 1) {\n      traits.idempotencyToken = 1;\n    }\n    if ((indicator >> 3 & 1) === 1) {\n      traits.sensitive = 1;\n    }\n    if ((indicator >> 4 & 1) === 1) {\n      traits.httpPayload = 1;\n    }\n    if ((indicator >> 5 & 1) === 1) {\n      traits.httpResponseCode = 1;\n    }\n    if ((indicator >> 6 & 1) === 1) {\n      traits.httpQueryParams = 1;\n    }\n    return traits;\n  }\n  static memberFrom(memberSchema, memberName) {\n    if (memberSchema instanceof NormalizedSchema) {\n      memberSchema.memberName = memberName;\n      memberSchema._isMemberSchema = true;\n      return memberSchema;\n    }\n    return new NormalizedSchema(memberSchema, memberName);\n  }\n  getSchema() {\n    if (this.schema instanceof NormalizedSchema) {\n      return this.schema = this.schema.getSchema();\n    }\n    if (this.schema instanceof SimpleSchema) {\n      return deref(this.schema.schemaRef);\n    }\n    return deref(this.schema);\n  }\n  getName(withNamespace = false) {\n    if (!withNamespace) {\n      if (this.name && this.name.includes(\"#\")) {\n        return this.name.split(\"#\")[1];\n      }\n    }\n    return this.name || undefined;\n  }\n  getMemberName() {\n    if (!this.isMemberSchema()) {\n      throw new Error(`@smithy/core/schema - cannot get member name on non-member schema: ${this.getName(true)}`);\n    }\n    return this.memberName;\n  }\n  isMemberSchema() {\n    return this._isMemberSchema;\n  }\n  isUnitSchema() {\n    return this.getSchema() === \"unit\";\n  }\n  isListSchema() {\n    const inner = this.getSchema();\n    if (typeof inner === \"number\") {\n      return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;\n    }\n    return inner instanceof ListSchema;\n  }\n  isMapSchema() {\n    const inner = this.getSchema();\n    if (typeof inner === \"number\") {\n      return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;\n    }\n    return inner instanceof MapSchema;\n  }\n  isDocumentSchema() {\n    return this.getSchema() === SCHEMA.DOCUMENT;\n  }\n  isStructSchema() {\n    const inner = this.getSchema();\n    return inner !== null && typeof inner === \"object\" && \"members\" in inner || inner instanceof StructureSchema;\n  }\n  isBlobSchema() {\n    return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;\n  }\n  isTimestampSchema() {\n    const schema = this.getSchema();\n    return typeof schema === \"number\" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;\n  }\n  isStringSchema() {\n    return this.getSchema() === SCHEMA.STRING;\n  }\n  isBooleanSchema() {\n    return this.getSchema() === SCHEMA.BOOLEAN;\n  }\n  isNumericSchema() {\n    return this.getSchema() === SCHEMA.NUMERIC;\n  }\n  isBigIntegerSchema() {\n    return this.getSchema() === SCHEMA.BIG_INTEGER;\n  }\n  isBigDecimalSchema() {\n    return this.getSchema() === SCHEMA.BIG_DECIMAL;\n  }\n  isStreaming() {\n    const streaming = !!this.getMergedTraits().streaming;\n    if (streaming) {\n      return true;\n    }\n    return this.getSchema() === SCHEMA.STREAMING_BLOB;\n  }\n  getMergedTraits() {\n    if (this.normalizedTraits) {\n      return this.normalizedTraits;\n    }\n    this.normalizedTraits = {\n      ...this.getOwnTraits(),\n      ...this.getMemberTraits()\n    };\n    return this.normalizedTraits;\n  }\n  getMemberTraits() {\n    return NormalizedSchema.translateTraits(this.memberTraits);\n  }\n  getOwnTraits() {\n    return NormalizedSchema.translateTraits(this.traits);\n  }\n  getKeySchema() {\n    if (this.isDocumentSchema()) {\n      return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"key\");\n    }\n    if (!this.isMapSchema()) {\n      throw new Error(`@smithy/core/schema - cannot get key schema for non-map schema: ${this.getName(true)}`);\n    }\n    const schema = this.getSchema();\n    if (typeof schema === \"number\") {\n      return NormalizedSchema.memberFrom([63 & schema, 0], \"key\");\n    }\n    return NormalizedSchema.memberFrom([schema.keySchema, 0], \"key\");\n  }\n  getValueSchema() {\n    const schema = this.getSchema();\n    if (typeof schema === \"number\") {\n      if (this.isMapSchema()) {\n        return NormalizedSchema.memberFrom([63 & schema, 0], \"value\");\n      } else if (this.isListSchema()) {\n        return NormalizedSchema.memberFrom([63 & schema, 0], \"member\");\n      }\n    }\n    if (schema && typeof schema === \"object\") {\n      if (this.isStructSchema()) {\n        throw new Error(`cannot call getValueSchema() with StructureSchema ${this.getName(true)}`);\n      }\n      const collection = schema;\n      if (\"valueSchema\" in collection) {\n        if (this.isMapSchema()) {\n          return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"value\");\n        } else if (this.isListSchema()) {\n          return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"member\");\n        }\n      }\n    }\n    if (this.isDocumentSchema()) {\n      return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"value\");\n    }\n    throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a value member.`);\n  }\n  getMemberSchema(member) {\n    if (this.isStructSchema()) {\n      const struct = this.getSchema();\n      if (!(member in struct.members)) {\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a member with name=${member}.`);\n      }\n      return NormalizedSchema.memberFrom(struct.members[member], member);\n    }\n    if (this.isDocumentSchema()) {\n      return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], member);\n    }\n    throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have members.`);\n  }\n  getMemberSchemas() {\n    const {\n      schema\n    } = this;\n    const struct = schema;\n    if (!struct || typeof struct !== \"object\") {\n      return {};\n    }\n    if (\"members\" in struct) {\n      const buffer = {};\n      for (const member of struct.memberNames) {\n        buffer[member] = this.getMemberSchema(member);\n      }\n      return buffer;\n    }\n    return {};\n  }\n  *structIterator() {\n    if (this.isUnitSchema()) {\n      return;\n    }\n    if (!this.isStructSchema()) {\n      throw new Error(\"@smithy/core/schema - cannot acquire structIterator on non-struct schema.\");\n    }\n    const struct = this.getSchema();\n    for (let i = 0; i < struct.memberNames.length; ++i) {\n      yield [struct.memberNames[i], NormalizedSchema.memberFrom([struct.memberList[i], 0], struct.memberNames[i])];\n    }\n  }\n  getSchemaName() {\n    const schema = this.getSchema();\n    if (typeof schema === \"number\") {\n      const _schema = 63 & schema;\n      const container = 192 & schema;\n      const type = Object.entries(SCHEMA).find(([, value]) => {\n        return value === _schema;\n      })?.[0] ?? \"Unknown\";\n      switch (container) {\n        case SCHEMA.MAP_MODIFIER:\n          return `${type}Map`;\n        case SCHEMA.LIST_MODIFIER:\n          return `${type}List`;\n        case 0:\n          return type;\n      }\n    }\n    return \"Unknown\";\n  }\n}","map":{"version":3,"names":["deref","ListSchema","MapSchema","SCHEMA","SimpleSchema","StructureSchema","NormalizedSchema","constructor","ref","memberName","traitStack","_ref","schema","_isMemberSchema","Array","isArray","push","length","memberTraits","i","traitSet","Object","assign","translateTraits","name","traits","getMemberTraits","normalizedTraits","getSchemaName","Error","getName","of","indicator","httpLabel","idempotent","idempotencyToken","sensitive","httpPayload","httpResponseCode","httpQueryParams","memberFrom","memberSchema","getSchema","schemaRef","withNamespace","includes","split","undefined","getMemberName","isMemberSchema","isUnitSchema","isListSchema","inner","LIST_MODIFIER","MAP_MODIFIER","isMapSchema","isDocumentSchema","DOCUMENT","isStructSchema","isBlobSchema","BLOB","STREAMING_BLOB","isTimestampSchema","TIMESTAMP_DEFAULT","TIMESTAMP_EPOCH_SECONDS","isStringSchema","STRING","isBooleanSchema","BOOLEAN","isNumericSchema","NUMERIC","isBigIntegerSchema","BIG_INTEGER","isBigDecimalSchema","BIG_DECIMAL","isStreaming","streaming","getMergedTraits","getOwnTraits","getKeySchema","keySchema","getValueSchema","collection","valueSchema","getMemberSchema","member","struct","members","getMemberSchemas","buffer","memberNames","structIterator","memberList","_schema","container","type","entries","find","value"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/core/dist-es/submodules/schema/schemas/NormalizedSchema.js"],"sourcesContent":["import { deref } from \"../deref\";\nimport { ListSchema } from \"./ListSchema\";\nimport { MapSchema } from \"./MapSchema\";\nimport { SCHEMA } from \"./sentinels\";\nimport { SimpleSchema } from \"./SimpleSchema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class NormalizedSchema {\n    constructor(ref, memberName) {\n        this.ref = ref;\n        this.memberName = memberName;\n        const traitStack = [];\n        let _ref = ref;\n        let schema = ref;\n        this._isMemberSchema = false;\n        while (Array.isArray(_ref)) {\n            traitStack.push(_ref[1]);\n            _ref = _ref[0];\n            schema = deref(_ref);\n            this._isMemberSchema = true;\n        }\n        if (traitStack.length > 0) {\n            this.memberTraits = {};\n            for (let i = traitStack.length - 1; i >= 0; --i) {\n                const traitSet = traitStack[i];\n                Object.assign(this.memberTraits, NormalizedSchema.translateTraits(traitSet));\n            }\n        }\n        else {\n            this.memberTraits = 0;\n        }\n        if (schema instanceof NormalizedSchema) {\n            this.name = schema.name;\n            this.traits = schema.traits;\n            this._isMemberSchema = schema._isMemberSchema;\n            this.schema = schema.schema;\n            this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());\n            this.normalizedTraits = void 0;\n            this.ref = schema.ref;\n            this.memberName = memberName ?? schema.memberName;\n            return;\n        }\n        this.schema = deref(schema);\n        if (this.schema && typeof this.schema === \"object\") {\n            this.traits = this.schema?.traits ?? {};\n        }\n        else {\n            this.traits = 0;\n        }\n        this.name =\n            (typeof this.schema === \"object\" ? this.schema?.name : void 0) ?? this.memberName ?? this.getSchemaName();\n        if (this._isMemberSchema && !memberName) {\n            throw new Error(`@smithy/core/schema - NormalizedSchema member schema ${this.getName(true)} must initialize with memberName argument.`);\n        }\n    }\n    static of(ref, memberName) {\n        if (ref instanceof NormalizedSchema) {\n            return ref;\n        }\n        return new NormalizedSchema(ref, memberName);\n    }\n    static translateTraits(indicator) {\n        if (typeof indicator === \"object\") {\n            return indicator;\n        }\n        indicator = indicator | 0;\n        const traits = {};\n        if ((indicator & 1) === 1) {\n            traits.httpLabel = 1;\n        }\n        if (((indicator >> 1) & 1) === 1) {\n            traits.idempotent = 1;\n        }\n        if (((indicator >> 2) & 1) === 1) {\n            traits.idempotencyToken = 1;\n        }\n        if (((indicator >> 3) & 1) === 1) {\n            traits.sensitive = 1;\n        }\n        if (((indicator >> 4) & 1) === 1) {\n            traits.httpPayload = 1;\n        }\n        if (((indicator >> 5) & 1) === 1) {\n            traits.httpResponseCode = 1;\n        }\n        if (((indicator >> 6) & 1) === 1) {\n            traits.httpQueryParams = 1;\n        }\n        return traits;\n    }\n    static memberFrom(memberSchema, memberName) {\n        if (memberSchema instanceof NormalizedSchema) {\n            memberSchema.memberName = memberName;\n            memberSchema._isMemberSchema = true;\n            return memberSchema;\n        }\n        return new NormalizedSchema(memberSchema, memberName);\n    }\n    getSchema() {\n        if (this.schema instanceof NormalizedSchema) {\n            return (this.schema = this.schema.getSchema());\n        }\n        if (this.schema instanceof SimpleSchema) {\n            return deref(this.schema.schemaRef);\n        }\n        return deref(this.schema);\n    }\n    getName(withNamespace = false) {\n        if (!withNamespace) {\n            if (this.name && this.name.includes(\"#\")) {\n                return this.name.split(\"#\")[1];\n            }\n        }\n        return this.name || undefined;\n    }\n    getMemberName() {\n        if (!this.isMemberSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get member name on non-member schema: ${this.getName(true)}`);\n        }\n        return this.memberName;\n    }\n    isMemberSchema() {\n        return this._isMemberSchema;\n    }\n    isUnitSchema() {\n        return this.getSchema() === \"unit\";\n    }\n    isListSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;\n        }\n        return inner instanceof ListSchema;\n    }\n    isMapSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;\n        }\n        return inner instanceof MapSchema;\n    }\n    isDocumentSchema() {\n        return this.getSchema() === SCHEMA.DOCUMENT;\n    }\n    isStructSchema() {\n        const inner = this.getSchema();\n        return (inner !== null && typeof inner === \"object\" && \"members\" in inner) || inner instanceof StructureSchema;\n    }\n    isBlobSchema() {\n        return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    isTimestampSchema() {\n        const schema = this.getSchema();\n        return typeof schema === \"number\" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;\n    }\n    isStringSchema() {\n        return this.getSchema() === SCHEMA.STRING;\n    }\n    isBooleanSchema() {\n        return this.getSchema() === SCHEMA.BOOLEAN;\n    }\n    isNumericSchema() {\n        return this.getSchema() === SCHEMA.NUMERIC;\n    }\n    isBigIntegerSchema() {\n        return this.getSchema() === SCHEMA.BIG_INTEGER;\n    }\n    isBigDecimalSchema() {\n        return this.getSchema() === SCHEMA.BIG_DECIMAL;\n    }\n    isStreaming() {\n        const streaming = !!this.getMergedTraits().streaming;\n        if (streaming) {\n            return true;\n        }\n        return this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    getMergedTraits() {\n        if (this.normalizedTraits) {\n            return this.normalizedTraits;\n        }\n        this.normalizedTraits = {\n            ...this.getOwnTraits(),\n            ...this.getMemberTraits(),\n        };\n        return this.normalizedTraits;\n    }\n    getMemberTraits() {\n        return NormalizedSchema.translateTraits(this.memberTraits);\n    }\n    getOwnTraits() {\n        return NormalizedSchema.translateTraits(this.traits);\n    }\n    getKeySchema() {\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"key\");\n        }\n        if (!this.isMapSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get key schema for non-map schema: ${this.getName(true)}`);\n        }\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            return NormalizedSchema.memberFrom([63 & schema, 0], \"key\");\n        }\n        return NormalizedSchema.memberFrom([schema.keySchema, 0], \"key\");\n    }\n    getValueSchema() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            if (this.isMapSchema()) {\n                return NormalizedSchema.memberFrom([63 & schema, 0], \"value\");\n            }\n            else if (this.isListSchema()) {\n                return NormalizedSchema.memberFrom([63 & schema, 0], \"member\");\n            }\n        }\n        if (schema && typeof schema === \"object\") {\n            if (this.isStructSchema()) {\n                throw new Error(`cannot call getValueSchema() with StructureSchema ${this.getName(true)}`);\n            }\n            const collection = schema;\n            if (\"valueSchema\" in collection) {\n                if (this.isMapSchema()) {\n                    return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"value\");\n                }\n                else if (this.isListSchema()) {\n                    return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"member\");\n                }\n            }\n        }\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"value\");\n        }\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a value member.`);\n    }\n    getMemberSchema(member) {\n        if (this.isStructSchema()) {\n            const struct = this.getSchema();\n            if (!(member in struct.members)) {\n                throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a member with name=${member}.`);\n            }\n            return NormalizedSchema.memberFrom(struct.members[member], member);\n        }\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], member);\n        }\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have members.`);\n    }\n    getMemberSchemas() {\n        const { schema } = this;\n        const struct = schema;\n        if (!struct || typeof struct !== \"object\") {\n            return {};\n        }\n        if (\"members\" in struct) {\n            const buffer = {};\n            for (const member of struct.memberNames) {\n                buffer[member] = this.getMemberSchema(member);\n            }\n            return buffer;\n        }\n        return {};\n    }\n    *structIterator() {\n        if (this.isUnitSchema()) {\n            return;\n        }\n        if (!this.isStructSchema()) {\n            throw new Error(\"@smithy/core/schema - cannot acquire structIterator on non-struct schema.\");\n        }\n        const struct = this.getSchema();\n        for (let i = 0; i < struct.memberNames.length; ++i) {\n            yield [struct.memberNames[i], NormalizedSchema.memberFrom([struct.memberList[i], 0], struct.memberNames[i])];\n        }\n    }\n    getSchemaName() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            const _schema = 63 & schema;\n            const container = 192 & schema;\n            const type = Object.entries(SCHEMA).find(([, value]) => {\n                return value === _schema;\n            })?.[0] ?? \"Unknown\";\n            switch (container) {\n                case SCHEMA.MAP_MODIFIER:\n                    return `${type}Map`;\n                case SCHEMA.LIST_MODIFIER:\n                    return `${type}List`;\n                case 0:\n                    return type;\n            }\n        }\n        return \"Unknown\";\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
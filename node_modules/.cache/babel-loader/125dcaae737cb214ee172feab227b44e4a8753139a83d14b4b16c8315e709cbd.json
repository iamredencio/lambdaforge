{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { HttpResponse } from \"@smithy/protocol-http\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nexport const schemaDeserializationMiddleware = config => (next, context) => async args => {\n  const {\n    response\n  } = await next(args);\n  const {\n    operationSchema\n  } = getSmithyContext(context);\n  try {\n    const parsed = await config.protocol.deserializeResponse(operationSchema, _objectSpread(_objectSpread({}, config), context), response);\n    return {\n      response,\n      output: parsed\n    };\n  } catch (error) {\n    Object.defineProperty(error, \"$response\", {\n      value: response\n    });\n    if (!(\"$metadata\" in error)) {\n      const hint = \"Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.\";\n      try {\n        error.message += \"\\n  \" + hint;\n      } catch (e) {\n        var _context$logger;\n        if (!context.logger || ((_context$logger = context.logger) === null || _context$logger === void 0 || (_context$logger = _context$logger.constructor) === null || _context$logger === void 0 ? void 0 : _context$logger.name) === \"NoOpLogger\") {\n          console.warn(hint);\n        } else {\n          var _context$logger2, _context$logger2$warn;\n          (_context$logger2 = context.logger) === null || _context$logger2 === void 0 || (_context$logger2$warn = _context$logger2.warn) === null || _context$logger2$warn === void 0 || _context$logger2$warn.call(_context$logger2, hint);\n        }\n      }\n      if (typeof error.$responseBodyText !== \"undefined\") {\n        if (error.$response) {\n          error.$response.body = error.$responseBodyText;\n        }\n      }\n      try {\n        if (HttpResponse.isInstance(response)) {\n          const {\n            headers = {}\n          } = response;\n          const headerEntries = Object.entries(headers);\n          error.$metadata = {\n            httpStatusCode: response.statusCode,\n            requestId: findHeader(/^x-[\\w-]+-request-?id$/, headerEntries),\n            extendedRequestId: findHeader(/^x-[\\w-]+-id-2$/, headerEntries),\n            cfId: findHeader(/^x-[\\w-]+-cf-id$/, headerEntries)\n          };\n        }\n      } catch (e) {}\n    }\n    throw error;\n  }\n};\nconst findHeader = (pattern, headers) => {\n  return (headers.find(_ref => {\n    let [k] = _ref;\n    return k.match(pattern);\n  }) || [void 0, void 1])[1];\n};","map":{"version":3,"names":["HttpResponse","getSmithyContext","schemaDeserializationMiddleware","config","next","context","args","response","operationSchema","parsed","protocol","deserializeResponse","_objectSpread","output","error","Object","defineProperty","value","hint","message","e","_context$logger","logger","constructor","name","console","warn","_context$logger2","_context$logger2$warn","call","$responseBodyText","$response","body","isInstance","headers","headerEntries","entries","$metadata","httpStatusCode","statusCode","requestId","findHeader","extendedRequestId","cfId","pattern","find","_ref","k","match"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/core/dist-es/submodules/schema/middleware/schemaDeserializationMiddleware.js"],"sourcesContent":["import { HttpResponse } from \"@smithy/protocol-http\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nexport const schemaDeserializationMiddleware = (config) => (next, context) => async (args) => {\n    const { response } = await next(args);\n    const { operationSchema } = getSmithyContext(context);\n    try {\n        const parsed = await config.protocol.deserializeResponse(operationSchema, {\n            ...config,\n            ...context,\n        }, response);\n        return {\n            response,\n            output: parsed,\n        };\n    }\n    catch (error) {\n        Object.defineProperty(error, \"$response\", {\n            value: response,\n        });\n        if (!(\"$metadata\" in error)) {\n            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n            try {\n                error.message += \"\\n  \" + hint;\n            }\n            catch (e) {\n                if (!context.logger || context.logger?.constructor?.name === \"NoOpLogger\") {\n                    console.warn(hint);\n                }\n                else {\n                    context.logger?.warn?.(hint);\n                }\n            }\n            if (typeof error.$responseBodyText !== \"undefined\") {\n                if (error.$response) {\n                    error.$response.body = error.$responseBodyText;\n                }\n            }\n            try {\n                if (HttpResponse.isInstance(response)) {\n                    const { headers = {} } = response;\n                    const headerEntries = Object.entries(headers);\n                    error.$metadata = {\n                        httpStatusCode: response.statusCode,\n                        requestId: findHeader(/^x-[\\w-]+-request-?id$/, headerEntries),\n                        extendedRequestId: findHeader(/^x-[\\w-]+-id-2$/, headerEntries),\n                        cfId: findHeader(/^x-[\\w-]+-cf-id$/, headerEntries),\n                    };\n                }\n            }\n            catch (e) {\n            }\n        }\n        throw error;\n    }\n};\nconst findHeader = (pattern, headers) => {\n    return (headers.find(([k]) => {\n        return k.match(pattern);\n    }) || [void 0, void 1])[1];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
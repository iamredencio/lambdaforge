{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = value => {\n  const {\n    partitions\n  } = selectedPartitionsInfo;\n  for (const partition of partitions) {\n    const {\n      regions,\n      outputs\n    } = partition;\n    for (const [region, regionData] of Object.entries(regions)) {\n      if (region === value) {\n        return _objectSpread(_objectSpread({}, outputs), regionData);\n      }\n    }\n  }\n  for (const partition of partitions) {\n    const {\n      regionRegex,\n      outputs\n    } = partition;\n    if (new RegExp(regionRegex).test(value)) {\n      return _objectSpread({}, outputs);\n    }\n  }\n  const DEFAULT_PARTITION = partitions.find(partition => partition.id === \"aws\");\n  if (!DEFAULT_PARTITION) {\n    throw new Error(\"Provided region was not found in the partition array or regex,\" + \" and default partition with id 'aws' doesn't exist.\");\n  }\n  return _objectSpread({}, DEFAULT_PARTITION.outputs);\n};\nexport const setPartitionInfo = function (partitionsInfo) {\n  let userAgentPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  selectedPartitionsInfo = partitionsInfo;\n  selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n  setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;","map":{"version":3,"names":["partitionsInfo","selectedPartitionsInfo","selectedUserAgentPrefix","partition","value","partitions","regions","outputs","region","regionData","Object","entries","_objectSpread","regionRegex","RegExp","test","DEFAULT_PARTITION","find","id","Error","setPartitionInfo","userAgentPrefix","arguments","length","undefined","useDefaultPartitionInfo","getUserAgentPrefix"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"],"sourcesContent":["import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n"],"mappings":";AAAA,OAAOA,cAAc,MAAM,mBAAmB;AAC9C,IAAIC,sBAAsB,GAAGD,cAAc;AAC3C,IAAIE,uBAAuB,GAAG,EAAE;AAChC,OAAO,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAChC,MAAM;IAAEC;EAAW,CAAC,GAAGJ,sBAAsB;EAC7C,KAAK,MAAME,SAAS,IAAIE,UAAU,EAAE;IAChC,MAAM;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGJ,SAAS;IACtC,KAAK,MAAM,CAACK,MAAM,EAAEC,UAAU,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,EAAE;MACxD,IAAIE,MAAM,KAAKJ,KAAK,EAAE;QAClB,OAAAQ,aAAA,CAAAA,aAAA,KACOL,OAAO,GACPE,UAAU;MAErB;IACJ;EACJ;EACA,KAAK,MAAMN,SAAS,IAAIE,UAAU,EAAE;IAChC,MAAM;MAAEQ,WAAW;MAAEN;IAAQ,CAAC,GAAGJ,SAAS;IAC1C,IAAI,IAAIW,MAAM,CAACD,WAAW,CAAC,CAACE,IAAI,CAACX,KAAK,CAAC,EAAE;MACrC,OAAAQ,aAAA,KACOL,OAAO;IAElB;EACJ;EACA,MAAMS,iBAAiB,GAAGX,UAAU,CAACY,IAAI,CAAEd,SAAS,IAAKA,SAAS,CAACe,EAAE,KAAK,KAAK,CAAC;EAChF,IAAI,CAACF,iBAAiB,EAAE;IACpB,MAAM,IAAIG,KAAK,CAAC,gEAAgE,GAC5E,qDAAqD,CAAC;EAC9D;EACA,OAAAP,aAAA,KACOI,iBAAiB,CAACT,OAAO;AAEpC,CAAC;AACD,OAAO,MAAMa,gBAAgB,GAAG,SAAAA,CAACpB,cAAc,EAA2B;EAAA,IAAzBqB,eAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACjErB,sBAAsB,GAAGD,cAAc;EACvCE,uBAAuB,GAAGmB,eAAe;AAC7C,CAAC;AACD,OAAO,MAAMI,uBAAuB,GAAGA,CAAA,KAAM;EACzCL,gBAAgB,CAACpB,cAAc,EAAE,EAAE,CAAC;AACxC,CAAC;AACD,OAAO,MAAM0B,kBAAkB,GAAGA,CAAA,KAAMxB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// AWS Configuration for LambdaForge\n// ⚠️ SECURITY WARNING: This is a demo application. \n// In production, use IAM roles, AWS Cognito, or AWS IAM Identity Center instead of hardcoded credentials.\nexport const awsConfig={// AWS Bedrock settings\nbedrock:{region:process.env.REACT_APP_AWS_REGION||'us-east-1',modelId:'anthropic.claude-3-sonnet-20240229-v1:0',maxTokens:4000,temperature:0.1,topP:0.9},// AWS Credentials (DEMO ONLY - DO NOT USE IN PRODUCTION)\n// Production alternatives:\n// 1. AWS IAM Roles with AssumeRole\n// 2. AWS Cognito Identity Pools\n// 3. AWS IAM Identity Center (SSO)\n// 4. Temporary credentials via STS\ncredentials:{accessKeyId:process.env.REACT_APP_AWS_ACCESS_KEY_ID||'',secretAccessKey:process.env.REACT_APP_AWS_SECRET_ACCESS_KEY||''},// Security settings\nsecurity:{// Enable HTTPS only\nenforceHTTPS:true,// Maximum credential age in milliseconds (24 hours)\nmaxCredentialAge:24*60*60*1000,// Enable credential validation\nvalidateCredentials:true,// Sanitize user inputs\nsanitizeInputs:true},// Feature flags\nfeatures:{enableAISuggestions:process.env.REACT_APP_ENABLE_AI_SUGGESTIONS!=='false',enableFallbackMode:true,debugMode:process.env.REACT_APP_DEBUG_MODE==='true',// Security features\nenableCredentialWarnings:true,enableInputSanitization:true},// Available Bedrock regions\navailableRegions:['us-east-1','us-west-2','eu-west-1','ap-southeast-1','ap-northeast-1'],// Supported models\nsupportedModels:[{id:'anthropic.claude-3-sonnet-20240229-v1:0',name:'Claude 3 Sonnet',provider:'Anthropic',description:'Balanced performance and speed for architecture analysis'},{id:'anthropic.claude-3-haiku-20240307-v1:0',name:'Claude 3 Haiku',provider:'Anthropic',description:'Fast and efficient for quick suggestions'}]};// Input sanitization function\nexport const sanitizeInput=input=>{if(typeof input!=='string')return input;// Remove potentially dangerous characters\nreturn input.replace(/[<>]/g,'')// Remove angle brackets\n.replace(/javascript:/gi,'')// Remove javascript: protocol\n.replace(/on\\w+=/gi,'')// Remove event handlers\n.trim().substring(0,1000);// Limit length\n};// Enhanced validation function\nexport const validateAWSConfig=()=>{const errors=[];const warnings=[];// Check region\nif(!awsConfig.availableRegions.includes(awsConfig.bedrock.region)){errors.push(\"Region \".concat(awsConfig.bedrock.region,\" is not supported for Bedrock\"));}// Security checks\nif(window.location.protocol==='http:'&&awsConfig.security.enforceHTTPS){warnings.push('Application is running over HTTP - HTTPS recommended for production');}return{isValid:errors.length===0,errors,warnings};};// Security utilities\nexport const securityUtils={// Check if credentials appear to be production-ready\nisProductionCredentials:(accessKeyId,secretAccessKey)=>{const testPatterns=[/EXAMPLE/i,/DEMO/i,/TEST/i,/FAKE/i,/SAMPLE/i];return!testPatterns.some(pattern=>pattern.test(accessKeyId)||pattern.test(secretAccessKey));},// Mask sensitive data for logging\nmaskCredentials:credentials=>({accessKeyId:credentials.accessKeyId?credentials.accessKeyId.substring(0,4)+'***'+credentials.accessKeyId.slice(-4):'',secretAccessKey:credentials.secretAccessKey?'***masked***':''}),// Validate input format\nvalidateInputFormat:(input,type)=>{switch(type){case'projectName':return /^[a-zA-Z0-9-_]{1,50}$/.test(input);case'awsRegion':return awsConfig.availableRegions.includes(input);case'accessKeyId':return /^[A-Z0-9]{16,32}$/.test(input);default:return true;}}};export default awsConfig;","map":{"version":3,"names":["awsConfig","bedrock","region","process","env","REACT_APP_AWS_REGION","modelId","maxTokens","temperature","topP","credentials","accessKeyId","REACT_APP_AWS_ACCESS_KEY_ID","secretAccessKey","REACT_APP_AWS_SECRET_ACCESS_KEY","security","enforceHTTPS","maxCredentialAge","validateCredentials","sanitizeInputs","features","enableAISuggestions","REACT_APP_ENABLE_AI_SUGGESTIONS","enableFallbackMode","debugMode","REACT_APP_DEBUG_MODE","enableCredentialWarnings","enableInputSanitization","availableRegions","supportedModels","id","name","provider","description","sanitizeInput","input","replace","trim","substring","validateAWSConfig","errors","warnings","includes","push","concat","window","location","protocol","isValid","length","securityUtils","isProductionCredentials","testPatterns","some","pattern","test","maskCredentials","slice","validateInputFormat","type"],"sources":["/Users/codinggents/Documents/lambdaforge/src/config/aws-config.js"],"sourcesContent":["// AWS Configuration for LambdaForge\n// ⚠️ SECURITY WARNING: This is a demo application. \n// In production, use IAM roles, AWS Cognito, or AWS IAM Identity Center instead of hardcoded credentials.\n\nexport const awsConfig = {\n  // AWS Bedrock settings\n  bedrock: {\n    region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n    modelId: 'anthropic.claude-3-sonnet-20240229-v1:0',\n    maxTokens: 4000,\n    temperature: 0.1,\n    topP: 0.9\n  },\n\n  // AWS Credentials (DEMO ONLY - DO NOT USE IN PRODUCTION)\n  // Production alternatives:\n  // 1. AWS IAM Roles with AssumeRole\n  // 2. AWS Cognito Identity Pools\n  // 3. AWS IAM Identity Center (SSO)\n  // 4. Temporary credentials via STS\n  credentials: {\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID || '',\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY || ''\n  },\n\n  // Security settings\n  security: {\n    // Enable HTTPS only\n    enforceHTTPS: true,\n    // Maximum credential age in milliseconds (24 hours)\n    maxCredentialAge: 24 * 60 * 60 * 1000,\n    // Enable credential validation\n    validateCredentials: true,\n    // Sanitize user inputs\n    sanitizeInputs: true\n  },\n\n  // Feature flags\n  features: {\n    enableAISuggestions: process.env.REACT_APP_ENABLE_AI_SUGGESTIONS !== 'false',\n    enableFallbackMode: true,\n    debugMode: process.env.REACT_APP_DEBUG_MODE === 'true',\n    // Security features\n    enableCredentialWarnings: true,\n    enableInputSanitization: true\n  },\n\n  // Available Bedrock regions\n  availableRegions: [\n    'us-east-1',\n    'us-west-2',\n    'eu-west-1',\n    'ap-southeast-1',\n    'ap-northeast-1'\n  ],\n\n  // Supported models\n  supportedModels: [\n    {\n      id: 'anthropic.claude-3-sonnet-20240229-v1:0',\n      name: 'Claude 3 Sonnet',\n      provider: 'Anthropic',\n      description: 'Balanced performance and speed for architecture analysis'\n    },\n    {\n      id: 'anthropic.claude-3-haiku-20240307-v1:0',\n      name: 'Claude 3 Haiku',\n      provider: 'Anthropic',\n      description: 'Fast and efficient for quick suggestions'\n    }\n  ]\n};\n\n// Input sanitization function\nexport const sanitizeInput = (input) => {\n  if (typeof input !== 'string') return input;\n  \n  // Remove potentially dangerous characters\n  return input\n    .replace(/[<>]/g, '') // Remove angle brackets\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\n    .replace(/on\\w+=/gi, '') // Remove event handlers\n    .trim()\n    .substring(0, 1000); // Limit length\n};\n\n// Enhanced validation function\nexport const validateAWSConfig = () => {\n  const errors = [];\n  const warnings = [];\n  \n  // Check region\n  if (!awsConfig.availableRegions.includes(awsConfig.bedrock.region)) {\n    errors.push(`Region ${awsConfig.bedrock.region} is not supported for Bedrock`);\n  }\n  \n  // Security checks\n  if (window.location.protocol === 'http:' && awsConfig.security.enforceHTTPS) {\n    warnings.push('Application is running over HTTP - HTTPS recommended for production');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n// Security utilities\nexport const securityUtils = {\n  // Check if credentials appear to be production-ready\n  isProductionCredentials: (accessKeyId, secretAccessKey) => {\n    const testPatterns = [\n      /EXAMPLE/i,\n      /DEMO/i,\n      /TEST/i,\n      /FAKE/i,\n      /SAMPLE/i\n    ];\n    \n    return !testPatterns.some(pattern => \n      pattern.test(accessKeyId) || pattern.test(secretAccessKey)\n    );\n  },\n  \n  // Mask sensitive data for logging\n  maskCredentials: (credentials) => ({\n    accessKeyId: credentials.accessKeyId ? \n      credentials.accessKeyId.substring(0, 4) + '***' + credentials.accessKeyId.slice(-4) : '',\n    secretAccessKey: credentials.secretAccessKey ? '***masked***' : ''\n  }),\n  \n  // Validate input format\n  validateInputFormat: (input, type) => {\n    switch (type) {\n      case 'projectName':\n        return /^[a-zA-Z0-9-_]{1,50}$/.test(input);\n      case 'awsRegion':\n        return awsConfig.availableRegions.includes(input);\n      case 'accessKeyId':\n        return /^[A-Z0-9]{16,32}$/.test(input);\n      default:\n        return true;\n    }\n  }\n};\n\nexport default awsConfig; "],"mappings":"AAAA;AACA;AACA;AAEA,MAAO,MAAM,CAAAA,SAAS,CAAG,CACvB;AACAC,OAAO,CAAE,CACPC,MAAM,CAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB,EAAI,WAAW,CACvDC,OAAO,CAAE,yCAAyC,CAClDC,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,GAAG,CAChBC,IAAI,CAAE,GACR,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACAC,WAAW,CAAE,CACXC,WAAW,CAAER,OAAO,CAACC,GAAG,CAACQ,2BAA2B,EAAI,EAAE,CAC1DC,eAAe,CAAEV,OAAO,CAACC,GAAG,CAACU,+BAA+B,EAAI,EAClE,CAAC,CAED;AACAC,QAAQ,CAAE,CACR;AACAC,YAAY,CAAE,IAAI,CAClB;AACAC,gBAAgB,CAAE,EAAE,CAAG,EAAE,CAAG,EAAE,CAAG,IAAI,CACrC;AACAC,mBAAmB,CAAE,IAAI,CACzB;AACAC,cAAc,CAAE,IAClB,CAAC,CAED;AACAC,QAAQ,CAAE,CACRC,mBAAmB,CAAElB,OAAO,CAACC,GAAG,CAACkB,+BAA+B,GAAK,OAAO,CAC5EC,kBAAkB,CAAE,IAAI,CACxBC,SAAS,CAAErB,OAAO,CAACC,GAAG,CAACqB,oBAAoB,GAAK,MAAM,CACtD;AACAC,wBAAwB,CAAE,IAAI,CAC9BC,uBAAuB,CAAE,IAC3B,CAAC,CAED;AACAC,gBAAgB,CAAE,CAChB,WAAW,CACX,WAAW,CACX,WAAW,CACX,gBAAgB,CAChB,gBAAgB,CACjB,CAED;AACAC,eAAe,CAAE,CACf,CACEC,EAAE,CAAE,yCAAyC,CAC7CC,IAAI,CAAE,iBAAiB,CACvBC,QAAQ,CAAE,WAAW,CACrBC,WAAW,CAAE,0DACf,CAAC,CACD,CACEH,EAAE,CAAE,wCAAwC,CAC5CC,IAAI,CAAE,gBAAgB,CACtBC,QAAQ,CAAE,WAAW,CACrBC,WAAW,CAAE,0CACf,CAAC,CAEL,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAIC,KAAK,EAAK,CACtC,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,MAAO,CAAAA,KAAK,CAE3C;AACA,MAAO,CAAAA,KAAK,CACTC,OAAO,CAAC,OAAO,CAAE,EAAE,CAAE;AAAA,CACrBA,OAAO,CAAC,eAAe,CAAE,EAAE,CAAE;AAAA,CAC7BA,OAAO,CAAC,UAAU,CAAE,EAAE,CAAE;AAAA,CACxBC,IAAI,CAAC,CAAC,CACNC,SAAS,CAAC,CAAC,CAAE,IAAI,CAAC,CAAE;AACzB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CACrC,KAAM,CAAAC,MAAM,CAAG,EAAE,CACjB,KAAM,CAAAC,QAAQ,CAAG,EAAE,CAEnB;AACA,GAAI,CAACzC,SAAS,CAAC4B,gBAAgB,CAACc,QAAQ,CAAC1C,SAAS,CAACC,OAAO,CAACC,MAAM,CAAC,CAAE,CAClEsC,MAAM,CAACG,IAAI,WAAAC,MAAA,CAAW5C,SAAS,CAACC,OAAO,CAACC,MAAM,iCAA+B,CAAC,CAChF,CAEA;AACA,GAAI2C,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,OAAO,EAAI/C,SAAS,CAACe,QAAQ,CAACC,YAAY,CAAE,CAC3EyB,QAAQ,CAACE,IAAI,CAAC,qEAAqE,CAAC,CACtF,CAEA,MAAO,CACLK,OAAO,CAAER,MAAM,CAACS,MAAM,GAAK,CAAC,CAC5BT,MAAM,CACNC,QACF,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAS,aAAa,CAAG,CAC3B;AACAC,uBAAuB,CAAEA,CAACxC,WAAW,CAAEE,eAAe,GAAK,CACzD,KAAM,CAAAuC,YAAY,CAAG,CACnB,UAAU,CACV,OAAO,CACP,OAAO,CACP,OAAO,CACP,SAAS,CACV,CAED,MAAO,CAACA,YAAY,CAACC,IAAI,CAACC,OAAO,EAC/BA,OAAO,CAACC,IAAI,CAAC5C,WAAW,CAAC,EAAI2C,OAAO,CAACC,IAAI,CAAC1C,eAAe,CAC3D,CAAC,CACH,CAAC,CAED;AACA2C,eAAe,CAAG9C,WAAW,GAAM,CACjCC,WAAW,CAAED,WAAW,CAACC,WAAW,CAClCD,WAAW,CAACC,WAAW,CAAC2B,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAAG,KAAK,CAAG5B,WAAW,CAACC,WAAW,CAAC8C,KAAK,CAAC,CAAC,CAAC,CAAC,CAAG,EAAE,CAC1F5C,eAAe,CAAEH,WAAW,CAACG,eAAe,CAAG,cAAc,CAAG,EAClE,CAAC,CAAC,CAEF;AACA6C,mBAAmB,CAAEA,CAACvB,KAAK,CAAEwB,IAAI,GAAK,CACpC,OAAQA,IAAI,EACV,IAAK,aAAa,CAChB,MAAO,wBAAuB,CAACJ,IAAI,CAACpB,KAAK,CAAC,CAC5C,IAAK,WAAW,CACd,MAAO,CAAAnC,SAAS,CAAC4B,gBAAgB,CAACc,QAAQ,CAACP,KAAK,CAAC,CACnD,IAAK,aAAa,CAChB,MAAO,oBAAmB,CAACoB,IAAI,CAACpB,KAAK,CAAC,CACxC,QACE,MAAO,KAAI,CACf,CACF,CACF,CAAC,CAED,cAAe,CAAAnC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
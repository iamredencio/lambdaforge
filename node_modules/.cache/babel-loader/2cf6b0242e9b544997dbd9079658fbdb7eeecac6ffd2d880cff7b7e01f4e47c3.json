{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getAttr } from \"../lib\";\nexport const evaluateTemplate = (template, options) => {\n  const evaluatedTemplateArr = [];\n  const templateContext = _objectSpread(_objectSpread({}, options.endpointParams), options.referenceRecord);\n  let currentIndex = 0;\n  while (currentIndex < template.length) {\n    const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n    if (openingBraceIndex === -1) {\n      evaluatedTemplateArr.push(template.slice(currentIndex));\n      break;\n    }\n    evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n    const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n    if (closingBraceIndex === -1) {\n      evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n      break;\n    }\n    if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n      evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n      currentIndex = closingBraceIndex + 2;\n    }\n    const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n    if (parameterName.includes(\"#\")) {\n      const [refName, attrName] = parameterName.split(\"#\");\n      evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n    } else {\n      evaluatedTemplateArr.push(templateContext[parameterName]);\n    }\n    currentIndex = closingBraceIndex + 1;\n  }\n  return evaluatedTemplateArr.join(\"\");\n};","map":{"version":3,"names":["getAttr","evaluateTemplate","template","options","evaluatedTemplateArr","templateContext","_objectSpread","endpointParams","referenceRecord","currentIndex","length","openingBraceIndex","indexOf","push","slice","closingBraceIndex","parameterName","substring","includes","refName","attrName","split","join"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js"],"sourcesContent":["import { getAttr } from \"../lib\";\nexport const evaluateTemplate = (template, options) => {\n    const evaluatedTemplateArr = [];\n    const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    let currentIndex = 0;\n    while (currentIndex < template.length) {\n        const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n        if (openingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(currentIndex));\n            break;\n        }\n        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n        const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n        if (closingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n            break;\n        }\n        if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n            currentIndex = closingBraceIndex + 2;\n        }\n        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n        if (parameterName.includes(\"#\")) {\n            const [refName, attrName] = parameterName.split(\"#\");\n            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n        }\n        else {\n            evaluatedTemplateArr.push(templateContext[parameterName]);\n        }\n        currentIndex = closingBraceIndex + 1;\n    }\n    return evaluatedTemplateArr.join(\"\");\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,QAAQ;AAChC,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;EACnD,MAAMC,oBAAoB,GAAG,EAAE;EAC/B,MAAMC,eAAe,GAAAC,aAAA,CAAAA,aAAA,KACdH,OAAO,CAACI,cAAc,GACtBJ,OAAO,CAACK,eAAe,CAC7B;EACD,IAAIC,YAAY,GAAG,CAAC;EACpB,OAAOA,YAAY,GAAGP,QAAQ,CAACQ,MAAM,EAAE;IACnC,MAAMC,iBAAiB,GAAGT,QAAQ,CAACU,OAAO,CAAC,GAAG,EAAEH,YAAY,CAAC;IAC7D,IAAIE,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC1BP,oBAAoB,CAACS,IAAI,CAACX,QAAQ,CAACY,KAAK,CAACL,YAAY,CAAC,CAAC;MACvD;IACJ;IACAL,oBAAoB,CAACS,IAAI,CAACX,QAAQ,CAACY,KAAK,CAACL,YAAY,EAAEE,iBAAiB,CAAC,CAAC;IAC1E,MAAMI,iBAAiB,GAAGb,QAAQ,CAACU,OAAO,CAAC,GAAG,EAAED,iBAAiB,CAAC;IAClE,IAAII,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC1BX,oBAAoB,CAACS,IAAI,CAACX,QAAQ,CAACY,KAAK,CAACH,iBAAiB,CAAC,CAAC;MAC5D;IACJ;IACA,IAAIT,QAAQ,CAACS,iBAAiB,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIT,QAAQ,CAACa,iBAAiB,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;MACpFX,oBAAoB,CAACS,IAAI,CAACX,QAAQ,CAACY,KAAK,CAACH,iBAAiB,GAAG,CAAC,EAAEI,iBAAiB,CAAC,CAAC;MACnFN,YAAY,GAAGM,iBAAiB,GAAG,CAAC;IACxC;IACA,MAAMC,aAAa,GAAGd,QAAQ,CAACe,SAAS,CAACN,iBAAiB,GAAG,CAAC,EAAEI,iBAAiB,CAAC;IAClF,IAAIC,aAAa,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7B,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGJ,aAAa,CAACK,KAAK,CAAC,GAAG,CAAC;MACpDjB,oBAAoB,CAACS,IAAI,CAACb,OAAO,CAACK,eAAe,CAACc,OAAO,CAAC,EAAEC,QAAQ,CAAC,CAAC;IAC1E,CAAC,MACI;MACDhB,oBAAoB,CAACS,IAAI,CAACR,eAAe,CAACW,aAAa,CAAC,CAAC;IAC7D;IACAP,YAAY,GAAGM,iBAAiB,GAAG,CAAC;EACxC;EACA,OAAOX,oBAAoB,CAACkB,IAAI,CAAC,EAAE,CAAC;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { fromBase64 } from \"@smithy/util-base64\";\nexport const streamCollector = async stream => {\n  var _stream$constructor;\n  if (typeof Blob === \"function\" && stream instanceof Blob || ((_stream$constructor = stream.constructor) === null || _stream$constructor === void 0 ? void 0 : _stream$constructor.name) === \"Blob\") {\n    if (Blob.prototype.arrayBuffer !== undefined) {\n      return new Uint8Array(await stream.arrayBuffer());\n    }\n    return collectBlob(stream);\n  }\n  return collectStream(stream);\n};\nasync function collectBlob(blob) {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\nasync function collectStream(stream) {\n  const chunks = [];\n  const reader = stream.getReader();\n  let isDone = false;\n  let length = 0;\n  while (!isDone) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (value) {\n      chunks.push(value);\n      length += value.length;\n    }\n    isDone = done;\n  }\n  const collected = new Uint8Array(length);\n  let offset = 0;\n  for (const chunk of chunks) {\n    collected.set(chunk, offset);\n    offset += chunk.length;\n  }\n  return collected;\n}\nfunction readToBase64(blob) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      var _reader$result;\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = (_reader$result = reader.result) !== null && _reader$result !== void 0 ? _reader$result : \"\";\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"names":["fromBase64","streamCollector","stream","_stream$constructor","Blob","constructor","name","prototype","arrayBuffer","undefined","Uint8Array","collectBlob","collectStream","blob","base64","readToBase64","chunks","reader","getReader","isDone","length","done","value","read","push","collected","offset","chunk","set","Promise","resolve","reject","FileReader","onloadend","_reader$result","readyState","Error","result","commaIndex","indexOf","dataOffset","substring","onabort","onerror","error","readAsDataURL"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js"],"sourcesContent":["import { fromBase64 } from \"@smithy/util-base64\";\nexport const streamCollector = async (stream) => {\n    if ((typeof Blob === \"function\" && stream instanceof Blob) || stream.constructor?.name === \"Blob\") {\n        if (Blob.prototype.arrayBuffer !== undefined) {\n            return new Uint8Array(await stream.arrayBuffer());\n        }\n        return collectBlob(stream);\n    }\n    return collectStream(stream);\n};\nasync function collectBlob(blob) {\n    const base64 = await readToBase64(blob);\n    const arrayBuffer = fromBase64(base64);\n    return new Uint8Array(arrayBuffer);\n}\nasync function collectStream(stream) {\n    const chunks = [];\n    const reader = stream.getReader();\n    let isDone = false;\n    let length = 0;\n    while (!isDone) {\n        const { done, value } = await reader.read();\n        if (value) {\n            chunks.push(value);\n            length += value.length;\n        }\n        isDone = done;\n    }\n    const collected = new Uint8Array(length);\n    let offset = 0;\n    for (const chunk of chunks) {\n        collected.set(chunk, offset);\n        offset += chunk.length;\n    }\n    return collected;\n}\nfunction readToBase64(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            if (reader.readyState !== 2) {\n                return reject(new Error(\"Reader aborted too early\"));\n            }\n            const result = (reader.result ?? \"\");\n            const commaIndex = result.indexOf(\",\");\n            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n            resolve(result.substring(dataOffset));\n        };\n        reader.onabort = () => reject(new Error(\"Read aborted\"));\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(blob);\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { collectBody, RpcProtocol } from \"@smithy/core/protocols\";\nimport { deref, NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { XmlShapeDeserializer } from \"../xml/XmlShapeDeserializer\";\nimport { QueryShapeSerializer } from \"./QueryShapeSerializer\";\nexport class AwsQueryProtocol extends RpcProtocol {\n  constructor(options) {\n    super({\n      defaultNamespace: options.defaultNamespace\n    });\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"serializer\", void 0);\n    _defineProperty(this, \"deserializer\", void 0);\n    this.options = options;\n    const settings = {\n      timestampFormat: {\n        useTrait: true,\n        default: SCHEMA.TIMESTAMP_DATE_TIME\n      },\n      httpBindings: false,\n      xmlNamespace: options.xmlNamespace,\n      serviceNamespace: options.defaultNamespace,\n      serializeEmptyLists: true\n    };\n    this.serializer = new QueryShapeSerializer(settings);\n    this.deserializer = new XmlShapeDeserializer(settings);\n  }\n  getShapeId() {\n    return \"aws.protocols#awsQuery\";\n  }\n  setSerdeContext(serdeContext) {\n    this.serializer.setSerdeContext(serdeContext);\n    this.deserializer.setSerdeContext(serdeContext);\n  }\n  getPayloadCodec() {\n    throw new Error(\"AWSQuery protocol has no payload codec.\");\n  }\n  async serializeRequest(operationSchema, input, context) {\n    const request = await super.serializeRequest(operationSchema, input, context);\n    if (!request.path.endsWith(\"/\")) {\n      request.path += \"/\";\n    }\n    Object.assign(request.headers, {\n      \"content-type\": \"application/x-www-form-urlencoded\"\n    });\n    if (deref(operationSchema.input) === \"unit\" || !request.body) {\n      request.body = \"\";\n    }\n    request.body = \"Action=\".concat(operationSchema.name.split(\"#\")[1], \"&Version=\").concat(this.options.version) + request.body;\n    if (request.body.endsWith(\"&\")) {\n      request.body = request.body.slice(-1);\n    }\n    try {\n      request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n    } catch (e) {}\n    return request;\n  }\n  async deserializeResponse(operationSchema, context, response) {\n    const deserializer = this.deserializer;\n    const ns = NormalizedSchema.of(operationSchema.output);\n    const dataObject = {};\n    if (response.statusCode >= 300) {\n      const bytes = await collectBody(response.body, context);\n      if (bytes.byteLength > 0) {\n        Object.assign(dataObject, await deserializer.read(SCHEMA.DOCUMENT, bytes));\n      }\n      await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));\n    }\n    for (const header in response.headers) {\n      const value = response.headers[header];\n      delete response.headers[header];\n      response.headers[header.toLowerCase()] = value;\n    }\n    const awsQueryResultKey = ns.isStructSchema() && this.useNestedResult() ? operationSchema.name.split(\"#\")[1] + \"Result\" : undefined;\n    const bytes = await collectBody(response.body, context);\n    if (bytes.byteLength > 0) {\n      Object.assign(dataObject, await deserializer.read(ns, bytes, awsQueryResultKey));\n    }\n    const output = _objectSpread({\n      $metadata: this.deserializeMetadata(response)\n    }, dataObject);\n    return output;\n  }\n  useNestedResult() {\n    return true;\n  }\n  async handleError(operationSchema, context, response, dataObject, metadata) {\n    var _this$loadQueryErrorC;\n    const errorIdentifier = (_this$loadQueryErrorC = this.loadQueryErrorCode(response, dataObject)) !== null && _this$loadQueryErrorC !== void 0 ? _this$loadQueryErrorC : \"Unknown\";\n    let namespace = this.options.defaultNamespace;\n    let errorName = errorIdentifier;\n    if (errorIdentifier.includes(\"#\")) {\n      [namespace, errorName] = errorIdentifier.split(\"#\");\n    }\n    const errorDataSource = this.loadQueryError(dataObject);\n    const registry = TypeRegistry.for(namespace);\n    let errorSchema;\n    try {\n      errorSchema = registry.find(schema => {\n        var _NormalizedSchema$of$;\n        return ((_NormalizedSchema$of$ = NormalizedSchema.of(schema).getMergedTraits().awsQueryError) === null || _NormalizedSchema$of$ === void 0 ? void 0 : _NormalizedSchema$of$[0]) === errorName;\n      });\n      if (!errorSchema) {\n        errorSchema = registry.getSchema(errorIdentifier);\n      }\n    } catch (e) {\n      const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n      if (baseExceptionSchema) {\n        const ErrorCtor = baseExceptionSchema.ctor;\n        throw Object.assign(new ErrorCtor(errorName), errorDataSource);\n      }\n      throw new Error(errorName);\n    }\n    const ns = NormalizedSchema.of(errorSchema);\n    const message = this.loadQueryErrorMessage(dataObject);\n    const exception = new errorSchema.ctor(message);\n    const output = {};\n    for (const [name, member] of ns.structIterator()) {\n      var _member$getMergedTrai, _errorDataSource$targ;\n      const target = (_member$getMergedTrai = member.getMergedTraits().xmlName) !== null && _member$getMergedTrai !== void 0 ? _member$getMergedTrai : name;\n      const value = (_errorDataSource$targ = errorDataSource[target]) !== null && _errorDataSource$targ !== void 0 ? _errorDataSource$targ : dataObject[target];\n      output[name] = this.deserializer.readSchema(member, value);\n    }\n    Object.assign(exception, _objectSpread({\n      $metadata: metadata,\n      $response: response,\n      $fault: ns.getMergedTraits().error,\n      message\n    }, output));\n    throw exception;\n  }\n  loadQueryErrorCode(output, data) {\n    var _ref, _ref2, _data$Errors$0$Error, _data$Errors, _data$Errors2;\n    const code = (_ref = (_ref2 = (_data$Errors$0$Error = (_data$Errors = data.Errors) === null || _data$Errors === void 0 || (_data$Errors = _data$Errors[0]) === null || _data$Errors === void 0 ? void 0 : _data$Errors.Error) !== null && _data$Errors$0$Error !== void 0 ? _data$Errors$0$Error : (_data$Errors2 = data.Errors) === null || _data$Errors2 === void 0 ? void 0 : _data$Errors2.Error) !== null && _ref2 !== void 0 ? _ref2 : data.Error) === null || _ref === void 0 ? void 0 : _ref.Code;\n    if (code !== undefined) {\n      return code;\n    }\n    if (output.statusCode == 404) {\n      return \"NotFound\";\n    }\n  }\n  loadQueryError(data) {\n    var _ref3, _data$Errors$0$Error2, _data$Errors3, _data$Errors4;\n    return (_ref3 = (_data$Errors$0$Error2 = (_data$Errors3 = data.Errors) === null || _data$Errors3 === void 0 || (_data$Errors3 = _data$Errors3[0]) === null || _data$Errors3 === void 0 ? void 0 : _data$Errors3.Error) !== null && _data$Errors$0$Error2 !== void 0 ? _data$Errors$0$Error2 : (_data$Errors4 = data.Errors) === null || _data$Errors4 === void 0 ? void 0 : _data$Errors4.Error) !== null && _ref3 !== void 0 ? _ref3 : data.Error;\n  }\n  loadQueryErrorMessage(data) {\n    var _ref4, _ref5, _ref6, _errorData$message;\n    const errorData = this.loadQueryError(data);\n    return (_ref4 = (_ref5 = (_ref6 = (_errorData$message = errorData === null || errorData === void 0 ? void 0 : errorData.message) !== null && _errorData$message !== void 0 ? _errorData$message : errorData === null || errorData === void 0 ? void 0 : errorData.Message) !== null && _ref6 !== void 0 ? _ref6 : data.message) !== null && _ref5 !== void 0 ? _ref5 : data.Message) !== null && _ref4 !== void 0 ? _ref4 : \"Unknown\";\n  }\n}","map":{"version":3,"names":["collectBody","RpcProtocol","deref","NormalizedSchema","SCHEMA","TypeRegistry","calculateBodyLength","XmlShapeDeserializer","QueryShapeSerializer","AwsQueryProtocol","constructor","options","defaultNamespace","_defineProperty","settings","timestampFormat","useTrait","default","TIMESTAMP_DATE_TIME","httpBindings","xmlNamespace","serviceNamespace","serializeEmptyLists","serializer","deserializer","getShapeId","setSerdeContext","serdeContext","getPayloadCodec","Error","serializeRequest","operationSchema","input","context","request","path","endsWith","Object","assign","headers","body","concat","name","split","version","slice","String","e","deserializeResponse","response","ns","of","output","dataObject","statusCode","bytes","byteLength","read","DOCUMENT","handleError","deserializeMetadata","header","value","toLowerCase","awsQueryResultKey","isStructSchema","useNestedResult","undefined","_objectSpread","$metadata","metadata","_this$loadQueryErrorC","errorIdentifier","loadQueryErrorCode","namespace","errorName","includes","errorDataSource","loadQueryError","registry","for","errorSchema","find","schema","_NormalizedSchema$of$","getMergedTraits","awsQueryError","getSchema","baseExceptionSchema","getBaseException","ErrorCtor","ctor","message","loadQueryErrorMessage","exception","member","structIterator","_member$getMergedTrai","_errorDataSource$targ","target","xmlName","readSchema","$response","$fault","error","data","_ref","_ref2","_data$Errors$0$Error","_data$Errors","_data$Errors2","code","Errors","Code","_ref3","_data$Errors$0$Error2","_data$Errors3","_data$Errors4","_ref4","_ref5","_ref6","_errorData$message","errorData","Message"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/AwsQueryProtocol.js"],"sourcesContent":["import { collectBody, RpcProtocol } from \"@smithy/core/protocols\";\nimport { deref, NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { XmlShapeDeserializer } from \"../xml/XmlShapeDeserializer\";\nimport { QueryShapeSerializer } from \"./QueryShapeSerializer\";\nexport class AwsQueryProtocol extends RpcProtocol {\n    options;\n    serializer;\n    deserializer;\n    constructor(options) {\n        super({\n            defaultNamespace: options.defaultNamespace,\n        });\n        this.options = options;\n        const settings = {\n            timestampFormat: {\n                useTrait: true,\n                default: SCHEMA.TIMESTAMP_DATE_TIME,\n            },\n            httpBindings: false,\n            xmlNamespace: options.xmlNamespace,\n            serviceNamespace: options.defaultNamespace,\n            serializeEmptyLists: true,\n        };\n        this.serializer = new QueryShapeSerializer(settings);\n        this.deserializer = new XmlShapeDeserializer(settings);\n    }\n    getShapeId() {\n        return \"aws.protocols#awsQuery\";\n    }\n    setSerdeContext(serdeContext) {\n        this.serializer.setSerdeContext(serdeContext);\n        this.deserializer.setSerdeContext(serdeContext);\n    }\n    getPayloadCodec() {\n        throw new Error(\"AWSQuery protocol has no payload codec.\");\n    }\n    async serializeRequest(operationSchema, input, context) {\n        const request = await super.serializeRequest(operationSchema, input, context);\n        if (!request.path.endsWith(\"/\")) {\n            request.path += \"/\";\n        }\n        Object.assign(request.headers, {\n            \"content-type\": `application/x-www-form-urlencoded`,\n        });\n        if (deref(operationSchema.input) === \"unit\" || !request.body) {\n            request.body = \"\";\n        }\n        request.body = `Action=${operationSchema.name.split(\"#\")[1]}&Version=${this.options.version}` + request.body;\n        if (request.body.endsWith(\"&\")) {\n            request.body = request.body.slice(-1);\n        }\n        try {\n            request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n        }\n        catch (e) { }\n        return request;\n    }\n    async deserializeResponse(operationSchema, context, response) {\n        const deserializer = this.deserializer;\n        const ns = NormalizedSchema.of(operationSchema.output);\n        const dataObject = {};\n        if (response.statusCode >= 300) {\n            const bytes = await collectBody(response.body, context);\n            if (bytes.byteLength > 0) {\n                Object.assign(dataObject, await deserializer.read(SCHEMA.DOCUMENT, bytes));\n            }\n            await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));\n        }\n        for (const header in response.headers) {\n            const value = response.headers[header];\n            delete response.headers[header];\n            response.headers[header.toLowerCase()] = value;\n        }\n        const awsQueryResultKey = ns.isStructSchema() && this.useNestedResult() ? operationSchema.name.split(\"#\")[1] + \"Result\" : undefined;\n        const bytes = await collectBody(response.body, context);\n        if (bytes.byteLength > 0) {\n            Object.assign(dataObject, await deserializer.read(ns, bytes, awsQueryResultKey));\n        }\n        const output = {\n            $metadata: this.deserializeMetadata(response),\n            ...dataObject,\n        };\n        return output;\n    }\n    useNestedResult() {\n        return true;\n    }\n    async handleError(operationSchema, context, response, dataObject, metadata) {\n        const errorIdentifier = this.loadQueryErrorCode(response, dataObject) ?? \"Unknown\";\n        let namespace = this.options.defaultNamespace;\n        let errorName = errorIdentifier;\n        if (errorIdentifier.includes(\"#\")) {\n            [namespace, errorName] = errorIdentifier.split(\"#\");\n        }\n        const errorDataSource = this.loadQueryError(dataObject);\n        const registry = TypeRegistry.for(namespace);\n        let errorSchema;\n        try {\n            errorSchema = registry.find((schema) => NormalizedSchema.of(schema).getMergedTraits().awsQueryError?.[0] === errorName);\n            if (!errorSchema) {\n                errorSchema = registry.getSchema(errorIdentifier);\n            }\n        }\n        catch (e) {\n            const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n            if (baseExceptionSchema) {\n                const ErrorCtor = baseExceptionSchema.ctor;\n                throw Object.assign(new ErrorCtor(errorName), errorDataSource);\n            }\n            throw new Error(errorName);\n        }\n        const ns = NormalizedSchema.of(errorSchema);\n        const message = this.loadQueryErrorMessage(dataObject);\n        const exception = new errorSchema.ctor(message);\n        const output = {};\n        for (const [name, member] of ns.structIterator()) {\n            const target = member.getMergedTraits().xmlName ?? name;\n            const value = errorDataSource[target] ?? dataObject[target];\n            output[name] = this.deserializer.readSchema(member, value);\n        }\n        Object.assign(exception, {\n            $metadata: metadata,\n            $response: response,\n            $fault: ns.getMergedTraits().error,\n            message,\n            ...output,\n        });\n        throw exception;\n    }\n    loadQueryErrorCode(output, data) {\n        const code = (data.Errors?.[0]?.Error ?? data.Errors?.Error ?? data.Error)?.Code;\n        if (code !== undefined) {\n            return code;\n        }\n        if (output.statusCode == 404) {\n            return \"NotFound\";\n        }\n    }\n    loadQueryError(data) {\n        return data.Errors?.[0]?.Error ?? data.Errors?.Error ?? data.Error;\n    }\n    loadQueryErrorMessage(data) {\n        const errorData = this.loadQueryError(data);\n        return errorData?.message ?? errorData?.Message ?? data.message ?? data.Message ?? \"Unknown\";\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
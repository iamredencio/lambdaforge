{"ast":null,"code":"export const getEndpointFromRegion = async input => {\n  var _await$input$regionIn;\n  const {\n    tls = true\n  } = input;\n  const region = await input.region();\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n  const useDualstackEndpoint = await input.useDualstackEndpoint();\n  const useFipsEndpoint = await input.useFipsEndpoint();\n  const {\n    hostname\n  } = (_await$input$regionIn = await input.regionInfoProvider(region, {\n    useDualstackEndpoint,\n    useFipsEndpoint\n  })) !== null && _await$input$regionIn !== void 0 ? _await$input$regionIn : {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n  return input.urlParser(\"\".concat(tls ? \"https:\" : \"http:\", \"//\").concat(hostname));\n};","map":{"version":3,"names":["getEndpointFromRegion","input","_await$input$regionIn","tls","region","dnsHostRegex","RegExp","test","Error","useDualstackEndpoint","useFipsEndpoint","hostname","regionInfoProvider","urlParser","concat"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js"],"sourcesContent":["export const getEndpointFromRegion = async (input) => {\n    const { tls = true } = input;\n    const region = await input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n    }\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\n    const useFipsEndpoint = await input.useFipsEndpoint();\n    const { hostname } = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};\n    if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n    }\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAG,MAAOC,KAAK,IAAK;EAAA,IAAAC,qBAAA;EAClD,MAAM;IAAEC,GAAG,GAAG;EAAK,CAAC,GAAGF,KAAK;EAC5B,MAAMG,MAAM,GAAG,MAAMH,KAAK,CAACG,MAAM,CAAC,CAAC;EACnC,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAAC,0DAA0D,CAAC;EAC3F,IAAI,CAACD,YAAY,CAACE,IAAI,CAACH,MAAM,CAAC,EAAE;IAC5B,MAAM,IAAII,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACA,MAAMC,oBAAoB,GAAG,MAAMR,KAAK,CAACQ,oBAAoB,CAAC,CAAC;EAC/D,MAAMC,eAAe,GAAG,MAAMT,KAAK,CAACS,eAAe,CAAC,CAAC;EACrD,MAAM;IAAEC;EAAS,CAAC,IAAAT,qBAAA,GAAI,MAAMD,KAAK,CAACW,kBAAkB,CAACR,MAAM,EAAE;IAAEK,oBAAoB;IAAEC;EAAgB,CAAC,CAAC,cAAAR,qBAAA,cAAAA,qBAAA,GAAK,CAAC,CAAC;EAC9G,IAAI,CAACS,QAAQ,EAAE;IACX,MAAM,IAAIH,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOP,KAAK,CAACY,SAAS,IAAAC,MAAA,CAAIX,GAAG,GAAG,QAAQ,GAAG,OAAO,QAAAW,MAAA,CAAKH,QAAQ,CAAE,CAAC;AACtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
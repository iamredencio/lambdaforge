{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { collectBody } from \"./collect-stream-body\";\nimport { HttpProtocol } from \"./HttpProtocol\";\nexport class RpcProtocol extends HttpProtocol {\n  async serializeRequest(operationSchema, input, context) {\n    const serializer = this.serializer;\n    const query = {};\n    const headers = {};\n    const endpoint = await context.endpoint();\n    const ns = NormalizedSchema.of(operationSchema === null || operationSchema === void 0 ? void 0 : operationSchema.input);\n    const schema = ns.getSchema();\n    let payload;\n    const request = new HttpRequest({\n      protocol: \"\",\n      hostname: \"\",\n      port: undefined,\n      path: \"/\",\n      fragment: undefined,\n      query: query,\n      headers: headers,\n      body: undefined\n    });\n    if (endpoint) {\n      this.updateServiceEndpoint(request, endpoint);\n      this.setHostPrefix(request, operationSchema, input);\n    }\n    const _input = _objectSpread({}, input);\n    if (input) {\n      serializer.write(schema, _input);\n      payload = serializer.flush();\n    }\n    request.headers = headers;\n    request.query = query;\n    request.body = payload;\n    request.method = \"POST\";\n    return request;\n  }\n  async deserializeResponse(operationSchema, context, response) {\n    const deserializer = this.deserializer;\n    const ns = NormalizedSchema.of(operationSchema.output);\n    const dataObject = {};\n    if (response.statusCode >= 300) {\n      const bytes = await collectBody(response.body, context);\n      if (bytes.byteLength > 0) {\n        Object.assign(dataObject, await deserializer.read(SCHEMA.DOCUMENT, bytes));\n      }\n      await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));\n      throw new Error(\"@smithy/core/protocols - RPC Protocol error handler failed to throw.\");\n    }\n    for (const header in response.headers) {\n      const value = response.headers[header];\n      delete response.headers[header];\n      response.headers[header.toLowerCase()] = value;\n    }\n    const bytes = await collectBody(response.body, context);\n    if (bytes.byteLength > 0) {\n      Object.assign(dataObject, await deserializer.read(ns, bytes));\n    }\n    const output = _objectSpread({\n      $metadata: this.deserializeMetadata(response)\n    }, dataObject);\n    return output;\n  }\n}","map":{"version":3,"names":["NormalizedSchema","SCHEMA","HttpRequest","collectBody","HttpProtocol","RpcProtocol","serializeRequest","operationSchema","input","context","serializer","query","headers","endpoint","ns","of","schema","getSchema","payload","request","protocol","hostname","port","undefined","path","fragment","body","updateServiceEndpoint","setHostPrefix","_input","_objectSpread","write","flush","method","deserializeResponse","response","deserializer","output","dataObject","statusCode","bytes","byteLength","Object","assign","read","DOCUMENT","handleError","deserializeMetadata","Error","header","value","toLowerCase","$metadata"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/core/dist-es/submodules/protocols/RpcProtocol.js"],"sourcesContent":["import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { collectBody } from \"./collect-stream-body\";\nimport { HttpProtocol } from \"./HttpProtocol\";\nexport class RpcProtocol extends HttpProtocol {\n    async serializeRequest(operationSchema, input, context) {\n        const serializer = this.serializer;\n        const query = {};\n        const headers = {};\n        const endpoint = await context.endpoint();\n        const ns = NormalizedSchema.of(operationSchema?.input);\n        const schema = ns.getSchema();\n        let payload;\n        const request = new HttpRequest({\n            protocol: \"\",\n            hostname: \"\",\n            port: undefined,\n            path: \"/\",\n            fragment: undefined,\n            query: query,\n            headers: headers,\n            body: undefined,\n        });\n        if (endpoint) {\n            this.updateServiceEndpoint(request, endpoint);\n            this.setHostPrefix(request, operationSchema, input);\n        }\n        const _input = {\n            ...input,\n        };\n        if (input) {\n            serializer.write(schema, _input);\n            payload = serializer.flush();\n        }\n        request.headers = headers;\n        request.query = query;\n        request.body = payload;\n        request.method = \"POST\";\n        return request;\n    }\n    async deserializeResponse(operationSchema, context, response) {\n        const deserializer = this.deserializer;\n        const ns = NormalizedSchema.of(operationSchema.output);\n        const dataObject = {};\n        if (response.statusCode >= 300) {\n            const bytes = await collectBody(response.body, context);\n            if (bytes.byteLength > 0) {\n                Object.assign(dataObject, await deserializer.read(SCHEMA.DOCUMENT, bytes));\n            }\n            await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));\n            throw new Error(\"@smithy/core/protocols - RPC Protocol error handler failed to throw.\");\n        }\n        for (const header in response.headers) {\n            const value = response.headers[header];\n            delete response.headers[header];\n            response.headers[header.toLowerCase()] = value;\n        }\n        const bytes = await collectBody(response.body, context);\n        if (bytes.byteLength > 0) {\n            Object.assign(dataObject, await deserializer.read(ns, bytes));\n        }\n        const output = {\n            $metadata: this.deserializeMetadata(response),\n            ...dataObject,\n        };\n        return output;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
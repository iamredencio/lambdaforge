{"ast":null,"code":"var _jsxFileName = \"/Users/codinggents/Documents/lambdaforge/src/components/SecurityProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { sanitizeInput, validateAWSConfig, securityUtils } from '../config/aws-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SecurityContext = /*#__PURE__*/createContext();\nexport const useSecurityContext = () => {\n  _s();\n  const context = useContext(SecurityContext);\n  if (!context) {\n    throw new Error('useSecurityContext must be used within a SecurityProvider');\n  }\n  return context;\n};\n_s(useSecurityContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SecurityProvider = ({\n  children\n}) => {\n  _s2();\n  const [securityStatus, setSecurityStatus] = useState({\n    isSecure: false,\n    warnings: [],\n    errors: [],\n    lastCheck: null\n  });\n\n  // Security check on mount and periodically\n  useEffect(() => {\n    const performSecurityCheck = () => {\n      const validation = validateAWSConfig();\n      setSecurityStatus({\n        isSecure: validation.isValid && validation.warnings.length === 0,\n        warnings: validation.warnings || [],\n        errors: validation.errors || [],\n        lastCheck: new Date().toISOString()\n      });\n\n      // Log security status (with masked credentials)\n      if (validation.warnings.length > 0) {\n        console.warn('🔒 Security warnings detected:', validation.warnings);\n      }\n      if (validation.errors.length > 0) {\n        console.error('🚨 Security errors detected:', validation.errors);\n      }\n    };\n\n    // Initial check\n    performSecurityCheck();\n\n    // Periodic security checks every 5 minutes\n    const interval = setInterval(performSecurityCheck, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Content Security Policy enforcement\n  useEffect(() => {\n    // Add CSP meta tag if not present\n    if (!document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]')) {\n      const csp = document.createElement('meta');\n      csp.httpEquiv = 'Content-Security-Policy';\n      csp.content = `\n        default-src 'self';\n        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com;\n        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n        font-src 'self' https://fonts.gstatic.com;\n        img-src 'self' data: https:;\n        connect-src 'self' https://*.amazonaws.com https://*.amazon.com;\n        frame-ancestors 'none';\n        base-uri 'self';\n        form-action 'self';\n      `.replace(/\\s+/g, ' ').trim();\n      document.head.appendChild(csp);\n    }\n  }, []);\n\n  // Secure input sanitization\n  const sanitizeFormData = data => {\n    const sanitized = {};\n    Object.keys(data).forEach(key => {\n      if (typeof data[key] === 'string') {\n        sanitized[key] = sanitizeInput(data[key]);\n      } else if (Array.isArray(data[key])) {\n        sanitized[key] = data[key].map(item => typeof item === 'string' ? sanitizeInput(item) : item);\n      } else {\n        sanitized[key] = data[key];\n      }\n    });\n    return sanitized;\n  };\n\n  // Validate form inputs\n  const validateFormInput = (field, value) => {\n    // Basic validation\n    if (!value || value.trim() === '') {\n      return {\n        isValid: false,\n        error: 'Field is required'\n      };\n    }\n\n    // Specific field validation\n    switch (field) {\n      case 'projectName':\n        if (!securityUtils.validateInputFormat(value, 'projectName')) {\n          return {\n            isValid: false,\n            error: 'Project name must contain only letters, numbers, hyphens, and underscores (max 50 chars)'\n          };\n        }\n        break;\n      case 'awsAccessKeyId':\n        if (!securityUtils.validateInputFormat(value, 'accessKeyId')) {\n          return {\n            isValid: false,\n            error: 'Invalid AWS Access Key ID format'\n          };\n        }\n        break;\n      case 'awsRegion':\n        if (!securityUtils.validateInputFormat(value, 'awsRegion')) {\n          return {\n            isValid: false,\n            error: 'Invalid AWS region'\n          };\n        }\n        break;\n    }\n    return {\n      isValid: true,\n      error: null\n    };\n  };\n\n  // Security event logging\n  const logSecurityEvent = (event, details = {}) => {\n    const securityLog = {\n      timestamp: new Date().toISOString(),\n      event,\n      details: {\n        ...details,\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        referrer: document.referrer\n      }\n    };\n\n    // In production, send to security monitoring service\n    console.log('🔐 Security Event:', securityLog);\n  };\n\n  // Check for suspicious activity\n  const detectSuspiciousActivity = formData => {\n    const suspiciousPatterns = [/<script/i, /javascript:/i, /on\\w+=/i, /eval\\(/i, /document\\./i, /window\\./i];\n    const suspiciousFields = [];\n    Object.entries(formData).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        suspiciousPatterns.forEach(pattern => {\n          if (pattern.test(value)) {\n            suspiciousFields.push(key);\n            logSecurityEvent('SUSPICIOUS_INPUT_DETECTED', {\n              field: key,\n              pattern: pattern.toString(),\n              value: value.substring(0, 100) // Log first 100 chars only\n            });\n          }\n        });\n      }\n    });\n    return suspiciousFields;\n  };\n  const securityContextValue = {\n    securityStatus,\n    sanitizeFormData,\n    validateFormInput,\n    logSecurityEvent,\n    detectSuspiciousActivity,\n    utils: securityUtils\n  };\n  return /*#__PURE__*/_jsxDEV(SecurityContext.Provider, {\n    value: securityContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s2(SecurityProvider, \"/bO5KAKMxAM9oqVmokae/X4ggzk=\");\n_c = SecurityProvider;\nexport default SecurityProvider;\nvar _c;\n$RefreshReg$(_c, \"SecurityProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","sanitizeInput","validateAWSConfig","securityUtils","jsxDEV","_jsxDEV","SecurityContext","useSecurityContext","_s","context","Error","SecurityProvider","children","_s2","securityStatus","setSecurityStatus","isSecure","warnings","errors","lastCheck","performSecurityCheck","validation","isValid","length","Date","toISOString","console","warn","error","interval","setInterval","clearInterval","document","querySelector","csp","createElement","httpEquiv","content","replace","trim","head","appendChild","sanitizeFormData","data","sanitized","Object","keys","forEach","key","Array","isArray","map","item","validateFormInput","field","value","validateInputFormat","logSecurityEvent","event","details","securityLog","timestamp","userAgent","navigator","url","window","location","href","referrer","log","detectSuspiciousActivity","formData","suspiciousPatterns","suspiciousFields","entries","pattern","test","push","toString","substring","securityContextValue","utils","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/codinggents/Documents/lambdaforge/src/components/SecurityProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { sanitizeInput, validateAWSConfig, securityUtils } from '../config/aws-config';\n\nconst SecurityContext = createContext();\n\nexport const useSecurityContext = () => {\n  const context = useContext(SecurityContext);\n  if (!context) {\n    throw new Error('useSecurityContext must be used within a SecurityProvider');\n  }\n  return context;\n};\n\nexport const SecurityProvider = ({ children }) => {\n  const [securityStatus, setSecurityStatus] = useState({\n    isSecure: false,\n    warnings: [],\n    errors: [],\n    lastCheck: null\n  });\n\n  // Security check on mount and periodically\n  useEffect(() => {\n    const performSecurityCheck = () => {\n      const validation = validateAWSConfig();\n      \n      setSecurityStatus({\n        isSecure: validation.isValid && validation.warnings.length === 0,\n        warnings: validation.warnings || [],\n        errors: validation.errors || [],\n        lastCheck: new Date().toISOString()\n      });\n\n      // Log security status (with masked credentials)\n      if (validation.warnings.length > 0) {\n        console.warn('🔒 Security warnings detected:', validation.warnings);\n      }\n      \n      if (validation.errors.length > 0) {\n        console.error('🚨 Security errors detected:', validation.errors);\n      }\n    };\n\n    // Initial check\n    performSecurityCheck();\n\n    // Periodic security checks every 5 minutes\n    const interval = setInterval(performSecurityCheck, 5 * 60 * 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Content Security Policy enforcement\n  useEffect(() => {\n    // Add CSP meta tag if not present\n    if (!document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]')) {\n      const csp = document.createElement('meta');\n      csp.httpEquiv = 'Content-Security-Policy';\n      csp.content = `\n        default-src 'self';\n        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com;\n        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n        font-src 'self' https://fonts.gstatic.com;\n        img-src 'self' data: https:;\n        connect-src 'self' https://*.amazonaws.com https://*.amazon.com;\n        frame-ancestors 'none';\n        base-uri 'self';\n        form-action 'self';\n      `.replace(/\\s+/g, ' ').trim();\n      document.head.appendChild(csp);\n    }\n  }, []);\n\n  // Secure input sanitization\n  const sanitizeFormData = (data) => {\n    const sanitized = {};\n    \n    Object.keys(data).forEach(key => {\n      if (typeof data[key] === 'string') {\n        sanitized[key] = sanitizeInput(data[key]);\n      } else if (Array.isArray(data[key])) {\n        sanitized[key] = data[key].map(item => \n          typeof item === 'string' ? sanitizeInput(item) : item\n        );\n      } else {\n        sanitized[key] = data[key];\n      }\n    });\n    \n    return sanitized;\n  };\n\n  // Validate form inputs\n  const validateFormInput = (field, value) => {\n    // Basic validation\n    if (!value || value.trim() === '') {\n      return { isValid: false, error: 'Field is required' };\n    }\n\n    // Specific field validation\n    switch (field) {\n      case 'projectName':\n        if (!securityUtils.validateInputFormat(value, 'projectName')) {\n          return { \n            isValid: false, \n            error: 'Project name must contain only letters, numbers, hyphens, and underscores (max 50 chars)' \n          };\n        }\n        break;\n      \n      case 'awsAccessKeyId':\n        if (!securityUtils.validateInputFormat(value, 'accessKeyId')) {\n          return { \n            isValid: false, \n            error: 'Invalid AWS Access Key ID format' \n          };\n        }\n        break;\n      \n      case 'awsRegion':\n        if (!securityUtils.validateInputFormat(value, 'awsRegion')) {\n          return { \n            isValid: false, \n            error: 'Invalid AWS region' \n          };\n        }\n        break;\n    }\n\n    return { isValid: true, error: null };\n  };\n\n  // Security event logging\n  const logSecurityEvent = (event, details = {}) => {\n    const securityLog = {\n      timestamp: new Date().toISOString(),\n      event,\n      details: {\n        ...details,\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        referrer: document.referrer\n      }\n    };\n\n    // In production, send to security monitoring service\n    console.log('🔐 Security Event:', securityLog);\n  };\n\n  // Check for suspicious activity\n  const detectSuspiciousActivity = (formData) => {\n    const suspiciousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /on\\w+=/i,\n      /eval\\(/i,\n      /document\\./i,\n      /window\\./i\n    ];\n\n    const suspiciousFields = [];\n    \n    Object.entries(formData).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        suspiciousPatterns.forEach(pattern => {\n          if (pattern.test(value)) {\n            suspiciousFields.push(key);\n            logSecurityEvent('SUSPICIOUS_INPUT_DETECTED', {\n              field: key,\n              pattern: pattern.toString(),\n              value: value.substring(0, 100) // Log first 100 chars only\n            });\n          }\n        });\n      }\n    });\n\n    return suspiciousFields;\n  };\n\n  const securityContextValue = {\n    securityStatus,\n    sanitizeFormData,\n    validateFormInput,\n    logSecurityEvent,\n    detectSuspiciousActivity,\n    utils: securityUtils\n  };\n\n  return (\n    <SecurityContext.Provider value={securityContextValue}>\n      {children}\n    </SecurityContext.Provider>\n  );\n};\n\nexport default SecurityProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
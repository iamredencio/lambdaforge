{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { HttpBindingProtocol, HttpInterceptingShapeDeserializer, HttpInterceptingShapeSerializer } from \"@smithy/core/protocols\";\nimport { NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { JsonCodec } from \"./JsonCodec\";\nimport { loadRestJsonErrorCode } from \"./parseJsonBody\";\nexport class AwsRestJsonProtocol extends HttpBindingProtocol {\n  constructor(_ref) {\n    let {\n      defaultNamespace\n    } = _ref;\n    super({\n      defaultNamespace\n    });\n    _defineProperty(this, \"serializer\", void 0);\n    _defineProperty(this, \"deserializer\", void 0);\n    _defineProperty(this, \"codec\", void 0);\n    const settings = {\n      timestampFormat: {\n        useTrait: true,\n        default: SCHEMA.TIMESTAMP_EPOCH_SECONDS\n      },\n      httpBindings: true,\n      jsonName: true\n    };\n    this.codec = new JsonCodec(settings);\n    this.serializer = new HttpInterceptingShapeSerializer(this.codec.createSerializer(), settings);\n    this.deserializer = new HttpInterceptingShapeDeserializer(this.codec.createDeserializer(), settings);\n  }\n  getShapeId() {\n    return \"aws.protocols#restJson1\";\n  }\n  getPayloadCodec() {\n    return this.codec;\n  }\n  setSerdeContext(serdeContext) {\n    this.codec.setSerdeContext(serdeContext);\n    super.setSerdeContext(serdeContext);\n  }\n  async serializeRequest(operationSchema, input, context) {\n    const request = await super.serializeRequest(operationSchema, input, context);\n    const inputSchema = NormalizedSchema.of(operationSchema.input);\n    const members = inputSchema.getMemberSchemas();\n    if (!request.headers[\"content-type\"]) {\n      const httpPayloadMember = Object.values(members).find(m => {\n        return !!m.getMergedTraits().httpPayload;\n      });\n      if (httpPayloadMember) {\n        const mediaType = httpPayloadMember.getMergedTraits().mediaType;\n        if (mediaType) {\n          request.headers[\"content-type\"] = mediaType;\n        } else if (httpPayloadMember.isStringSchema()) {\n          request.headers[\"content-type\"] = \"text/plain\";\n        } else if (httpPayloadMember.isBlobSchema()) {\n          request.headers[\"content-type\"] = \"application/octet-stream\";\n        } else {\n          request.headers[\"content-type\"] = \"application/json\";\n        }\n      } else if (!inputSchema.isUnitSchema()) {\n        const hasBody = Object.values(members).find(m => {\n          const {\n            httpQuery,\n            httpQueryParams,\n            httpHeader,\n            httpLabel,\n            httpPrefixHeaders\n          } = m.getMergedTraits();\n          return !httpQuery && !httpQueryParams && !httpHeader && !httpLabel && httpPrefixHeaders === void 0;\n        });\n        if (hasBody) {\n          request.headers[\"content-type\"] = \"application/json\";\n        }\n      }\n    }\n    if (request.headers[\"content-type\"] && !request.body) {\n      request.body = \"{}\";\n    }\n    if (request.body) {\n      try {\n        request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n      } catch (e) {}\n    }\n    return request;\n  }\n  async handleError(operationSchema, context, response, dataObject, metadata) {\n    var _loadRestJsonErrorCod, _ref2, _dataObject$message;\n    const errorIdentifier = (_loadRestJsonErrorCod = loadRestJsonErrorCode(response, dataObject)) !== null && _loadRestJsonErrorCod !== void 0 ? _loadRestJsonErrorCod : \"Unknown\";\n    let namespace = this.options.defaultNamespace;\n    let errorName = errorIdentifier;\n    if (errorIdentifier.includes(\"#\")) {\n      [namespace, errorName] = errorIdentifier.split(\"#\");\n    }\n    const registry = TypeRegistry.for(namespace);\n    let errorSchema;\n    try {\n      errorSchema = registry.getSchema(errorIdentifier);\n    } catch (e) {\n      const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n      if (baseExceptionSchema) {\n        const ErrorCtor = baseExceptionSchema.ctor;\n        throw Object.assign(new ErrorCtor(errorName), dataObject);\n      }\n      throw new Error(errorName);\n    }\n    const ns = NormalizedSchema.of(errorSchema);\n    const message = (_ref2 = (_dataObject$message = dataObject.message) !== null && _dataObject$message !== void 0 ? _dataObject$message : dataObject.Message) !== null && _ref2 !== void 0 ? _ref2 : \"Unknown\";\n    const exception = new errorSchema.ctor(message);\n    await this.deserializeHttpMessage(errorSchema, context, response, dataObject);\n    const output = {};\n    for (const [name, member] of ns.structIterator()) {\n      var _member$getMergedTrai;\n      const target = (_member$getMergedTrai = member.getMergedTraits().jsonName) !== null && _member$getMergedTrai !== void 0 ? _member$getMergedTrai : name;\n      output[name] = this.codec.createDeserializer().readObject(member, dataObject[target]);\n    }\n    Object.assign(exception, _objectSpread({\n      $metadata: metadata,\n      $response: response,\n      $fault: ns.getMergedTraits().error,\n      message\n    }, output));\n    throw exception;\n  }\n}","map":{"version":3,"names":["HttpBindingProtocol","HttpInterceptingShapeDeserializer","HttpInterceptingShapeSerializer","NormalizedSchema","SCHEMA","TypeRegistry","calculateBodyLength","JsonCodec","loadRestJsonErrorCode","AwsRestJsonProtocol","constructor","_ref","defaultNamespace","_defineProperty","settings","timestampFormat","useTrait","default","TIMESTAMP_EPOCH_SECONDS","httpBindings","jsonName","codec","serializer","createSerializer","deserializer","createDeserializer","getShapeId","getPayloadCodec","setSerdeContext","serdeContext","serializeRequest","operationSchema","input","context","request","inputSchema","of","members","getMemberSchemas","headers","httpPayloadMember","Object","values","find","m","getMergedTraits","httpPayload","mediaType","isStringSchema","isBlobSchema","isUnitSchema","hasBody","httpQuery","httpQueryParams","httpHeader","httpLabel","httpPrefixHeaders","body","String","e","handleError","response","dataObject","metadata","_loadRestJsonErrorCod","_ref2","_dataObject$message","errorIdentifier","namespace","options","errorName","includes","split","registry","for","errorSchema","getSchema","baseExceptionSchema","getBaseException","ErrorCtor","ctor","assign","Error","ns","message","Message","exception","deserializeHttpMessage","output","name","member","structIterator","_member$getMergedTrai","target","readObject","_objectSpread","$metadata","$response","$fault","error"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsRestJsonProtocol.js"],"sourcesContent":["import { HttpBindingProtocol, HttpInterceptingShapeDeserializer, HttpInterceptingShapeSerializer, } from \"@smithy/core/protocols\";\nimport { NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { JsonCodec } from \"./JsonCodec\";\nimport { loadRestJsonErrorCode } from \"./parseJsonBody\";\nexport class AwsRestJsonProtocol extends HttpBindingProtocol {\n    serializer;\n    deserializer;\n    codec;\n    constructor({ defaultNamespace }) {\n        super({\n            defaultNamespace,\n        });\n        const settings = {\n            timestampFormat: {\n                useTrait: true,\n                default: SCHEMA.TIMESTAMP_EPOCH_SECONDS,\n            },\n            httpBindings: true,\n            jsonName: true,\n        };\n        this.codec = new JsonCodec(settings);\n        this.serializer = new HttpInterceptingShapeSerializer(this.codec.createSerializer(), settings);\n        this.deserializer = new HttpInterceptingShapeDeserializer(this.codec.createDeserializer(), settings);\n    }\n    getShapeId() {\n        return \"aws.protocols#restJson1\";\n    }\n    getPayloadCodec() {\n        return this.codec;\n    }\n    setSerdeContext(serdeContext) {\n        this.codec.setSerdeContext(serdeContext);\n        super.setSerdeContext(serdeContext);\n    }\n    async serializeRequest(operationSchema, input, context) {\n        const request = await super.serializeRequest(operationSchema, input, context);\n        const inputSchema = NormalizedSchema.of(operationSchema.input);\n        const members = inputSchema.getMemberSchemas();\n        if (!request.headers[\"content-type\"]) {\n            const httpPayloadMember = Object.values(members).find((m) => {\n                return !!m.getMergedTraits().httpPayload;\n            });\n            if (httpPayloadMember) {\n                const mediaType = httpPayloadMember.getMergedTraits().mediaType;\n                if (mediaType) {\n                    request.headers[\"content-type\"] = mediaType;\n                }\n                else if (httpPayloadMember.isStringSchema()) {\n                    request.headers[\"content-type\"] = \"text/plain\";\n                }\n                else if (httpPayloadMember.isBlobSchema()) {\n                    request.headers[\"content-type\"] = \"application/octet-stream\";\n                }\n                else {\n                    request.headers[\"content-type\"] = \"application/json\";\n                }\n            }\n            else if (!inputSchema.isUnitSchema()) {\n                const hasBody = Object.values(members).find((m) => {\n                    const { httpQuery, httpQueryParams, httpHeader, httpLabel, httpPrefixHeaders } = m.getMergedTraits();\n                    return !httpQuery && !httpQueryParams && !httpHeader && !httpLabel && httpPrefixHeaders === void 0;\n                });\n                if (hasBody) {\n                    request.headers[\"content-type\"] = \"application/json\";\n                }\n            }\n        }\n        if (request.headers[\"content-type\"] && !request.body) {\n            request.body = \"{}\";\n        }\n        if (request.body) {\n            try {\n                request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n            }\n            catch (e) { }\n        }\n        return request;\n    }\n    async handleError(operationSchema, context, response, dataObject, metadata) {\n        const errorIdentifier = loadRestJsonErrorCode(response, dataObject) ?? \"Unknown\";\n        let namespace = this.options.defaultNamespace;\n        let errorName = errorIdentifier;\n        if (errorIdentifier.includes(\"#\")) {\n            [namespace, errorName] = errorIdentifier.split(\"#\");\n        }\n        const registry = TypeRegistry.for(namespace);\n        let errorSchema;\n        try {\n            errorSchema = registry.getSchema(errorIdentifier);\n        }\n        catch (e) {\n            const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n            if (baseExceptionSchema) {\n                const ErrorCtor = baseExceptionSchema.ctor;\n                throw Object.assign(new ErrorCtor(errorName), dataObject);\n            }\n            throw new Error(errorName);\n        }\n        const ns = NormalizedSchema.of(errorSchema);\n        const message = dataObject.message ?? dataObject.Message ?? \"Unknown\";\n        const exception = new errorSchema.ctor(message);\n        await this.deserializeHttpMessage(errorSchema, context, response, dataObject);\n        const output = {};\n        for (const [name, member] of ns.structIterator()) {\n            const target = member.getMergedTraits().jsonName ?? name;\n            output[name] = this.codec.createDeserializer().readObject(member, dataObject[target]);\n        }\n        Object.assign(exception, {\n            $metadata: metadata,\n            $response: response,\n            $fault: ns.getMergedTraits().error,\n            message,\n            ...output,\n        });\n        throw exception;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
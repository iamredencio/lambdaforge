{"ast":null,"code":"import { normalizeProvider } from \"@smithy/util-middleware\";\nimport { getEndpointFromConfig } from \"./adaptors/getEndpointFromConfig\";\nimport { toEndpointV1 } from \"./adaptors/toEndpointV1\";\nexport const resolveEndpointConfig = input => {\n  var _input$tls;\n  const tls = (_input$tls = input.tls) !== null && _input$tls !== void 0 ? _input$tls : true;\n  const {\n    endpoint,\n    useDualstackEndpoint,\n    useFipsEndpoint\n  } = input;\n  const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : undefined;\n  const isCustomEndpoint = !!endpoint;\n  const resolvedConfig = Object.assign(input, {\n    endpoint: customEndpointProvider,\n    tls,\n    isCustomEndpoint,\n    useDualstackEndpoint: normalizeProvider(useDualstackEndpoint !== null && useDualstackEndpoint !== void 0 ? useDualstackEndpoint : false),\n    useFipsEndpoint: normalizeProvider(useFipsEndpoint !== null && useFipsEndpoint !== void 0 ? useFipsEndpoint : false)\n  });\n  let configuredEndpointPromise = undefined;\n  resolvedConfig.serviceConfiguredEndpoint = async () => {\n    if (input.serviceId && !configuredEndpointPromise) {\n      configuredEndpointPromise = getEndpointFromConfig(input.serviceId);\n    }\n    return configuredEndpointPromise;\n  };\n  return resolvedConfig;\n};","map":{"version":3,"names":["normalizeProvider","getEndpointFromConfig","toEndpointV1","resolveEndpointConfig","input","_input$tls","tls","endpoint","useDualstackEndpoint","useFipsEndpoint","customEndpointProvider","undefined","isCustomEndpoint","resolvedConfig","Object","assign","configuredEndpointPromise","serviceConfiguredEndpoint","serviceId"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js"],"sourcesContent":["import { normalizeProvider } from \"@smithy/util-middleware\";\nimport { getEndpointFromConfig } from \"./adaptors/getEndpointFromConfig\";\nimport { toEndpointV1 } from \"./adaptors/toEndpointV1\";\nexport const resolveEndpointConfig = (input) => {\n    const tls = input.tls ?? true;\n    const { endpoint, useDualstackEndpoint, useFipsEndpoint } = input;\n    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : undefined;\n    const isCustomEndpoint = !!endpoint;\n    const resolvedConfig = Object.assign(input, {\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: normalizeProvider(useDualstackEndpoint ?? false),\n        useFipsEndpoint: normalizeProvider(useFipsEndpoint ?? false),\n    });\n    let configuredEndpointPromise = undefined;\n    resolvedConfig.serviceConfiguredEndpoint = async () => {\n        if (input.serviceId && !configuredEndpointPromise) {\n            configuredEndpointPromise = getEndpointFromConfig(input.serviceId);\n        }\n        return configuredEndpointPromise;\n    };\n    return resolvedConfig;\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,YAAY,QAAQ,yBAAyB;AACtD,OAAO,MAAMC,qBAAqB,GAAIC,KAAK,IAAK;EAAA,IAAAC,UAAA;EAC5C,MAAMC,GAAG,IAAAD,UAAA,GAAGD,KAAK,CAACE,GAAG,cAAAD,UAAA,cAAAA,UAAA,GAAI,IAAI;EAC7B,MAAM;IAAEE,QAAQ;IAAEC,oBAAoB;IAAEC;EAAgB,CAAC,GAAGL,KAAK;EACjE,MAAMM,sBAAsB,GAAGH,QAAQ,IAAI,IAAI,GAAG,YAAYL,YAAY,CAAC,MAAMF,iBAAiB,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAGI,SAAS;EAC3H,MAAMC,gBAAgB,GAAG,CAAC,CAACL,QAAQ;EACnC,MAAMM,cAAc,GAAGC,MAAM,CAACC,MAAM,CAACX,KAAK,EAAE;IACxCG,QAAQ,EAAEG,sBAAsB;IAChCJ,GAAG;IACHM,gBAAgB;IAChBJ,oBAAoB,EAAER,iBAAiB,CAACQ,oBAAoB,aAApBA,oBAAoB,cAApBA,oBAAoB,GAAI,KAAK,CAAC;IACtEC,eAAe,EAAET,iBAAiB,CAACS,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAI,KAAK;EAC/D,CAAC,CAAC;EACF,IAAIO,yBAAyB,GAAGL,SAAS;EACzCE,cAAc,CAACI,yBAAyB,GAAG,YAAY;IACnD,IAAIb,KAAK,CAACc,SAAS,IAAI,CAACF,yBAAyB,EAAE;MAC/CA,yBAAyB,GAAGf,qBAAqB,CAACG,KAAK,CAACc,SAAS,CAAC;IACtE;IACA,OAAOF,yBAAyB;EACpC,CAAC;EACD,OAAOH,cAAc;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
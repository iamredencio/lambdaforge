{"ast":null,"code":"export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n  const configProvider = async () => {\n    var _config$configKey;\n    const configValue = (_config$configKey = config[configKey]) !== null && _config$configKey !== void 0 ? _config$configKey : config[canonicalEndpointParamKey];\n    if (typeof configValue === \"function\") {\n      return configValue();\n    }\n    return configValue;\n  };\n  if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n    return async () => {\n      var _credentials$credenti;\n      const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n      const configValue = (_credentials$credenti = credentials === null || credentials === void 0 ? void 0 : credentials.credentialScope) !== null && _credentials$credenti !== void 0 ? _credentials$credenti : credentials === null || credentials === void 0 ? void 0 : credentials.CredentialScope;\n      return configValue;\n    };\n  }\n  if (configKey === \"accountId\" || canonicalEndpointParamKey === \"AccountId\") {\n    return async () => {\n      var _credentials$accountI;\n      const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n      const configValue = (_credentials$accountI = credentials === null || credentials === void 0 ? void 0 : credentials.accountId) !== null && _credentials$accountI !== void 0 ? _credentials$accountI : credentials === null || credentials === void 0 ? void 0 : credentials.AccountId;\n      return configValue;\n    };\n  }\n  if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n    return async () => {\n      const endpoint = await configProvider();\n      if (endpoint && typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n          return endpoint.url.href;\n        }\n        if (\"hostname\" in endpoint) {\n          const {\n            protocol,\n            hostname,\n            port,\n            path\n          } = endpoint;\n          return \"\".concat(protocol, \"//\").concat(hostname).concat(port ? \":\" + port : \"\").concat(path);\n        }\n      }\n      return endpoint;\n    };\n  }\n  return configProvider;\n};","map":{"version":3,"names":["createConfigValueProvider","configKey","canonicalEndpointParamKey","config","configProvider","_config$configKey","configValue","_credentials$credenti","credentials","credentialScope","CredentialScope","_credentials$accountI","accountId","AccountId","endpoint","url","href","protocol","hostname","port","path","concat"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"],"sourcesContent":["export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n    const configProvider = async () => {\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    };\n    if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n        return async () => {\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;\n            return configValue;\n        };\n    }\n    if (configKey === \"accountId\" || canonicalEndpointParamKey === \"AccountId\") {\n        return async () => {\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = credentials?.accountId ?? credentials?.AccountId;\n            return configValue;\n        };\n    }\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async () => {\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,yBAAyB,GAAGA,CAACC,SAAS,EAAEC,yBAAyB,EAAEC,MAAM,KAAK;EACvF,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAAA,IAAAC,iBAAA;IAC/B,MAAMC,WAAW,IAAAD,iBAAA,GAAGF,MAAM,CAACF,SAAS,CAAC,cAAAI,iBAAA,cAAAA,iBAAA,GAAIF,MAAM,CAACD,yBAAyB,CAAC;IAC1E,IAAI,OAAOI,WAAW,KAAK,UAAU,EAAE;MACnC,OAAOA,WAAW,CAAC,CAAC;IACxB;IACA,OAAOA,WAAW;EACtB,CAAC;EACD,IAAIL,SAAS,KAAK,iBAAiB,IAAIC,yBAAyB,KAAK,iBAAiB,EAAE;IACpF,OAAO,YAAY;MAAA,IAAAK,qBAAA;MACf,MAAMC,WAAW,GAAG,OAAOL,MAAM,CAACK,WAAW,KAAK,UAAU,GAAG,MAAML,MAAM,CAACK,WAAW,CAAC,CAAC,GAAGL,MAAM,CAACK,WAAW;MAC9G,MAAMF,WAAW,IAAAC,qBAAA,GAAGC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,eAAe,cAAAF,qBAAA,cAAAA,qBAAA,GAAIC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,eAAe;MAChF,OAAOJ,WAAW;IACtB,CAAC;EACL;EACA,IAAIL,SAAS,KAAK,WAAW,IAAIC,yBAAyB,KAAK,WAAW,EAAE;IACxE,OAAO,YAAY;MAAA,IAAAS,qBAAA;MACf,MAAMH,WAAW,GAAG,OAAOL,MAAM,CAACK,WAAW,KAAK,UAAU,GAAG,MAAML,MAAM,CAACK,WAAW,CAAC,CAAC,GAAGL,MAAM,CAACK,WAAW;MAC9G,MAAMF,WAAW,IAAAK,qBAAA,GAAGH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,SAAS,cAAAD,qBAAA,cAAAA,qBAAA,GAAIH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,SAAS;MACpE,OAAOP,WAAW;IACtB,CAAC;EACL;EACA,IAAIL,SAAS,KAAK,UAAU,IAAIC,yBAAyB,KAAK,UAAU,EAAE;IACtE,OAAO,YAAY;MACf,MAAMY,QAAQ,GAAG,MAAMV,cAAc,CAAC,CAAC;MACvC,IAAIU,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC1C,IAAI,KAAK,IAAIA,QAAQ,EAAE;UACnB,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI;QAC5B;QACA,IAAI,UAAU,IAAIF,QAAQ,EAAE;UACxB,MAAM;YAAEG,QAAQ;YAAEC,QAAQ;YAAEC,IAAI;YAAEC;UAAK,CAAC,GAAGN,QAAQ;UACnD,UAAAO,MAAA,CAAUJ,QAAQ,QAAAI,MAAA,CAAKH,QAAQ,EAAAG,MAAA,CAAGF,IAAI,GAAG,GAAG,GAAGA,IAAI,GAAG,EAAE,EAAAE,MAAA,CAAGD,IAAI;QACnE;MACJ;MACA,OAAON,QAAQ;IACnB,CAAC;EACL;EACA,OAAOV,cAAc;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
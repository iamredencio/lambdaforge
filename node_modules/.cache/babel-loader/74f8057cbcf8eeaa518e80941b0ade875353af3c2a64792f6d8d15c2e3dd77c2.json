{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { setFeature } from \"@smithy/core\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = _ref => {\n  let {\n    config,\n    instructions\n  } = _ref;\n  return (next, context) => async args => {\n    var _endpoint$properties, _context$authSchemes;\n    if (config.endpoint) {\n      setFeature(context, \"ENDPOINT_OVERRIDE\", \"N\");\n    }\n    const endpoint = await getEndpointFromInstructions(args.input, {\n      getEndpointParameterInstructions() {\n        return instructions;\n      }\n    }, _objectSpread({}, config), context);\n    context.endpointV2 = endpoint;\n    context.authSchemes = (_endpoint$properties = endpoint.properties) === null || _endpoint$properties === void 0 ? void 0 : _endpoint$properties.authSchemes;\n    const authScheme = (_context$authSchemes = context.authSchemes) === null || _context$authSchemes === void 0 ? void 0 : _context$authSchemes[0];\n    if (authScheme) {\n      var _smithyContext$select;\n      context[\"signing_region\"] = authScheme.signingRegion;\n      context[\"signing_service\"] = authScheme.signingName;\n      const smithyContext = getSmithyContext(context);\n      const httpAuthOption = smithyContext === null || smithyContext === void 0 || (_smithyContext$select = smithyContext.selectedHttpAuthScheme) === null || _smithyContext$select === void 0 ? void 0 : _smithyContext$select.httpAuthOption;\n      if (httpAuthOption) {\n        httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {\n          signing_region: authScheme.signingRegion,\n          signingRegion: authScheme.signingRegion,\n          signing_service: authScheme.signingName,\n          signingName: authScheme.signingName,\n          signingRegionSet: authScheme.signingRegionSet\n        }, authScheme.properties);\n      }\n    }\n    return next(_objectSpread({}, args));\n  };\n};","map":{"version":3,"names":["setFeature","getSmithyContext","getEndpointFromInstructions","endpointMiddleware","_ref","config","instructions","next","context","args","_endpoint$properties","_context$authSchemes","endpoint","input","getEndpointParameterInstructions","_objectSpread","endpointV2","authSchemes","properties","authScheme","_smithyContext$select","signingRegion","signingName","smithyContext","httpAuthOption","selectedHttpAuthScheme","signingProperties","Object","assign","signing_region","signing_service","signingRegionSet"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"],"sourcesContent":["import { setFeature } from \"@smithy/core\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({ config, instructions, }) => {\n    return (next, context) => async (args) => {\n        if (config.endpoint) {\n            setFeature(context, \"ENDPOINT_OVERRIDE\", \"N\");\n        }\n        const endpoint = await getEndpointFromInstructions(args.input, {\n            getEndpointParameterInstructions() {\n                return instructions;\n            },\n        }, { ...config }, context);\n        context.endpointV2 = endpoint;\n        context.authSchemes = endpoint.properties?.authSchemes;\n        const authScheme = context.authSchemes?.[0];\n        if (authScheme) {\n            context[\"signing_region\"] = authScheme.signingRegion;\n            context[\"signing_service\"] = authScheme.signingName;\n            const smithyContext = getSmithyContext(context);\n            const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;\n            if (httpAuthOption) {\n                httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {\n                    signing_region: authScheme.signingRegion,\n                    signingRegion: authScheme.signingRegion,\n                    signing_service: authScheme.signingName,\n                    signingName: authScheme.signingName,\n                    signingRegionSet: authScheme.signingRegionSet,\n                }, authScheme.properties);\n            }\n        }\n        return next({\n            ...args,\n        });\n    };\n};\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,cAAc;AACzC,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,2BAA2B,QAAQ,wCAAwC;AACpF,OAAO,MAAMC,kBAAkB,GAAGC,IAAA,IAA+B;EAAA,IAA9B;IAAEC,MAAM;IAAEC;EAAc,CAAC,GAAAF,IAAA;EACxD,OAAO,CAACG,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;IAAA,IAAAC,oBAAA,EAAAC,oBAAA;IACtC,IAAIN,MAAM,CAACO,QAAQ,EAAE;MACjBZ,UAAU,CAACQ,OAAO,EAAE,mBAAmB,EAAE,GAAG,CAAC;IACjD;IACA,MAAMI,QAAQ,GAAG,MAAMV,2BAA2B,CAACO,IAAI,CAACI,KAAK,EAAE;MAC3DC,gCAAgCA,CAAA,EAAG;QAC/B,OAAOR,YAAY;MACvB;IACJ,CAAC,EAAAS,aAAA,KAAOV,MAAM,GAAIG,OAAO,CAAC;IAC1BA,OAAO,CAACQ,UAAU,GAAGJ,QAAQ;IAC7BJ,OAAO,CAACS,WAAW,IAAAP,oBAAA,GAAGE,QAAQ,CAACM,UAAU,cAAAR,oBAAA,uBAAnBA,oBAAA,CAAqBO,WAAW;IACtD,MAAME,UAAU,IAAAR,oBAAA,GAAGH,OAAO,CAACS,WAAW,cAAAN,oBAAA,uBAAnBA,oBAAA,CAAsB,CAAC,CAAC;IAC3C,IAAIQ,UAAU,EAAE;MAAA,IAAAC,qBAAA;MACZZ,OAAO,CAAC,gBAAgB,CAAC,GAAGW,UAAU,CAACE,aAAa;MACpDb,OAAO,CAAC,iBAAiB,CAAC,GAAGW,UAAU,CAACG,WAAW;MACnD,MAAMC,aAAa,GAAGtB,gBAAgB,CAACO,OAAO,CAAC;MAC/C,MAAMgB,cAAc,GAAGD,aAAa,aAAbA,aAAa,gBAAAH,qBAAA,GAAbG,aAAa,CAAEE,sBAAsB,cAAAL,qBAAA,uBAArCA,qBAAA,CAAuCI,cAAc;MAC5E,IAAIA,cAAc,EAAE;QAChBA,cAAc,CAACE,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAACJ,cAAc,CAACE,iBAAiB,IAAI,CAAC,CAAC,EAAE;UACrFG,cAAc,EAAEV,UAAU,CAACE,aAAa;UACxCA,aAAa,EAAEF,UAAU,CAACE,aAAa;UACvCS,eAAe,EAAEX,UAAU,CAACG,WAAW;UACvCA,WAAW,EAAEH,UAAU,CAACG,WAAW;UACnCS,gBAAgB,EAAEZ,UAAU,CAACY;QACjC,CAAC,EAAEZ,UAAU,CAACD,UAAU,CAAC;MAC7B;IACJ;IACA,OAAOX,IAAI,CAAAQ,aAAA,KACJN,IAAI,CACV,CAAC;EACN,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
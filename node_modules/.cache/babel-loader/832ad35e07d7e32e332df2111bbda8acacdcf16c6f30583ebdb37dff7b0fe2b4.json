{"ast":null,"code":"import { NormalizedSchema } from \"@smithy/core/schema\";\nexport const copyDocumentWithTransform = (source, schemaRef, transform = _ => _) => {\n  const ns = NormalizedSchema.of(schemaRef);\n  switch (typeof source) {\n    case \"undefined\":\n    case \"boolean\":\n    case \"number\":\n    case \"string\":\n    case \"bigint\":\n    case \"symbol\":\n      return transform(source, ns);\n    case \"function\":\n    case \"object\":\n      if (source === null) {\n        return transform(null, ns);\n      }\n      if (Array.isArray(source)) {\n        const newArray = new Array(source.length);\n        let i = 0;\n        for (const item of source) {\n          newArray[i++] = copyDocumentWithTransform(item, ns.getValueSchema(), transform);\n        }\n        return transform(newArray, ns);\n      }\n      if (\"byteLength\" in source) {\n        const newBytes = new Uint8Array(source.byteLength);\n        newBytes.set(source, 0);\n        return transform(newBytes, ns);\n      }\n      if (source instanceof Date) {\n        return transform(source, ns);\n      }\n      const newObject = {};\n      if (ns.isMapSchema()) {\n        for (const key of Object.keys(source)) {\n          newObject[key] = copyDocumentWithTransform(source[key], ns.getValueSchema(), transform);\n        }\n      } else if (ns.isStructSchema()) {\n        for (const [key, memberSchema] of ns.structIterator()) {\n          newObject[key] = copyDocumentWithTransform(source[key], memberSchema, transform);\n        }\n      } else if (ns.isDocumentSchema()) {\n        for (const key of Object.keys(source)) {\n          newObject[key] = copyDocumentWithTransform(source[key], ns.getValueSchema(), transform);\n        }\n      }\n      return transform(newObject, ns);\n    default:\n      return transform(source, ns);\n  }\n};","map":{"version":3,"names":["NormalizedSchema","copyDocumentWithTransform","source","schemaRef","transform","_","ns","of","Array","isArray","newArray","length","i","item","getValueSchema","newBytes","Uint8Array","byteLength","set","Date","newObject","isMapSchema","key","Object","keys","isStructSchema","memberSchema","structIterator","isDocumentSchema"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/core/dist-es/submodules/serde/copyDocumentWithTransform.js"],"sourcesContent":["import { NormalizedSchema } from \"@smithy/core/schema\";\nexport const copyDocumentWithTransform = (source, schemaRef, transform = (_) => _) => {\n    const ns = NormalizedSchema.of(schemaRef);\n    switch (typeof source) {\n        case \"undefined\":\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n        case \"bigint\":\n        case \"symbol\":\n            return transform(source, ns);\n        case \"function\":\n        case \"object\":\n            if (source === null) {\n                return transform(null, ns);\n            }\n            if (Array.isArray(source)) {\n                const newArray = new Array(source.length);\n                let i = 0;\n                for (const item of source) {\n                    newArray[i++] = copyDocumentWithTransform(item, ns.getValueSchema(), transform);\n                }\n                return transform(newArray, ns);\n            }\n            if (\"byteLength\" in source) {\n                const newBytes = new Uint8Array(source.byteLength);\n                newBytes.set(source, 0);\n                return transform(newBytes, ns);\n            }\n            if (source instanceof Date) {\n                return transform(source, ns);\n            }\n            const newObject = {};\n            if (ns.isMapSchema()) {\n                for (const key of Object.keys(source)) {\n                    newObject[key] = copyDocumentWithTransform(source[key], ns.getValueSchema(), transform);\n                }\n            }\n            else if (ns.isStructSchema()) {\n                for (const [key, memberSchema] of ns.structIterator()) {\n                    newObject[key] = copyDocumentWithTransform(source[key], memberSchema, transform);\n                }\n            }\n            else if (ns.isDocumentSchema()) {\n                for (const key of Object.keys(source)) {\n                    newObject[key] = copyDocumentWithTransform(source[key], ns.getValueSchema(), transform);\n                }\n            }\n            return transform(newObject, ns);\n        default:\n            return transform(source, ns);\n    }\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AACtD,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,MAAM,EAAEC,SAAS,EAAEC,SAAS,GAAIC,CAAC,IAAKA,CAAC,KAAK;EAClF,MAAMC,EAAE,GAAGN,gBAAgB,CAACO,EAAE,CAACJ,SAAS,CAAC;EACzC,QAAQ,OAAOD,MAAM;IACjB,KAAK,WAAW;IAChB,KAAK,SAAS;IACd,KAAK,QAAQ;IACb,KAAK,QAAQ;IACb,KAAK,QAAQ;IACb,KAAK,QAAQ;MACT,OAAOE,SAAS,CAACF,MAAM,EAAEI,EAAE,CAAC;IAChC,KAAK,UAAU;IACf,KAAK,QAAQ;MACT,IAAIJ,MAAM,KAAK,IAAI,EAAE;QACjB,OAAOE,SAAS,CAAC,IAAI,EAAEE,EAAE,CAAC;MAC9B;MACA,IAAIE,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,EAAE;QACvB,MAAMQ,QAAQ,GAAG,IAAIF,KAAK,CAACN,MAAM,CAACS,MAAM,CAAC;QACzC,IAAIC,CAAC,GAAG,CAAC;QACT,KAAK,MAAMC,IAAI,IAAIX,MAAM,EAAE;UACvBQ,QAAQ,CAACE,CAAC,EAAE,CAAC,GAAGX,yBAAyB,CAACY,IAAI,EAAEP,EAAE,CAACQ,cAAc,CAAC,CAAC,EAAEV,SAAS,CAAC;QACnF;QACA,OAAOA,SAAS,CAACM,QAAQ,EAAEJ,EAAE,CAAC;MAClC;MACA,IAAI,YAAY,IAAIJ,MAAM,EAAE;QACxB,MAAMa,QAAQ,GAAG,IAAIC,UAAU,CAACd,MAAM,CAACe,UAAU,CAAC;QAClDF,QAAQ,CAACG,GAAG,CAAChB,MAAM,EAAE,CAAC,CAAC;QACvB,OAAOE,SAAS,CAACW,QAAQ,EAAET,EAAE,CAAC;MAClC;MACA,IAAIJ,MAAM,YAAYiB,IAAI,EAAE;QACxB,OAAOf,SAAS,CAACF,MAAM,EAAEI,EAAE,CAAC;MAChC;MACA,MAAMc,SAAS,GAAG,CAAC,CAAC;MACpB,IAAId,EAAE,CAACe,WAAW,CAAC,CAAC,EAAE;QAClB,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACtB,MAAM,CAAC,EAAE;UACnCkB,SAAS,CAACE,GAAG,CAAC,GAAGrB,yBAAyB,CAACC,MAAM,CAACoB,GAAG,CAAC,EAAEhB,EAAE,CAACQ,cAAc,CAAC,CAAC,EAAEV,SAAS,CAAC;QAC3F;MACJ,CAAC,MACI,IAAIE,EAAE,CAACmB,cAAc,CAAC,CAAC,EAAE;QAC1B,KAAK,MAAM,CAACH,GAAG,EAAEI,YAAY,CAAC,IAAIpB,EAAE,CAACqB,cAAc,CAAC,CAAC,EAAE;UACnDP,SAAS,CAACE,GAAG,CAAC,GAAGrB,yBAAyB,CAACC,MAAM,CAACoB,GAAG,CAAC,EAAEI,YAAY,EAAEtB,SAAS,CAAC;QACpF;MACJ,CAAC,MACI,IAAIE,EAAE,CAACsB,gBAAgB,CAAC,CAAC,EAAE;QAC5B,KAAK,MAAMN,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACtB,MAAM,CAAC,EAAE;UACnCkB,SAAS,CAACE,GAAG,CAAC,GAAGrB,yBAAyB,CAACC,MAAM,CAACoB,GAAG,CAAC,EAAEhB,EAAE,CAACQ,cAAc,CAAC,CAAC,EAAEV,SAAS,CAAC;QAC3F;MACJ;MACA,OAAOA,SAAS,CAACgB,SAAS,EAAEd,EAAE,CAAC;IACnC;MACI,OAAOF,SAAS,CAACF,MAAM,EAAEI,EAAE,CAAC;EACpC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _defineProperty from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { dateToUtcString } from \"@smithy/core/serde\";\nimport { LazyJsonString } from \"@smithy/core/serde\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nimport { JsonReplacer } from \"./jsonReplacer\";\nexport class JsonShapeSerializer extends SerdeContextConfig {\n  constructor(settings) {\n    super();\n    _defineProperty(this, \"settings\", void 0);\n    _defineProperty(this, \"buffer\", void 0);\n    _defineProperty(this, \"rootSchema\", void 0);\n    this.settings = settings;\n  }\n  write(schema, value) {\n    this.rootSchema = NormalizedSchema.of(schema);\n    this.buffer = this._write(this.rootSchema, value);\n  }\n  flush() {\n    var _this$rootSchema, _this$rootSchema2;\n    if ((_this$rootSchema = this.rootSchema) !== null && _this$rootSchema !== void 0 && _this$rootSchema.isStructSchema() || (_this$rootSchema2 = this.rootSchema) !== null && _this$rootSchema2 !== void 0 && _this$rootSchema2.isDocumentSchema()) {\n      const replacer = new JsonReplacer();\n      return replacer.replaceInJson(JSON.stringify(this.buffer, replacer.createReplacer(), 0));\n    }\n    return this.buffer;\n  }\n  _write(schema, value, container) {\n    const isObject = value !== null && typeof value === \"object\";\n    const ns = NormalizedSchema.of(schema);\n    if (ns.isListSchema() && Array.isArray(value)) {\n      const listMember = ns.getValueSchema();\n      const out = [];\n      const sparse = !!ns.getMergedTraits().sparse;\n      for (const item of value) {\n        if (sparse || item != null) {\n          out.push(this._write(listMember, item));\n        }\n      }\n      return out;\n    } else if (ns.isMapSchema() && isObject) {\n      const mapMember = ns.getValueSchema();\n      const out = {};\n      const sparse = !!ns.getMergedTraits().sparse;\n      for (const [_k, _v] of Object.entries(value)) {\n        if (sparse || _v != null) {\n          out[_k] = this._write(mapMember, _v);\n        }\n      }\n      return out;\n    } else if (ns.isStructSchema() && isObject) {\n      const out = {};\n      for (const [memberName, memberSchema] of ns.structIterator()) {\n        var _memberSchema$getMerg;\n        const targetKey = this.settings.jsonName ? (_memberSchema$getMerg = memberSchema.getMergedTraits().jsonName) !== null && _memberSchema$getMerg !== void 0 ? _memberSchema$getMerg : memberName : memberName;\n        const serializableValue = this._write(memberSchema, value[memberName], ns);\n        if (serializableValue !== undefined) {\n          out[targetKey] = serializableValue;\n        }\n      }\n      return out;\n    }\n    if (value === null && container !== null && container !== void 0 && container.isStructSchema()) {\n      return void 0;\n    }\n    if (ns.isBlobSchema() && (value instanceof Uint8Array || typeof value === \"string\")) {\n      var _this$serdeContext, _this$serdeContext2;\n      if (ns === this.rootSchema) {\n        return value;\n      }\n      if (!((_this$serdeContext = this.serdeContext) !== null && _this$serdeContext !== void 0 && _this$serdeContext.base64Encoder)) {\n        throw new Error(\"Missing base64Encoder in serdeContext\");\n      }\n      return (_this$serdeContext2 = this.serdeContext) === null || _this$serdeContext2 === void 0 ? void 0 : _this$serdeContext2.base64Encoder(value);\n    }\n    if (ns.isTimestampSchema() && value instanceof Date) {\n      var _ns$getSchema;\n      const options = this.settings.timestampFormat;\n      const format = options.useTrait ? ns.getSchema() === SCHEMA.TIMESTAMP_DEFAULT ? options.default : (_ns$getSchema = ns.getSchema()) !== null && _ns$getSchema !== void 0 ? _ns$getSchema : options.default : options.default;\n      switch (format) {\n        case SCHEMA.TIMESTAMP_DATE_TIME:\n          return value.toISOString().replace(\".000Z\", \"Z\");\n        case SCHEMA.TIMESTAMP_HTTP_DATE:\n          return dateToUtcString(value);\n        case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n          return value.getTime() / 1000;\n        default:\n          console.warn(\"Missing timestamp format, using epoch seconds\", value);\n          return value.getTime() / 1000;\n      }\n    }\n    if (ns.isNumericSchema() && typeof value === \"number\") {\n      if (Math.abs(value) === Infinity || isNaN(value)) {\n        return String(value);\n      }\n    }\n    const mediaType = ns.getMergedTraits().mediaType;\n    if (ns.isStringSchema() && typeof value === \"string\" && mediaType) {\n      const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n      if (isJson) {\n        return LazyJsonString.from(value);\n      }\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["NormalizedSchema","SCHEMA","dateToUtcString","LazyJsonString","SerdeContextConfig","JsonReplacer","JsonShapeSerializer","constructor","settings","_defineProperty","write","schema","value","rootSchema","of","buffer","_write","flush","_this$rootSchema","_this$rootSchema2","isStructSchema","isDocumentSchema","replacer","replaceInJson","JSON","stringify","createReplacer","container","isObject","ns","isListSchema","Array","isArray","listMember","getValueSchema","out","sparse","getMergedTraits","item","push","isMapSchema","mapMember","_k","_v","Object","entries","memberName","memberSchema","structIterator","_memberSchema$getMerg","targetKey","jsonName","serializableValue","undefined","isBlobSchema","Uint8Array","_this$serdeContext","_this$serdeContext2","serdeContext","base64Encoder","Error","isTimestampSchema","Date","_ns$getSchema","options","timestampFormat","format","useTrait","getSchema","TIMESTAMP_DEFAULT","default","TIMESTAMP_DATE_TIME","toISOString","replace","TIMESTAMP_HTTP_DATE","TIMESTAMP_EPOCH_SECONDS","getTime","console","warn","isNumericSchema","Math","abs","Infinity","isNaN","String","mediaType","isStringSchema","isJson","endsWith","from"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeSerializer.js"],"sourcesContent":["import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { dateToUtcString } from \"@smithy/core/serde\";\nimport { LazyJsonString } from \"@smithy/core/serde\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nimport { JsonReplacer } from \"./jsonReplacer\";\nexport class JsonShapeSerializer extends SerdeContextConfig {\n    settings;\n    buffer;\n    rootSchema;\n    constructor(settings) {\n        super();\n        this.settings = settings;\n    }\n    write(schema, value) {\n        this.rootSchema = NormalizedSchema.of(schema);\n        this.buffer = this._write(this.rootSchema, value);\n    }\n    flush() {\n        if (this.rootSchema?.isStructSchema() || this.rootSchema?.isDocumentSchema()) {\n            const replacer = new JsonReplacer();\n            return replacer.replaceInJson(JSON.stringify(this.buffer, replacer.createReplacer(), 0));\n        }\n        return this.buffer;\n    }\n    _write(schema, value, container) {\n        const isObject = value !== null && typeof value === \"object\";\n        const ns = NormalizedSchema.of(schema);\n        if (ns.isListSchema() && Array.isArray(value)) {\n            const listMember = ns.getValueSchema();\n            const out = [];\n            const sparse = !!ns.getMergedTraits().sparse;\n            for (const item of value) {\n                if (sparse || item != null) {\n                    out.push(this._write(listMember, item));\n                }\n            }\n            return out;\n        }\n        else if (ns.isMapSchema() && isObject) {\n            const mapMember = ns.getValueSchema();\n            const out = {};\n            const sparse = !!ns.getMergedTraits().sparse;\n            for (const [_k, _v] of Object.entries(value)) {\n                if (sparse || _v != null) {\n                    out[_k] = this._write(mapMember, _v);\n                }\n            }\n            return out;\n        }\n        else if (ns.isStructSchema() && isObject) {\n            const out = {};\n            for (const [memberName, memberSchema] of ns.structIterator()) {\n                const targetKey = this.settings.jsonName ? memberSchema.getMergedTraits().jsonName ?? memberName : memberName;\n                const serializableValue = this._write(memberSchema, value[memberName], ns);\n                if (serializableValue !== undefined) {\n                    out[targetKey] = serializableValue;\n                }\n            }\n            return out;\n        }\n        if (value === null && container?.isStructSchema()) {\n            return void 0;\n        }\n        if (ns.isBlobSchema() && (value instanceof Uint8Array || typeof value === \"string\")) {\n            if (ns === this.rootSchema) {\n                return value;\n            }\n            if (!this.serdeContext?.base64Encoder) {\n                throw new Error(\"Missing base64Encoder in serdeContext\");\n            }\n            return this.serdeContext?.base64Encoder(value);\n        }\n        if (ns.isTimestampSchema() && value instanceof Date) {\n            const options = this.settings.timestampFormat;\n            const format = options.useTrait\n                ? ns.getSchema() === SCHEMA.TIMESTAMP_DEFAULT\n                    ? options.default\n                    : ns.getSchema() ?? options.default\n                : options.default;\n            switch (format) {\n                case SCHEMA.TIMESTAMP_DATE_TIME:\n                    return value.toISOString().replace(\".000Z\", \"Z\");\n                case SCHEMA.TIMESTAMP_HTTP_DATE:\n                    return dateToUtcString(value);\n                case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n                    return value.getTime() / 1000;\n                default:\n                    console.warn(\"Missing timestamp format, using epoch seconds\", value);\n                    return value.getTime() / 1000;\n            }\n        }\n        if (ns.isNumericSchema() && typeof value === \"number\") {\n            if (Math.abs(value) === Infinity || isNaN(value)) {\n                return String(value);\n            }\n        }\n        const mediaType = ns.getMergedTraits().mediaType;\n        if (ns.isStringSchema() && typeof value === \"string\" && mediaType) {\n            const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n            if (isJson) {\n                return LazyJsonString.from(value);\n            }\n        }\n        return value;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
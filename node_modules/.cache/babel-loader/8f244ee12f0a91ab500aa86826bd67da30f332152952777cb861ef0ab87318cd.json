{"ast":null,"code":"import { toHex } from \"@smithy/util-hex-encoding\";\nexport class Int64 {\n  constructor(bytes) {\n    this.bytes = bytes;\n    if (bytes.byteLength !== 8) {\n      throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n    }\n  }\n  static fromNumber(number) {\n    if (number > 9223372036854776000 || number < -9223372036854776000) {\n      throw new Error(\"\".concat(number, \" is too large (or, if negative, too small) to represent as an Int64\"));\n    }\n    const bytes = new Uint8Array(8);\n    for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n    if (number < 0) {\n      negate(bytes);\n    }\n    return new Int64(bytes);\n  }\n  valueOf() {\n    const bytes = this.bytes.slice(0);\n    const negative = bytes[0] & 0b10000000;\n    if (negative) {\n      negate(bytes);\n    }\n    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n  }\n  toString() {\n    return String(this.valueOf());\n  }\n}\nfunction negate(bytes) {\n  for (let i = 0; i < 8; i++) {\n    bytes[i] ^= 0xff;\n  }\n  for (let i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":{"version":3,"names":["toHex","Int64","constructor","bytes","byteLength","Error","fromNumber","number","concat","Uint8Array","i","remaining","Math","abs","round","negate","valueOf","slice","negative","parseInt","toString","String"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/eventstream-codec/dist-es/Int64.js"],"sourcesContent":["import { toHex } from \"@smithy/util-hex-encoding\";\nexport class Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,2BAA2B;AACjD,OAAO,MAAMC,KAAK,CAAC;EACfC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAIA,KAAK,CAACC,UAAU,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC5D;EACJ;EACA,OAAOC,UAAUA,CAACC,MAAM,EAAE;IACtB,IAAIA,MAAM,GAAG,mBAAmB,IAAIA,MAAM,GAAG,CAAC,mBAAmB,EAAE;MAC/D,MAAM,IAAIF,KAAK,IAAAG,MAAA,CAAID,MAAM,wEAAqE,CAAC;IACnG;IACA,MAAMJ,KAAK,GAAG,IAAIM,UAAU,CAAC,CAAC,CAAC;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACP,MAAM,CAAC,CAAC,EAAEG,CAAC,GAAG,CAAC,CAAC,IAAIC,SAAS,GAAG,CAAC,EAAED,CAAC,EAAE,EAAEC,SAAS,IAAI,GAAG,EAAE;MACtGR,KAAK,CAACO,CAAC,CAAC,GAAGC,SAAS;IACxB;IACA,IAAIJ,MAAM,GAAG,CAAC,EAAE;MACZQ,MAAM,CAACZ,KAAK,CAAC;IACjB;IACA,OAAO,IAAIF,KAAK,CAACE,KAAK,CAAC;EAC3B;EACAa,OAAOA,CAAA,EAAG;IACN,MAAMb,KAAK,GAAG,IAAI,CAACA,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;IACjC,MAAMC,QAAQ,GAAGf,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;IACtC,IAAIe,QAAQ,EAAE;MACVH,MAAM,CAACZ,KAAK,CAAC;IACjB;IACA,OAAOgB,QAAQ,CAACnB,KAAK,CAACG,KAAK,CAAC,EAAE,EAAE,CAAC,IAAIe,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3D;EACAE,QAAQA,CAAA,EAAG;IACP,OAAOC,MAAM,CAAC,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC;EACjC;AACJ;AACA,SAASD,MAAMA,CAACZ,KAAK,EAAE;EACnB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBP,KAAK,CAACO,CAAC,CAAC,IAAI,IAAI;EACpB;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzBP,KAAK,CAACO,CAAC,CAAC,EAAE;IACV,IAAIP,KAAK,CAACO,CAAC,CAAC,KAAK,CAAC,EACd;EACR;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
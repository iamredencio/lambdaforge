{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { deref } from \"../deref\";\nimport { ListSchema } from \"./ListSchema\";\nimport { MapSchema } from \"./MapSchema\";\nimport { SCHEMA } from \"./sentinels\";\nimport { SimpleSchema } from \"./SimpleSchema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class NormalizedSchema {\n  constructor(ref, memberName) {\n    var _ref2, _ref3, _this$schema2;\n    this.ref = ref;\n    this.memberName = memberName;\n    const traitStack = [];\n    let _ref = ref;\n    let schema = ref;\n    this._isMemberSchema = false;\n    while (Array.isArray(_ref)) {\n      traitStack.push(_ref[1]);\n      _ref = _ref[0];\n      schema = deref(_ref);\n      this._isMemberSchema = true;\n    }\n    if (traitStack.length > 0) {\n      this.memberTraits = {};\n      for (let i = traitStack.length - 1; i >= 0; --i) {\n        const traitSet = traitStack[i];\n        Object.assign(this.memberTraits, NormalizedSchema.translateTraits(traitSet));\n      }\n    } else {\n      this.memberTraits = 0;\n    }\n    if (schema instanceof NormalizedSchema) {\n      this.name = schema.name;\n      this.traits = schema.traits;\n      this._isMemberSchema = schema._isMemberSchema;\n      this.schema = schema.schema;\n      this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());\n      this.normalizedTraits = void 0;\n      this.ref = schema.ref;\n      this.memberName = memberName !== null && memberName !== void 0 ? memberName : schema.memberName;\n      return;\n    }\n    this.schema = deref(schema);\n    if (this.schema && typeof this.schema === \"object\") {\n      var _this$schema$traits, _this$schema;\n      this.traits = (_this$schema$traits = (_this$schema = this.schema) === null || _this$schema === void 0 ? void 0 : _this$schema.traits) !== null && _this$schema$traits !== void 0 ? _this$schema$traits : {};\n    } else {\n      this.traits = 0;\n    }\n    this.name = (_ref2 = (_ref3 = typeof this.schema === \"object\" ? (_this$schema2 = this.schema) === null || _this$schema2 === void 0 ? void 0 : _this$schema2.name : void 0) !== null && _ref3 !== void 0 ? _ref3 : this.memberName) !== null && _ref2 !== void 0 ? _ref2 : this.getSchemaName();\n    if (this._isMemberSchema && !memberName) {\n      throw new Error(\"@smithy/core/schema - NormalizedSchema member schema \".concat(this.getName(true), \" must initialize with memberName argument.\"));\n    }\n  }\n  static of(ref, memberName) {\n    if (ref instanceof NormalizedSchema) {\n      return ref;\n    }\n    return new NormalizedSchema(ref, memberName);\n  }\n  static translateTraits(indicator) {\n    if (typeof indicator === \"object\") {\n      return indicator;\n    }\n    indicator = indicator | 0;\n    const traits = {};\n    if ((indicator & 1) === 1) {\n      traits.httpLabel = 1;\n    }\n    if ((indicator >> 1 & 1) === 1) {\n      traits.idempotent = 1;\n    }\n    if ((indicator >> 2 & 1) === 1) {\n      traits.idempotencyToken = 1;\n    }\n    if ((indicator >> 3 & 1) === 1) {\n      traits.sensitive = 1;\n    }\n    if ((indicator >> 4 & 1) === 1) {\n      traits.httpPayload = 1;\n    }\n    if ((indicator >> 5 & 1) === 1) {\n      traits.httpResponseCode = 1;\n    }\n    if ((indicator >> 6 & 1) === 1) {\n      traits.httpQueryParams = 1;\n    }\n    return traits;\n  }\n  static memberFrom(memberSchema, memberName) {\n    if (memberSchema instanceof NormalizedSchema) {\n      memberSchema.memberName = memberName;\n      memberSchema._isMemberSchema = true;\n      return memberSchema;\n    }\n    return new NormalizedSchema(memberSchema, memberName);\n  }\n  getSchema() {\n    if (this.schema instanceof NormalizedSchema) {\n      return this.schema = this.schema.getSchema();\n    }\n    if (this.schema instanceof SimpleSchema) {\n      return deref(this.schema.schemaRef);\n    }\n    return deref(this.schema);\n  }\n  getName() {\n    let withNamespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!withNamespace) {\n      if (this.name && this.name.includes(\"#\")) {\n        return this.name.split(\"#\")[1];\n      }\n    }\n    return this.name || undefined;\n  }\n  getMemberName() {\n    if (!this.isMemberSchema()) {\n      throw new Error(\"@smithy/core/schema - cannot get member name on non-member schema: \".concat(this.getName(true)));\n    }\n    return this.memberName;\n  }\n  isMemberSchema() {\n    return this._isMemberSchema;\n  }\n  isUnitSchema() {\n    return this.getSchema() === \"unit\";\n  }\n  isListSchema() {\n    const inner = this.getSchema();\n    if (typeof inner === \"number\") {\n      return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;\n    }\n    return inner instanceof ListSchema;\n  }\n  isMapSchema() {\n    const inner = this.getSchema();\n    if (typeof inner === \"number\") {\n      return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;\n    }\n    return inner instanceof MapSchema;\n  }\n  isDocumentSchema() {\n    return this.getSchema() === SCHEMA.DOCUMENT;\n  }\n  isStructSchema() {\n    const inner = this.getSchema();\n    return inner !== null && typeof inner === \"object\" && \"members\" in inner || inner instanceof StructureSchema;\n  }\n  isBlobSchema() {\n    return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;\n  }\n  isTimestampSchema() {\n    const schema = this.getSchema();\n    return typeof schema === \"number\" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;\n  }\n  isStringSchema() {\n    return this.getSchema() === SCHEMA.STRING;\n  }\n  isBooleanSchema() {\n    return this.getSchema() === SCHEMA.BOOLEAN;\n  }\n  isNumericSchema() {\n    return this.getSchema() === SCHEMA.NUMERIC;\n  }\n  isBigIntegerSchema() {\n    return this.getSchema() === SCHEMA.BIG_INTEGER;\n  }\n  isBigDecimalSchema() {\n    return this.getSchema() === SCHEMA.BIG_DECIMAL;\n  }\n  isStreaming() {\n    const streaming = !!this.getMergedTraits().streaming;\n    if (streaming) {\n      return true;\n    }\n    return this.getSchema() === SCHEMA.STREAMING_BLOB;\n  }\n  getMergedTraits() {\n    if (this.normalizedTraits) {\n      return this.normalizedTraits;\n    }\n    this.normalizedTraits = _objectSpread(_objectSpread({}, this.getOwnTraits()), this.getMemberTraits());\n    return this.normalizedTraits;\n  }\n  getMemberTraits() {\n    return NormalizedSchema.translateTraits(this.memberTraits);\n  }\n  getOwnTraits() {\n    return NormalizedSchema.translateTraits(this.traits);\n  }\n  getKeySchema() {\n    if (this.isDocumentSchema()) {\n      return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"key\");\n    }\n    if (!this.isMapSchema()) {\n      throw new Error(\"@smithy/core/schema - cannot get key schema for non-map schema: \".concat(this.getName(true)));\n    }\n    const schema = this.getSchema();\n    if (typeof schema === \"number\") {\n      return NormalizedSchema.memberFrom([63 & schema, 0], \"key\");\n    }\n    return NormalizedSchema.memberFrom([schema.keySchema, 0], \"key\");\n  }\n  getValueSchema() {\n    const schema = this.getSchema();\n    if (typeof schema === \"number\") {\n      if (this.isMapSchema()) {\n        return NormalizedSchema.memberFrom([63 & schema, 0], \"value\");\n      } else if (this.isListSchema()) {\n        return NormalizedSchema.memberFrom([63 & schema, 0], \"member\");\n      }\n    }\n    if (schema && typeof schema === \"object\") {\n      if (this.isStructSchema()) {\n        throw new Error(\"cannot call getValueSchema() with StructureSchema \".concat(this.getName(true)));\n      }\n      const collection = schema;\n      if (\"valueSchema\" in collection) {\n        if (this.isMapSchema()) {\n          return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"value\");\n        } else if (this.isListSchema()) {\n          return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"member\");\n        }\n      }\n    }\n    if (this.isDocumentSchema()) {\n      return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"value\");\n    }\n    throw new Error(\"@smithy/core/schema - the schema \".concat(this.getName(true), \" does not have a value member.\"));\n  }\n  getMemberSchema(member) {\n    if (this.isStructSchema()) {\n      const struct = this.getSchema();\n      if (!(member in struct.members)) {\n        throw new Error(\"@smithy/core/schema - the schema \".concat(this.getName(true), \" does not have a member with name=\").concat(member, \".\"));\n      }\n      return NormalizedSchema.memberFrom(struct.members[member], member);\n    }\n    if (this.isDocumentSchema()) {\n      return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], member);\n    }\n    throw new Error(\"@smithy/core/schema - the schema \".concat(this.getName(true), \" does not have members.\"));\n  }\n  getMemberSchemas() {\n    const {\n      schema\n    } = this;\n    const struct = schema;\n    if (!struct || typeof struct !== \"object\") {\n      return {};\n    }\n    if (\"members\" in struct) {\n      const buffer = {};\n      for (const member of struct.memberNames) {\n        buffer[member] = this.getMemberSchema(member);\n      }\n      return buffer;\n    }\n    return {};\n  }\n  *structIterator() {\n    if (this.isUnitSchema()) {\n      return;\n    }\n    if (!this.isStructSchema()) {\n      throw new Error(\"@smithy/core/schema - cannot acquire structIterator on non-struct schema.\");\n    }\n    const struct = this.getSchema();\n    for (let i = 0; i < struct.memberNames.length; ++i) {\n      yield [struct.memberNames[i], NormalizedSchema.memberFrom([struct.memberList[i], 0], struct.memberNames[i])];\n    }\n  }\n  getSchemaName() {\n    const schema = this.getSchema();\n    if (typeof schema === \"number\") {\n      var _Object$entries$find$, _Object$entries$find;\n      const _schema = 63 & schema;\n      const container = 192 & schema;\n      const type = (_Object$entries$find$ = (_Object$entries$find = Object.entries(SCHEMA).find(_ref4 => {\n        let [, value] = _ref4;\n        return value === _schema;\n      })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]) !== null && _Object$entries$find$ !== void 0 ? _Object$entries$find$ : \"Unknown\";\n      switch (container) {\n        case SCHEMA.MAP_MODIFIER:\n          return \"\".concat(type, \"Map\");\n        case SCHEMA.LIST_MODIFIER:\n          return \"\".concat(type, \"List\");\n        case 0:\n          return type;\n      }\n    }\n    return \"Unknown\";\n  }\n}","map":{"version":3,"names":["deref","ListSchema","MapSchema","SCHEMA","SimpleSchema","StructureSchema","NormalizedSchema","constructor","ref","memberName","_ref2","_ref3","_this$schema2","traitStack","_ref","schema","_isMemberSchema","Array","isArray","push","length","memberTraits","i","traitSet","Object","assign","translateTraits","name","traits","getMemberTraits","normalizedTraits","_this$schema$traits","_this$schema","getSchemaName","Error","concat","getName","of","indicator","httpLabel","idempotent","idempotencyToken","sensitive","httpPayload","httpResponseCode","httpQueryParams","memberFrom","memberSchema","getSchema","schemaRef","withNamespace","arguments","undefined","includes","split","getMemberName","isMemberSchema","isUnitSchema","isListSchema","inner","LIST_MODIFIER","MAP_MODIFIER","isMapSchema","isDocumentSchema","DOCUMENT","isStructSchema","isBlobSchema","BLOB","STREAMING_BLOB","isTimestampSchema","TIMESTAMP_DEFAULT","TIMESTAMP_EPOCH_SECONDS","isStringSchema","STRING","isBooleanSchema","BOOLEAN","isNumericSchema","NUMERIC","isBigIntegerSchema","BIG_INTEGER","isBigDecimalSchema","BIG_DECIMAL","isStreaming","streaming","getMergedTraits","_objectSpread","getOwnTraits","getKeySchema","keySchema","getValueSchema","collection","valueSchema","getMemberSchema","member","struct","members","getMemberSchemas","buffer","memberNames","structIterator","memberList","_Object$entries$find$","_Object$entries$find","_schema","container","type","entries","find","_ref4","value"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/core/dist-es/submodules/schema/schemas/NormalizedSchema.js"],"sourcesContent":["import { deref } from \"../deref\";\nimport { ListSchema } from \"./ListSchema\";\nimport { MapSchema } from \"./MapSchema\";\nimport { SCHEMA } from \"./sentinels\";\nimport { SimpleSchema } from \"./SimpleSchema\";\nimport { StructureSchema } from \"./StructureSchema\";\nexport class NormalizedSchema {\n    constructor(ref, memberName) {\n        this.ref = ref;\n        this.memberName = memberName;\n        const traitStack = [];\n        let _ref = ref;\n        let schema = ref;\n        this._isMemberSchema = false;\n        while (Array.isArray(_ref)) {\n            traitStack.push(_ref[1]);\n            _ref = _ref[0];\n            schema = deref(_ref);\n            this._isMemberSchema = true;\n        }\n        if (traitStack.length > 0) {\n            this.memberTraits = {};\n            for (let i = traitStack.length - 1; i >= 0; --i) {\n                const traitSet = traitStack[i];\n                Object.assign(this.memberTraits, NormalizedSchema.translateTraits(traitSet));\n            }\n        }\n        else {\n            this.memberTraits = 0;\n        }\n        if (schema instanceof NormalizedSchema) {\n            this.name = schema.name;\n            this.traits = schema.traits;\n            this._isMemberSchema = schema._isMemberSchema;\n            this.schema = schema.schema;\n            this.memberTraits = Object.assign({}, schema.getMemberTraits(), this.getMemberTraits());\n            this.normalizedTraits = void 0;\n            this.ref = schema.ref;\n            this.memberName = memberName ?? schema.memberName;\n            return;\n        }\n        this.schema = deref(schema);\n        if (this.schema && typeof this.schema === \"object\") {\n            this.traits = this.schema?.traits ?? {};\n        }\n        else {\n            this.traits = 0;\n        }\n        this.name =\n            (typeof this.schema === \"object\" ? this.schema?.name : void 0) ?? this.memberName ?? this.getSchemaName();\n        if (this._isMemberSchema && !memberName) {\n            throw new Error(`@smithy/core/schema - NormalizedSchema member schema ${this.getName(true)} must initialize with memberName argument.`);\n        }\n    }\n    static of(ref, memberName) {\n        if (ref instanceof NormalizedSchema) {\n            return ref;\n        }\n        return new NormalizedSchema(ref, memberName);\n    }\n    static translateTraits(indicator) {\n        if (typeof indicator === \"object\") {\n            return indicator;\n        }\n        indicator = indicator | 0;\n        const traits = {};\n        if ((indicator & 1) === 1) {\n            traits.httpLabel = 1;\n        }\n        if (((indicator >> 1) & 1) === 1) {\n            traits.idempotent = 1;\n        }\n        if (((indicator >> 2) & 1) === 1) {\n            traits.idempotencyToken = 1;\n        }\n        if (((indicator >> 3) & 1) === 1) {\n            traits.sensitive = 1;\n        }\n        if (((indicator >> 4) & 1) === 1) {\n            traits.httpPayload = 1;\n        }\n        if (((indicator >> 5) & 1) === 1) {\n            traits.httpResponseCode = 1;\n        }\n        if (((indicator >> 6) & 1) === 1) {\n            traits.httpQueryParams = 1;\n        }\n        return traits;\n    }\n    static memberFrom(memberSchema, memberName) {\n        if (memberSchema instanceof NormalizedSchema) {\n            memberSchema.memberName = memberName;\n            memberSchema._isMemberSchema = true;\n            return memberSchema;\n        }\n        return new NormalizedSchema(memberSchema, memberName);\n    }\n    getSchema() {\n        if (this.schema instanceof NormalizedSchema) {\n            return (this.schema = this.schema.getSchema());\n        }\n        if (this.schema instanceof SimpleSchema) {\n            return deref(this.schema.schemaRef);\n        }\n        return deref(this.schema);\n    }\n    getName(withNamespace = false) {\n        if (!withNamespace) {\n            if (this.name && this.name.includes(\"#\")) {\n                return this.name.split(\"#\")[1];\n            }\n        }\n        return this.name || undefined;\n    }\n    getMemberName() {\n        if (!this.isMemberSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get member name on non-member schema: ${this.getName(true)}`);\n        }\n        return this.memberName;\n    }\n    isMemberSchema() {\n        return this._isMemberSchema;\n    }\n    isUnitSchema() {\n        return this.getSchema() === \"unit\";\n    }\n    isListSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.LIST_MODIFIER && inner < SCHEMA.MAP_MODIFIER;\n        }\n        return inner instanceof ListSchema;\n    }\n    isMapSchema() {\n        const inner = this.getSchema();\n        if (typeof inner === \"number\") {\n            return inner >= SCHEMA.MAP_MODIFIER && inner <= 255;\n        }\n        return inner instanceof MapSchema;\n    }\n    isDocumentSchema() {\n        return this.getSchema() === SCHEMA.DOCUMENT;\n    }\n    isStructSchema() {\n        const inner = this.getSchema();\n        return (inner !== null && typeof inner === \"object\" && \"members\" in inner) || inner instanceof StructureSchema;\n    }\n    isBlobSchema() {\n        return this.getSchema() === SCHEMA.BLOB || this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    isTimestampSchema() {\n        const schema = this.getSchema();\n        return typeof schema === \"number\" && schema >= SCHEMA.TIMESTAMP_DEFAULT && schema <= SCHEMA.TIMESTAMP_EPOCH_SECONDS;\n    }\n    isStringSchema() {\n        return this.getSchema() === SCHEMA.STRING;\n    }\n    isBooleanSchema() {\n        return this.getSchema() === SCHEMA.BOOLEAN;\n    }\n    isNumericSchema() {\n        return this.getSchema() === SCHEMA.NUMERIC;\n    }\n    isBigIntegerSchema() {\n        return this.getSchema() === SCHEMA.BIG_INTEGER;\n    }\n    isBigDecimalSchema() {\n        return this.getSchema() === SCHEMA.BIG_DECIMAL;\n    }\n    isStreaming() {\n        const streaming = !!this.getMergedTraits().streaming;\n        if (streaming) {\n            return true;\n        }\n        return this.getSchema() === SCHEMA.STREAMING_BLOB;\n    }\n    getMergedTraits() {\n        if (this.normalizedTraits) {\n            return this.normalizedTraits;\n        }\n        this.normalizedTraits = {\n            ...this.getOwnTraits(),\n            ...this.getMemberTraits(),\n        };\n        return this.normalizedTraits;\n    }\n    getMemberTraits() {\n        return NormalizedSchema.translateTraits(this.memberTraits);\n    }\n    getOwnTraits() {\n        return NormalizedSchema.translateTraits(this.traits);\n    }\n    getKeySchema() {\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"key\");\n        }\n        if (!this.isMapSchema()) {\n            throw new Error(`@smithy/core/schema - cannot get key schema for non-map schema: ${this.getName(true)}`);\n        }\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            return NormalizedSchema.memberFrom([63 & schema, 0], \"key\");\n        }\n        return NormalizedSchema.memberFrom([schema.keySchema, 0], \"key\");\n    }\n    getValueSchema() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            if (this.isMapSchema()) {\n                return NormalizedSchema.memberFrom([63 & schema, 0], \"value\");\n            }\n            else if (this.isListSchema()) {\n                return NormalizedSchema.memberFrom([63 & schema, 0], \"member\");\n            }\n        }\n        if (schema && typeof schema === \"object\") {\n            if (this.isStructSchema()) {\n                throw new Error(`cannot call getValueSchema() with StructureSchema ${this.getName(true)}`);\n            }\n            const collection = schema;\n            if (\"valueSchema\" in collection) {\n                if (this.isMapSchema()) {\n                    return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"value\");\n                }\n                else if (this.isListSchema()) {\n                    return NormalizedSchema.memberFrom([collection.valueSchema, 0], \"member\");\n                }\n            }\n        }\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], \"value\");\n        }\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a value member.`);\n    }\n    getMemberSchema(member) {\n        if (this.isStructSchema()) {\n            const struct = this.getSchema();\n            if (!(member in struct.members)) {\n                throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have a member with name=${member}.`);\n            }\n            return NormalizedSchema.memberFrom(struct.members[member], member);\n        }\n        if (this.isDocumentSchema()) {\n            return NormalizedSchema.memberFrom([SCHEMA.DOCUMENT, 0], member);\n        }\n        throw new Error(`@smithy/core/schema - the schema ${this.getName(true)} does not have members.`);\n    }\n    getMemberSchemas() {\n        const { schema } = this;\n        const struct = schema;\n        if (!struct || typeof struct !== \"object\") {\n            return {};\n        }\n        if (\"members\" in struct) {\n            const buffer = {};\n            for (const member of struct.memberNames) {\n                buffer[member] = this.getMemberSchema(member);\n            }\n            return buffer;\n        }\n        return {};\n    }\n    *structIterator() {\n        if (this.isUnitSchema()) {\n            return;\n        }\n        if (!this.isStructSchema()) {\n            throw new Error(\"@smithy/core/schema - cannot acquire structIterator on non-struct schema.\");\n        }\n        const struct = this.getSchema();\n        for (let i = 0; i < struct.memberNames.length; ++i) {\n            yield [struct.memberNames[i], NormalizedSchema.memberFrom([struct.memberList[i], 0], struct.memberNames[i])];\n        }\n    }\n    getSchemaName() {\n        const schema = this.getSchema();\n        if (typeof schema === \"number\") {\n            const _schema = 63 & schema;\n            const container = 192 & schema;\n            const type = Object.entries(SCHEMA).find(([, value]) => {\n                return value === _schema;\n            })?.[0] ?? \"Unknown\";\n            switch (container) {\n                case SCHEMA.MAP_MODIFIER:\n                    return `${type}Map`;\n                case SCHEMA.LIST_MODIFIER:\n                    return `${type}List`;\n                case 0:\n                    return type;\n            }\n        }\n        return \"Unknown\";\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst getAllAliases = (name, aliases) => {\n  const _aliases = [];\n  if (name) {\n    _aliases.push(name);\n  }\n  if (aliases) {\n    for (const alias of aliases) {\n      _aliases.push(alias);\n    }\n  }\n  return _aliases;\n};\nconst getMiddlewareNameWithAliases = (name, aliases) => {\n  return \"\".concat(name || \"anonymous\").concat(aliases && aliases.length > 0 ? \" (a.k.a. \".concat(aliases.join(\",\"), \")\") : \"\");\n};\nexport const constructStack = () => {\n  let absoluteEntries = [];\n  let relativeEntries = [];\n  let identifyOnResolve = false;\n  const entriesNameSet = new Set();\n  const sort = entries => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n  const removeByName = toRemove => {\n    let isRemoved = false;\n    const filterCb = entry => {\n      const aliases = getAllAliases(entry.name, entry.aliases);\n      if (aliases.includes(toRemove)) {\n        isRemoved = true;\n        for (const alias of aliases) {\n          entriesNameSet.delete(alias);\n        }\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  const removeByReference = toRemove => {\n    let isRemoved = false;\n    const filterCb = entry => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        for (const alias of getAllAliases(entry.name, entry.aliases)) {\n          entriesNameSet.delete(alias);\n        }\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  const cloneTo = toStack => {\n    var _toStack$identifyOnRe;\n    absoluteEntries.forEach(entry => {\n      toStack.add(entry.middleware, _objectSpread({}, entry));\n    });\n    relativeEntries.forEach(entry => {\n      toStack.addRelativeTo(entry.middleware, _objectSpread({}, entry));\n    });\n    (_toStack$identifyOnRe = toStack.identifyOnResolve) === null || _toStack$identifyOnRe === void 0 || _toStack$identifyOnRe.call(toStack, stack.identifyOnResolve());\n    return toStack;\n  };\n  const expandRelativeMiddlewareList = from => {\n    const expandedMiddlewareList = [];\n    from.before.forEach(entry => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(entry => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  const getMiddlewareList = function () {\n    let debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const normalizedAbsoluteEntries = [];\n    const normalizedRelativeEntries = [];\n    const normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(entry => {\n      const normalizedEntry = _objectSpread(_objectSpread({}, entry), {}, {\n        before: [],\n        after: []\n      });\n      for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n        normalizedEntriesNameMap[alias] = normalizedEntry;\n      }\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(entry => {\n      const normalizedEntry = _objectSpread(_objectSpread({}, entry), {}, {\n        before: [],\n        after: []\n      });\n      for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n        normalizedEntriesNameMap[alias] = normalizedEntry;\n      }\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(entry => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          if (debug) {\n            return;\n          }\n          throw new Error(\"\".concat(entry.toMiddleware, \" is not found when adding \") + \"\".concat(getMiddlewareNameWithAliases(entry.name, entry.aliases), \" \") + \"middleware \".concat(entry.relation, \" \").concat(entry.toMiddleware));\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {\n      wholeList.push(...expandedMiddlewareList);\n      return wholeList;\n    }, []);\n    return mainChain;\n  };\n  const stack = {\n    add: function (middleware) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        name,\n        override,\n        aliases: _aliases\n      } = options;\n      const entry = _objectSpread({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware\n      }, options);\n      const aliases = getAllAliases(name, _aliases);\n      if (aliases.length > 0) {\n        if (aliases.some(alias => entriesNameSet.has(alias))) {\n          if (!override) throw new Error(\"Duplicate middleware name '\".concat(getMiddlewareNameWithAliases(name, _aliases), \"'\"));\n          for (const alias of aliases) {\n            const toOverrideIndex = absoluteEntries.findIndex(entry => {\n              var _entry$aliases;\n              return entry.name === alias || ((_entry$aliases = entry.aliases) === null || _entry$aliases === void 0 ? void 0 : _entry$aliases.some(a => a === alias));\n            });\n            if (toOverrideIndex === -1) {\n              continue;\n            }\n            const toOverride = absoluteEntries[toOverrideIndex];\n            if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {\n              throw new Error(\"\\\"\".concat(getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases), \"\\\" middleware with \") + \"\".concat(toOverride.priority, \" priority in \").concat(toOverride.step, \" step cannot \") + \"be overridden by \\\"\".concat(getMiddlewareNameWithAliases(name, _aliases), \"\\\" middleware with \") + \"\".concat(entry.priority, \" priority in \").concat(entry.step, \" step.\"));\n            }\n            absoluteEntries.splice(toOverrideIndex, 1);\n          }\n        }\n        for (const alias of aliases) {\n          entriesNameSet.add(alias);\n        }\n      }\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: (middleware, options) => {\n      const {\n        name,\n        override,\n        aliases: _aliases\n      } = options;\n      const entry = _objectSpread({\n        middleware\n      }, options);\n      const aliases = getAllAliases(name, _aliases);\n      if (aliases.length > 0) {\n        if (aliases.some(alias => entriesNameSet.has(alias))) {\n          if (!override) throw new Error(\"Duplicate middleware name '\".concat(getMiddlewareNameWithAliases(name, _aliases), \"'\"));\n          for (const alias of aliases) {\n            const toOverrideIndex = relativeEntries.findIndex(entry => {\n              var _entry$aliases2;\n              return entry.name === alias || ((_entry$aliases2 = entry.aliases) === null || _entry$aliases2 === void 0 ? void 0 : _entry$aliases2.some(a => a === alias));\n            });\n            if (toOverrideIndex === -1) {\n              continue;\n            }\n            const toOverride = relativeEntries[toOverrideIndex];\n            if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n              throw new Error(\"\\\"\".concat(getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases), \"\\\" middleware \") + \"\".concat(toOverride.relation, \" \\\"\").concat(toOverride.toMiddleware, \"\\\" middleware cannot be overridden \") + \"by \\\"\".concat(getMiddlewareNameWithAliases(name, _aliases), \"\\\" middleware \").concat(entry.relation, \" \") + \"\\\"\".concat(entry.toMiddleware, \"\\\" middleware.\"));\n            }\n            relativeEntries.splice(toOverrideIndex, 1);\n          }\n        }\n        for (const alias of aliases) {\n          entriesNameSet.add(alias);\n        }\n      }\n      relativeEntries.push(entry);\n    },\n    clone: () => cloneTo(constructStack()),\n    use: plugin => {\n      plugin.applyToStack(stack);\n    },\n    remove: toRemove => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: toRemove => {\n      let isRemoved = false;\n      const filterCb = entry => {\n        const {\n          tags,\n          name,\n          aliases: _aliases\n        } = entry;\n        if (tags && tags.includes(toRemove)) {\n          const aliases = getAllAliases(name, _aliases);\n          for (const alias of aliases) {\n            entriesNameSet.delete(alias);\n          }\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: from => {\n      var _from$identifyOnResol, _from$identifyOnResol2;\n      const cloned = cloneTo(constructStack());\n      cloned.use(from);\n      cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || ((_from$identifyOnResol = (_from$identifyOnResol2 = from.identifyOnResolve) === null || _from$identifyOnResol2 === void 0 ? void 0 : _from$identifyOnResol2.call(from)) !== null && _from$identifyOnResol !== void 0 ? _from$identifyOnResol : false));\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    identify: () => {\n      return getMiddlewareList(true).map(mw => {\n        var _mw$step;\n        const step = (_mw$step = mw.step) !== null && _mw$step !== void 0 ? _mw$step : mw.relation + \" \" + mw.toMiddleware;\n        return getMiddlewareNameWithAliases(mw.name, mw.aliases) + \" - \" + step;\n      });\n    },\n    identifyOnResolve(toggle) {\n      if (typeof toggle === \"boolean\") identifyOnResolve = toggle;\n      return identifyOnResolve;\n    },\n    resolve: (handler, context) => {\n      for (const middleware of getMiddlewareList().map(entry => entry.middleware).reverse()) {\n        handler = middleware(handler, context);\n      }\n      if (identifyOnResolve) {\n        console.log(stack.identify());\n      }\n      return handler;\n    }\n  };\n  return stack;\n};\nconst stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nconst priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"names":["getAllAliases","name","aliases","_aliases","push","alias","getMiddlewareNameWithAliases","concat","length","join","constructStack","absoluteEntries","relativeEntries","identifyOnResolve","entriesNameSet","Set","sort","entries","a","b","stepWeights","step","priorityWeights","priority","removeByName","toRemove","isRemoved","filterCb","entry","includes","delete","filter","removeByReference","middleware","cloneTo","toStack","_toStack$identifyOnRe","forEach","add","_objectSpread","addRelativeTo","call","stack","expandRelativeMiddlewareList","from","expandedMiddlewareList","before","after","reverse","getMiddlewareList","debug","arguments","undefined","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","toMiddleware","Error","relation","mainChain","map","reduce","wholeList","options","override","some","has","toOverrideIndex","findIndex","_entry$aliases","toOverride","splice","_entry$aliases2","clone","use","plugin","applyToStack","remove","removeByTag","tags","_from$identifyOnResol","_from$identifyOnResol2","cloned","identify","mw","_mw$step","toggle","resolve","handler","context","console","log","initialize","serialize","build","finalizeRequest","deserialize","high","normal","low"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"],"sourcesContent":["const getAllAliases = (name, aliases) => {\n    const _aliases = [];\n    if (name) {\n        _aliases.push(name);\n    }\n    if (aliases) {\n        for (const alias of aliases) {\n            _aliases.push(alias);\n        }\n    }\n    return _aliases;\n};\nconst getMiddlewareNameWithAliases = (name, aliases) => {\n    return `${name || \"anonymous\"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(\",\")})` : \"\"}`;\n};\nexport const constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    let identifyOnResolve = false;\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            const aliases = getAllAliases(entry.name, entry.aliases);\n            if (aliases.includes(toRemove)) {\n                isRemoved = true;\n                for (const alias of aliases) {\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                for (const alias of getAllAliases(entry.name, entry.aliases)) {\n                    entriesNameSet.delete(alias);\n                }\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        toStack.identifyOnResolve?.(stack.identifyOnResolve());\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {\n                normalizedEntriesNameMap[alias] = normalizedEntry;\n            }\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ` +\n                        `${getMiddlewareNameWithAliases(entry.name, entry.aliases)} ` +\n                        `middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expandedMiddlewareList) => {\n            wholeList.push(...expandedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias) => entriesNameSet.has(alias))) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases) {\n                        const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = absoluteEntries[toOverrideIndex];\n                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware with ` +\n                                `${toOverride.priority} priority in ${toOverride.step} step cannot ` +\n                                `be overridden by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware with ` +\n                                `${entry.priority} priority in ${entry.step} step.`);\n                        }\n                        absoluteEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases) {\n                    entriesNameSet.add(alias);\n                }\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override, aliases: _aliases } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            const aliases = getAllAliases(name, _aliases);\n            if (aliases.length > 0) {\n                if (aliases.some((alias) => entriesNameSet.has(alias))) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);\n                    for (const alias of aliases) {\n                        const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));\n                        if (toOverrideIndex === -1) {\n                            continue;\n                        }\n                        const toOverride = relativeEntries[toOverrideIndex];\n                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                            throw new Error(`\"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}\" middleware ` +\n                                `${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                                `by \"${getMiddlewareNameWithAliases(name, _aliases)}\" middleware ${entry.relation} ` +\n                                `\"${entry.toMiddleware}\" middleware.`);\n                        }\n                        relativeEntries.splice(toOverrideIndex, 1);\n                    }\n                }\n                for (const alias of aliases) {\n                    entriesNameSet.add(alias);\n                }\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name, aliases: _aliases } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    const aliases = getAllAliases(name, _aliases);\n                    for (const alias of aliases) {\n                        entriesNameSet.delete(alias);\n                    }\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                const step = mw.step ??\n                    mw.relation +\n                        \" \" +\n                        mw.toMiddleware;\n                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + \" - \" + step;\n            });\n        },\n        identifyOnResolve(toggle) {\n            if (typeof toggle === \"boolean\")\n                identifyOnResolve = toggle;\n            return identifyOnResolve;\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            if (identifyOnResolve) {\n                console.log(stack.identify());\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
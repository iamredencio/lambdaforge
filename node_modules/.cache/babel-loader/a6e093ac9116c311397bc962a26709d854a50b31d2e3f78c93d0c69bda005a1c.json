{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Play,Download,Clock,DollarSign,CheckCircle,Zap,TrendingUp,Shield,Monitor,FileText,Package}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const GenerateStep=_ref=>{let{formData,prevStep,currentStep,totalSteps}=_ref;const[isGenerating,setIsGenerating]=useState(false);const[progress,setProgress]=useState(0);const[currentTask,setCurrentTask]=useState('');const[estimatedCost,setEstimatedCost]=useState(0);const[generatedResources,setGeneratedResources]=useState([]);const[deploymentStatus,setDeploymentStatus]=useState('ready');// ready, generating, completed, error\nconst[generatedFiles,setGeneratedFiles]=useState(null);const[isExporting,setIsExporting]=useState(false);// Calculate estimated monthly cost based on selections\nuseEffect(()=>{var _formData$selectedInf,_formData$selectedInf2,_formData$selectedInf3,_formData$selectedInf4,_formData$selectedInf5,_formData$selectedCom,_formData$selectedCom2,_formData$selectedCom3,_formData$selectedCom4,_formData$selectedInt,_formData$selectedInt2,_formData$selectedInt3,_formData$selectedInt4,_formData$selectedSec,_formData$selectedSec2,_formData$selectedSec3,_formData$selectedMon,_formData$selectedMon2,_formData$selectedMon3;let cost=0;// Infrastructure costs\nif((_formData$selectedInf=formData.selectedInfrastructure)!==null&&_formData$selectedInf!==void 0&&_formData$selectedInf.includes('s3-bucket'))cost+=23;if((_formData$selectedInf2=formData.selectedInfrastructure)!==null&&_formData$selectedInf2!==void 0&&_formData$selectedInf2.includes('dynamodb'))cost+=45;if((_formData$selectedInf3=formData.selectedInfrastructure)!==null&&_formData$selectedInf3!==void 0&&_formData$selectedInf3.includes('rds-database'))cost+=85;if((_formData$selectedInf4=formData.selectedInfrastructure)!==null&&_formData$selectedInf4!==void 0&&_formData$selectedInf4.includes('vpc-networking'))cost+=15;if((_formData$selectedInf5=formData.selectedInfrastructure)!==null&&_formData$selectedInf5!==void 0&&_formData$selectedInf5.includes('ebs-volumes'))cost+=30;// Compute costs\nif((_formData$selectedCom=formData.selectedCompute)!==null&&_formData$selectedCom!==void 0&&_formData$selectedCom.includes('lambda-functions'))cost+=12;if((_formData$selectedCom2=formData.selectedCompute)!==null&&_formData$selectedCom2!==void 0&&_formData$selectedCom2.includes('ec2-instances'))cost+=120;if((_formData$selectedCom3=formData.selectedCompute)!==null&&_formData$selectedCom3!==void 0&&_formData$selectedCom3.includes('ecs-containers'))cost+=95;if((_formData$selectedCom4=formData.selectedCompute)!==null&&_formData$selectedCom4!==void 0&&_formData$selectedCom4.includes('fargate-serverless'))cost+=75;// Integration costs\nif((_formData$selectedInt=formData.selectedIntegration)!==null&&_formData$selectedInt!==void 0&&_formData$selectedInt.includes('api-gateway'))cost+=25;if((_formData$selectedInt2=formData.selectedIntegration)!==null&&_formData$selectedInt2!==void 0&&_formData$selectedInt2.includes('eventbridge'))cost+=8;if((_formData$selectedInt3=formData.selectedIntegration)!==null&&_formData$selectedInt3!==void 0&&_formData$selectedInt3.includes('step-functions'))cost+=15;if((_formData$selectedInt4=formData.selectedIntegration)!==null&&_formData$selectedInt4!==void 0&&_formData$selectedInt4.includes('sns-notifications'))cost+=5;// Security costs\nif((_formData$selectedSec=formData.selectedSecurity)!==null&&_formData$selectedSec!==void 0&&_formData$selectedSec.includes('kms-encryption'))cost+=12;if((_formData$selectedSec2=formData.selectedSecurity)!==null&&_formData$selectedSec2!==void 0&&_formData$selectedSec2.includes('secrets-manager'))cost+=8;if((_formData$selectedSec3=formData.selectedSecurity)!==null&&_formData$selectedSec3!==void 0&&_formData$selectedSec3.includes('waf-protection'))cost+=35;// Monitoring costs\nif((_formData$selectedMon=formData.selectedMonitoring)!==null&&_formData$selectedMon!==void 0&&_formData$selectedMon.includes('cloudwatch'))cost+=18;if((_formData$selectedMon2=formData.selectedMonitoring)!==null&&_formData$selectedMon2!==void 0&&_formData$selectedMon2.includes('x-ray-tracing'))cost+=22;if((_formData$selectedMon3=formData.selectedMonitoring)!==null&&_formData$selectedMon3!==void 0&&_formData$selectedMon3.includes('cloudtrail'))cost+=10;setEstimatedCost(cost);},[formData]);// File generation functions\nconst generateCloudFormationTemplate=()=>{const projectName=formData.projectName||'lambdaforge-project';const environment=formData.environment||'Development';// Generate YAML format instead of JSON\nconst yamlTemplate=\"AWSTemplateFormatVersion: '2010-09-09'\\nDescription: '\".concat(projectName,\" - Generated by LambdaForge'\\n\\nParameters:\\n  ProjectName:\\n    Type: String\\n    Default: \").concat(projectName,\"\\n    Description: Name of the project\\n  Environment:\\n    Type: String\\n    Default: \").concat(environment,\"\\n    AllowedValues:\\n      - Development\\n      - Staging\\n      - Production\\n    Description: Environment type\\n\\nResources:\\n\").concat(generateResourcesYAML(),\"\\n\\nOutputs:\\n\").concat(generateOutputsYAML());return yamlTemplate;};const generateResources=()=>{var _formData$selectedInf6,_formData$selectedInf7,_formData$selectedCom5,_formData$selectedInt5,_formData$selectedMon4;const resources={};// Infrastructure Resources\nif((_formData$selectedInf6=formData.selectedInfrastructure)!==null&&_formData$selectedInf6!==void 0&&_formData$selectedInf6.includes('s3-bucket')){resources.S3Bucket={Type:'AWS::S3::Bucket',Properties:{BucketName:{'Fn::Sub':'${ProjectName}-storage-${AWS::AccountId}'},VersioningConfiguration:{Status:'Enabled'},PublicAccessBlockConfiguration:{BlockPublicAcls:true,BlockPublicPolicy:true,IgnorePublicAcls:true,RestrictPublicBuckets:true},Tags:[{Key:'Project',Value:{Ref:'ProjectName'}},{Key:'Environment',Value:{Ref:'Environment'}}]}};}if((_formData$selectedInf7=formData.selectedInfrastructure)!==null&&_formData$selectedInf7!==void 0&&_formData$selectedInf7.includes('dynamodb')){resources.DynamoDBTable={Type:'AWS::DynamoDB::Table',Properties:{TableName:{'Fn::Sub':'${ProjectName}-data'},AttributeDefinitions:[{AttributeName:'id',AttributeType:'S'}],KeySchema:[{AttributeName:'id',KeyType:'HASH'}],BillingMode:'PAY_PER_REQUEST',PointInTimeRecoverySpecification:{PointInTimeRecoveryEnabled:true},Tags:[{Key:'Project',Value:{Ref:'ProjectName'}},{Key:'Environment',Value:{Ref:'Environment'}}]}};}// Compute Resources\nif((_formData$selectedCom5=formData.selectedCompute)!==null&&_formData$selectedCom5!==void 0&&_formData$selectedCom5.includes('lambda-functions')){resources.LambdaExecutionRole={Type:'AWS::IAM::Role',Properties:{RoleName:{'Fn::Sub':'${ProjectName}-lambda-role'},AssumeRolePolicyDocument:{Version:'2012-10-17',Statement:[{Effect:'Allow',Principal:{Service:'lambda.amazonaws.com'},Action:'sts:AssumeRole'}]},ManagedPolicyArns:['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],Tags:[{Key:'Project',Value:{Ref:'ProjectName'}},{Key:'Environment',Value:{Ref:'Environment'}}]}};resources.LambdaFunction={Type:'AWS::Lambda::Function',Properties:{FunctionName:{'Fn::Sub':'${ProjectName}-function'},Runtime:'nodejs18.x',Handler:'index.handler',Role:{'Fn::GetAtt':['LambdaExecutionRole','Arn']},Code:{ZipFile:\"exports.handler = async (event) => {\\n    console.log('Event:', JSON.stringify(event, null, 2));\\n    \\n    const response = {\\n        statusCode: 200,\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Access-Control-Allow-Origin': '*'\\n        },\\n        body: JSON.stringify({\\n            message: 'Hello from \".concat(formData.projectName||'LambdaForge',\"!',\\n            timestamp: new Date().toISOString(),\\n            environment: '\").concat(formData.environment||'Development',\"'\\n        })\\n    };\\n    \\n    return response;\\n};\")},Environment:{Variables:{PROJECT_NAME:{Ref:'ProjectName'},ENVIRONMENT:{Ref:'Environment'}}},Tags:[{Key:'Project',Value:{Ref:'ProjectName'}},{Key:'Environment',Value:{Ref:'Environment'}}]}};}// Integration Resources\nif((_formData$selectedInt5=formData.selectedIntegration)!==null&&_formData$selectedInt5!==void 0&&_formData$selectedInt5.includes('api-gateway')){var _formData$selectedCom6;resources.ApiGateway={Type:'AWS::ApiGateway::RestApi',Properties:{Name:{'Fn::Sub':'${ProjectName}-api'},Description:\"API for \".concat(formData.projectName||'LambdaForge Project'),EndpointConfiguration:{Types:['REGIONAL']},Tags:[{Key:'Project',Value:{Ref:'ProjectName'}},{Key:'Environment',Value:{Ref:'Environment'}}]}};if((_formData$selectedCom6=formData.selectedCompute)!==null&&_formData$selectedCom6!==void 0&&_formData$selectedCom6.includes('lambda-functions')){resources.ApiGatewayResource={Type:'AWS::ApiGateway::Resource',Properties:{RestApiId:{Ref:'ApiGateway'},ParentId:{'Fn::GetAtt':['ApiGateway','RootResourceId']},PathPart:'api'}};resources.ApiGatewayMethod={Type:'AWS::ApiGateway::Method',Properties:{RestApiId:{Ref:'ApiGateway'},ResourceId:{Ref:'ApiGatewayResource'},HttpMethod:'ANY',AuthorizationType:'NONE',Integration:{Type:'AWS_PROXY',IntegrationHttpMethod:'POST',Uri:{'Fn::Sub':'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'}}}};resources.ApiGatewayDeployment={Type:'AWS::ApiGateway::Deployment',DependsOn:['ApiGatewayMethod'],Properties:{RestApiId:{Ref:'ApiGateway'},StageName:{Ref:'Environment'}}};resources.LambdaApiGatewayPermission={Type:'AWS::Lambda::Permission',Properties:{FunctionName:{Ref:'LambdaFunction'},Action:'lambda:InvokeFunction',Principal:'apigateway.amazonaws.com',SourceArn:{'Fn::Sub':'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${Environment}/*/*'}}};}}// Monitoring Resources\nif((_formData$selectedMon4=formData.selectedMonitoring)!==null&&_formData$selectedMon4!==void 0&&_formData$selectedMon4.includes('cloudwatch')){resources.LogGroup={Type:'AWS::Logs::LogGroup',Properties:{LogGroupName:{'Fn::Sub':'/aws/lambda/${ProjectName}-logs'},RetentionInDays:14,Tags:[{Key:'Project',Value:{Ref:'ProjectName'}},{Key:'Environment',Value:{Ref:'Environment'}}]}};}return resources;};const generateOutputs=()=>{var _formData$selectedInf8,_formData$selectedCom7,_formData$selectedInt6;const outputs={};if((_formData$selectedInf8=formData.selectedInfrastructure)!==null&&_formData$selectedInf8!==void 0&&_formData$selectedInf8.includes('s3-bucket')){outputs.S3BucketName={Description:'S3 Bucket Name',Value:{Ref:'S3Bucket'},Export:{Name:{'Fn::Sub':'${ProjectName}-s3-bucket'}}};}if((_formData$selectedCom7=formData.selectedCompute)!==null&&_formData$selectedCom7!==void 0&&_formData$selectedCom7.includes('lambda-functions')){outputs.LambdaFunctionArn={Description:'Lambda Function ARN',Value:{'Fn::GetAtt':['LambdaFunction','Arn']},Export:{Name:{'Fn::Sub':'${ProjectName}-lambda-arn'}}};}if((_formData$selectedInt6=formData.selectedIntegration)!==null&&_formData$selectedInt6!==void 0&&_formData$selectedInt6.includes('api-gateway')){outputs.ApiEndpoint={Description:'API Gateway endpoint URL',Value:{'Fn::Sub':'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'},Export:{Name:{'Fn::Sub':'${ProjectName}-api-endpoint'}}};}return outputs;};// YAML generation functions for proper CloudFormation format\nconst generateResourcesYAML=()=>{var _formData$selectedInf9,_formData$selectedInf0,_formData$selectedCom8,_formData$selectedInt7,_formData$selectedMon5;let yamlResources='';// Infrastructure Resources\nif((_formData$selectedInf9=formData.selectedInfrastructure)!==null&&_formData$selectedInf9!==void 0&&_formData$selectedInf9.includes('s3-bucket')){yamlResources+=\"  # S3 Bucket with versioning and static website hosting\\n  S3Bucket:\\n    Type: AWS::S3::Bucket\\n    Properties:\\n      BucketName: !Sub '${ProjectName}-storage-${AWS::AccountId}'\\n      VersioningConfiguration:\\n        Status: Enabled\\n      WebsiteConfiguration:\\n        IndexDocument: index.html\\n        ErrorDocument: error.html\\n      PublicAccessBlockConfiguration:\\n        BlockPublicAcls: false\\n        BlockPublicPolicy: false\\n        IgnorePublicAcls: false\\n        RestrictPublicBuckets: false\\n      Tags:\\n        - Key: Project\\n          Value: !Ref ProjectName\\n        - Key: Environment\\n          Value: !Ref Environment\\n\\n  # S3 Bucket Policy for static website hosting\\n  S3BucketPolicy:\\n    Type: AWS::S3::BucketPolicy\\n    Properties:\\n      Bucket: !Ref S3Bucket\\n      PolicyDocument:\\n        Statement:\\n          - Effect: Allow\\n            Principal: '*'\\n            Action: s3:GetObject\\n            Resource: !Sub '${S3Bucket}/*'\\n\\n\";}if((_formData$selectedInf0=formData.selectedInfrastructure)!==null&&_formData$selectedInf0!==void 0&&_formData$selectedInf0.includes('dynamodb')){yamlResources+=\"  # DynamoDB Table\\n  DynamoDBTable:\\n    Type: AWS::DynamoDB::Table\\n    Properties:\\n      TableName: !Sub '${ProjectName}-data'\\n      AttributeDefinitions:\\n        - AttributeName: id\\n          AttributeType: S\\n      KeySchema:\\n        - AttributeName: id\\n          KeyType: HASH\\n      BillingMode: PAY_PER_REQUEST\\n      PointInTimeRecoverySpecification:\\n        PointInTimeRecoveryEnabled: true\\n      Tags:\\n        - Key: Project\\n          Value: !Ref ProjectName\\n        - Key: Environment\\n          Value: !Ref Environment\\n\\n\";}// Compute Resources - Fixed IAM role without custom naming\nif((_formData$selectedCom8=formData.selectedCompute)!==null&&_formData$selectedCom8!==void 0&&_formData$selectedCom8.includes('lambda-functions')){yamlResources+=\"  # Lambda Execution Role (no custom name to avoid conflicts)\\n  LambdaExecutionRole:\\n    Type: AWS::IAM::Role\\n    Properties:\\n      AssumeRolePolicyDocument:\\n        Version: '2012-10-17'\\n        Statement:\\n          - Effect: Allow\\n            Principal:\\n              Service: lambda.amazonaws.com\\n            Action: sts:AssumeRole\\n      ManagedPolicyArns:\\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\\n      Tags:\\n        - Key: Project\\n          Value: !Ref ProjectName\\n        - Key: Environment\\n          Value: !Ref Environment\\n\\n  # Lambda Function\\n  LambdaFunction:\\n    Type: AWS::Lambda::Function\\n    Properties:\\n      FunctionName: !Sub '${ProjectName}-function'\\n      Runtime: nodejs18.x\\n      Handler: index.handler\\n      Role: !GetAtt LambdaExecutionRole.Arn\\n      Code:\\n        ZipFile: |\\n          exports.handler = async (event) => {\\n              console.log('Event:', JSON.stringify(event, null, 2));\\n              \\n              const response = {\\n                  statusCode: 200,\\n                  headers: {\\n                      'Content-Type': 'application/json',\\n                      'Access-Control-Allow-Origin': '*'\\n                  },\\n                  body: JSON.stringify({\\n                      message: 'Hello from \".concat(formData.projectName||'LambdaForge',\"!',\\n                      timestamp: new Date().toISOString(),\\n                      environment: process.env.ENVIRONMENT || 'Development'\\n                  })\\n              };\\n              \\n              return response;\\n          };\\n      Environment:\\n        Variables:\\n          PROJECT_NAME: !Ref ProjectName\\n          ENVIRONMENT: !Ref Environment\\n      Tags:\\n        - Key: Project\\n          Value: !Ref ProjectName\\n        - Key: Environment\\n          Value: !Ref Environment\\n\\n\");}// Integration Resources\nif((_formData$selectedInt7=formData.selectedIntegration)!==null&&_formData$selectedInt7!==void 0&&_formData$selectedInt7.includes('api-gateway')){var _formData$selectedCom9;yamlResources+=\"  # API Gateway\\n  ApiGateway:\\n    Type: AWS::ApiGateway::RestApi\\n    Properties:\\n      Name: !Sub '${ProjectName}-api'\\n      Description: !Sub 'API for ${ProjectName}'\\n      EndpointConfiguration:\\n        Types:\\n          - REGIONAL\\n      Tags:\\n        - Key: Project\\n          Value: !Ref ProjectName\\n        - Key: Environment\\n          Value: !Ref Environment\\n\\n\";if((_formData$selectedCom9=formData.selectedCompute)!==null&&_formData$selectedCom9!==void 0&&_formData$selectedCom9.includes('lambda-functions')){yamlResources+=\"  # API Gateway Resource\\n  ApiGatewayResource:\\n    Type: AWS::ApiGateway::Resource\\n    Properties:\\n      RestApiId: !Ref ApiGateway\\n      ParentId: !GetAtt ApiGateway.RootResourceId\\n      PathPart: api\\n\\n  # API Gateway Method\\n  ApiGatewayMethod:\\n    Type: AWS::ApiGateway::Method\\n    Properties:\\n      RestApiId: !Ref ApiGateway\\n      ResourceId: !Ref ApiGatewayResource\\n      HttpMethod: ANY\\n      AuthorizationType: NONE\\n      Integration:\\n        Type: AWS_PROXY\\n        IntegrationHttpMethod: POST\\n        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'\\n\\n  # API Gateway Deployment\\n  ApiGatewayDeployment:\\n    Type: AWS::ApiGateway::Deployment\\n    DependsOn:\\n      - ApiGatewayMethod\\n    Properties:\\n      RestApiId: !Ref ApiGateway\\n      StageName: !Ref Environment\\n\\n  # Lambda Permission for API Gateway\\n  LambdaApiGatewayPermission:\\n    Type: AWS::Lambda::Permission\\n    Properties:\\n      FunctionName: !Ref LambdaFunction\\n      Action: lambda:InvokeFunction\\n      Principal: apigateway.amazonaws.com\\n      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${Environment}/*/*'\\n\\n\";}}// Monitoring Resources\nif((_formData$selectedMon5=formData.selectedMonitoring)!==null&&_formData$selectedMon5!==void 0&&_formData$selectedMon5.includes('cloudwatch')){yamlResources+=\"  # CloudWatch Log Group\\n  LogGroup:\\n    Type: AWS::Logs::LogGroup\\n    Properties:\\n      LogGroupName: !Sub '/aws/lambda/${ProjectName}-logs'\\n      RetentionInDays: 14\\n      Tags:\\n        - Key: Project\\n          Value: !Ref ProjectName\\n        - Key: Environment\\n          Value: !Ref Environment\\n\\n\";}return yamlResources||'  # No resources selected';};const generateOutputsYAML=()=>{var _formData$selectedInf1,_formData$selectedInf10,_formData$selectedCom0,_formData$selectedInt8,_formData$selectedMon6;let yamlOutputs='';if((_formData$selectedInf1=formData.selectedInfrastructure)!==null&&_formData$selectedInf1!==void 0&&_formData$selectedInf1.includes('s3-bucket')){yamlOutputs+=\"  S3BucketName:\\n    Description: S3 Bucket Name\\n    Value: !Ref S3Bucket\\n    Export:\\n      Name: !Sub '${ProjectName}-s3-bucket'\\n  S3BucketConsoleLink:\\n    Description: S3 Bucket Console Link\\n    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/s3/buckets/${S3Bucket}'\\n  S3WebsiteURL:\\n    Description: S3 Static Website URL\\n    Value: !Sub 'http://${S3Bucket}.s3-website-${AWS::Region}.amazonaws.com'\\n    Export:\\n      Name: !Sub '${ProjectName}-website-url'\\n\\n\";}if((_formData$selectedInf10=formData.selectedInfrastructure)!==null&&_formData$selectedInf10!==void 0&&_formData$selectedInf10.includes('dynamodb')){yamlOutputs+=\"  DynamoDBTableName:\\n    Description: DynamoDB Table Name\\n    Value: !Ref DynamoDBTable\\n    Export:\\n      Name: !Sub '${ProjectName}-dynamodb-table'\\n  DynamoDBConsoleLink:\\n    Description: DynamoDB Console Link\\n    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#table?name=${DynamoDBTable}'\\n\\n\";}if((_formData$selectedCom0=formData.selectedCompute)!==null&&_formData$selectedCom0!==void 0&&_formData$selectedCom0.includes('lambda-functions')){yamlOutputs+=\"  LambdaFunctionArn:\\n    Description: Lambda Function ARN\\n    Value: !GetAtt LambdaFunction.Arn\\n    Export:\\n      Name: !Sub '${ProjectName}-lambda-arn'\\n  LambdaConsoleLink:\\n    Description: Lambda Function Console Link\\n    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${LambdaFunction}'\\n\\n\";}if((_formData$selectedInt8=formData.selectedIntegration)!==null&&_formData$selectedInt8!==void 0&&_formData$selectedInt8.includes('api-gateway')){yamlOutputs+=\"  ApiEndpoint:\\n    Description: API Gateway endpoint URL\\n    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'\\n    Export:\\n      Name: !Sub '${ProjectName}-api-endpoint'\\n  ApiGatewayConsoleLink:\\n    Description: API Gateway Console Link\\n    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ApiGateway}'\\n\\n\";}if((_formData$selectedMon6=formData.selectedMonitoring)!==null&&_formData$selectedMon6!==void 0&&_formData$selectedMon6.includes('cloudwatch')){yamlOutputs+=\"  LogGroupName:\\n    Description: CloudWatch Log Group Name\\n    Value: !Ref LogGroup\\n    Export:\\n      Name: !Sub '${ProjectName}-log-group'\\n  CloudWatchConsoleLink:\\n    Description: CloudWatch Logs Console Link\\n    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:log-groups/log-group/${LogGroup}'\\n\\n\";}yamlOutputs+=\"  CloudFormationConsoleLink:\\n    Description: CloudFormation Stack Console Link\\n    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stacks/stackinfo?stackId=${AWS::StackName}'\\n\\n  DeploymentRegion:\\n    Description: AWS Region where resources are deployed\\n    Value: !Ref AWS::Region\\n\\n\";return yamlOutputs;};const generateDeploymentScript=()=>{const projectName=formData.projectName||'lambdaforge-project';const environment=formData.environment||'Development';return\"#!/bin/bash\\n\\n# \".concat(projectName,\" Deployment Script\\n# Generated by LambdaForge on \").concat(new Date().toISOString(),\"\\n\\nset -e\\n\\n# Configuration\\nPROJECT_NAME=\\\"\").concat(projectName,\"\\\"\\nENVIRONMENT=\\\"\").concat(environment,\"\\\"\\n# Auto-detect AWS region from AWS CLI configuration\\nAWS_REGION=$(aws configure get region)\\nif [ -z \\\"$AWS_REGION\\\" ]; then\\n    echo \\\"\\u26A0\\uFE0F  No default region configured. Using us-east-1\\\"\\n    AWS_REGION=\\\"us-east-1\\\"\\nfi\\nSTACK_NAME=\\\"${PROJECT_NAME}-stack\\\"\\n\\n# Colors for output\\nRED='\\\\033[0;31m'\\nGREEN='\\\\033[0;32m'\\nYELLOW='\\\\033[1;33m'\\nBLUE='\\\\033[0;34m'\\nNC='\\\\033[0m'\\n\\nprint_status() {\\n    echo -e \\\"${BLUE}[INFO]${NC} $1\\\"\\n}\\n\\nprint_success() {\\n    echo -e \\\"${GREEN}[SUCCESS]${NC} $1\\\"\\n}\\n\\nprint_error() {\\n    echo -e \\\"${RED}[ERROR]${NC} $1\\\"\\n}\\n\\nprint_warning() {\\n    echo -e \\\"${YELLOW}[WARNING]${NC} $1\\\"\\n}\\n\\n# Check prerequisites\\ncheck_prerequisites() {\\n    print_status \\\"Checking prerequisites...\\\"\\n    \\n    # Check AWS CLI\\n    if ! command -v aws &> /dev/null; then\\n        print_error \\\"AWS CLI is not installed. Please install it first.\\\"\\n        exit 1\\n    fi\\n    \\n    # Check AWS credentials\\n    if ! aws sts get-caller-identity &> /dev/null; then\\n        print_error \\\"AWS credentials not configured. Run 'aws configure' first.\\\"\\n        exit 1\\n    fi\\n    \\n    print_success \\\"Prerequisites check passed\\\"\\n}\\n\\n# Check web application configuration\\ncheck_web_app_config() {\\n    if [ -n \\\"$WEB_APP_LOCAL_PATH\\\" ] && [ -n \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        print_error \\\"Cannot specify both local path and GitHub repo. Choose one.\\\"\\n        exit 1\\n    fi\\n    \\n    if [ -n \\\"$WEB_APP_LOCAL_PATH\\\" ]; then\\n        if [ ! -d \\\"$WEB_APP_LOCAL_PATH\\\" ]; then\\n            print_error \\\"Local web app path does not exist: $WEB_APP_LOCAL_PATH\\\"\\n            exit 1\\n        fi\\n        print_status \\\"Web app source: Local folder ($WEB_APP_LOCAL_PATH)\\\"\\n    elif [ -n \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        print_status \\\"Web app source: GitHub repository ($WEB_APP_GITHUB_REPO)\\\"\\n    else\\n        print_warning \\\"No web app source specified. Only AWS infrastructure will be created.\\\"\\n        print_status \\\"To deploy a web app, set WEB_APP_LOCAL_PATH or WEB_APP_GITHUB_REPO in this script.\\\"\\n    fi\\n}\\n\\n# Build and package web application\\nbuild_web_app() {\\n    if [ -z \\\"$WEB_APP_LOCAL_PATH\\\" ] && [ -z \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        print_status \\\"Skipping web app build - no source specified\\\"\\n        return 0\\n    fi\\n    \\n    print_status \\\"Building web application...\\\"\\n    \\n    # Create temporary build directory\\n    BUILD_DIR=\\\"$(mktemp -d)\\\"\\n    print_status \\\"Using build directory: $BUILD_DIR\\\"\\n    \\n    if [ -n \\\"$WEB_APP_LOCAL_PATH\\\" ]; then\\n        # Copy from local path\\n        print_status \\\"Copying from local path...\\\"\\n        cp -r \\\"$WEB_APP_LOCAL_PATH\\\"/* \\\"$BUILD_DIR/\\\"\\n    elif [ -n \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        # Clone from GitHub\\n        print_status \\\"Cloning from GitHub...\\\"\\n        git clone \\\"$WEB_APP_GITHUB_REPO\\\" \\\"$BUILD_DIR\\\"\\n    fi\\n    \\n    # Build the application\\n    cd \\\"$BUILD_DIR\\\"\\n    \\n    if [ -f \\\"package.json\\\" ]; then\\n        print_status \\\"Installing dependencies...\\\"\\n        npm install\\n        \\n        print_status \\\"Building application...\\\"\\n        npm run build\\n        \\n        if [ -d \\\"build\\\" ]; then\\n            BUILT_APP_PATH=\\\"$BUILD_DIR/build\\\"\\n        elif [ -d \\\"dist\\\" ]; then\\n            BUILT_APP_PATH=\\\"$BUILD_DIR/dist\\\"\\n        else\\n            print_error \\\"Build directory not found. Expected 'build' or 'dist' folder.\\\"\\n            exit 1\\n        fi\\n    else\\n        print_status \\\"No package.json found, assuming static files\\\"\\n        BUILT_APP_PATH=\\\"$BUILD_DIR\\\"\\n    fi\\n    \\n    print_success \\\"Web application built successfully\\\"\\n    echo \\\"Built app location: $BUILT_APP_PATH\\\"\\n}\\n\\n# Deploy web application to S3\\ndeploy_web_app() {\\n    if [ -z \\\"$BUILT_APP_PATH\\\" ]; then\\n        print_status \\\"Skipping web app deployment - no built app\\\"\\n        return 0\\n    fi\\n    \\n    print_status \\\"Deploying web application to S3...\\\"\\n    \\n    # Get S3 bucket name from CloudFormation outputs\\n    S3_BUCKET=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \\\\\\n        --output text)\\n    \\n    if [ -z \\\"$S3_BUCKET\\\" ] || [ \\\"$S3_BUCKET\\\" = \\\"None\\\" ]; then\\n        print_warning \\\"No S3 bucket found in stack outputs. Skipping web app deployment.\\\"\\n        return 0\\n    fi\\n    \\n    print_status \\\"Uploading to S3 bucket: $S3_BUCKET\\\"\\n    \\n    # Upload files to S3\\n    aws s3 sync \\\"$BUILT_APP_PATH\\\" \\\"s3://$S3_BUCKET\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --delete\\n    \\n    # Configure S3 for static website hosting\\n    aws s3 website \\\"s3://$S3_BUCKET\\\" \\\\\\n        --index-document index.html \\\\\\n        --error-document error.html \\\\\\n        --region \\\"$AWS_REGION\\\"\\n    \\n    # Get website URL\\n    WEBSITE_URL=\\\"http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com\\\"\\n    \\n    print_success \\\"Web application deployed successfully!\\\"\\n    echo \\\"\\\"\\n    print_success \\\"\\uD83C\\uDF10 Your web application is available at:\\\"\\n    echo \\\"   $WEBSITE_URL\\\"\\n    echo \\\"\\\"\\n}\\n\\n# Deploy or update the CloudFormation stack\\ndeploy_stack() {\\n    print_status \\\"Checking if stack exists...\\\"\\n    \\n    if aws cloudformation describe-stacks --stack-name \\\"$STACK_NAME\\\" --region \\\"$AWS_REGION\\\" &>/dev/null; then\\n        print_status \\\"Stack exists. Updating...\\\"\\n        OPERATION=\\\"update-stack\\\"\\n    else\\n        print_status \\\"Stack does not exist. Creating...\\\"\\n        OPERATION=\\\"create-stack\\\"\\n    fi\\n    \\n    print_status \\\"Deploying CloudFormation stack...\\\"\\n    print_status \\\"Stack Name: $STACK_NAME\\\"\\n    print_status \\\"Region: $AWS_REGION\\\"\\n    print_status \\\"Template: template.yaml\\\"\\n    \\n    # Deploy the stack\\n    aws cloudformation $OPERATION \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --template-body file://template.yaml \\\\\\n        --capabilities CAPABILITY_IAM \\\\\\n        --region \\\"$AWS_REGION\\\"\\n    \\n    if [ $? -ne 0 ]; then\\n        print_error \\\"Failed to create/update the stack\\\"\\n        exit 1\\n    fi\\n    \\n    print_status \\\"Waiting for stack operation to complete...\\\"\\n    print_status \\\"This may take several minutes...\\\"\\n    \\n    # Wait for the operation to complete\\n    if [ \\\"$OPERATION\\\" = \\\"create-stack\\\" ]; then\\n        WAIT_CONDITION=\\\"stack-create-complete\\\"\\n    else\\n        WAIT_CONDITION=\\\"stack-update-complete\\\"\\n    fi\\n    \\n    if aws cloudformation wait $WAIT_CONDITION --stack-name \\\"$STACK_NAME\\\" --region \\\"$AWS_REGION\\\"; then\\n        print_success \\\"Stack operation completed successfully! \\uD83C\\uDF89\\\"\\n    else\\n        print_error \\\"Stack operation failed or timed out\\\"\\n        print_status \\\"Check the CloudFormation console for details:\\\"\\n        echo \\\"https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks\\\"\\n        exit 1\\n    fi\\n}\\n\\n# Show deployment results\\nshow_results() {\\n    print_success \\\"\\uD83C\\uDF89 Deployment completed successfully!\\\"\\n    echo \\\"\\\"\\n    print_status \\\"\\uD83D\\uDCCB Resource Summary:\\\"\\n    \\n    # Get stack outputs\\n    aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \\\\\\n        --output table\\n    \\n    echo \\\"\\\"\\n    print_status \\\"\\uD83D\\uDD17 AWS Console Links:\\\"\\n    \\n    # CloudFormation Console\\n    echo \\\"\\uD83D\\uDCCA CloudFormation Stack:\\\"\\n    echo \\\"   https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks/stackinfo?stackId=$STACK_NAME\\\"\\n    \\n    # Get resource links\\n    LAMBDA_FUNCTION=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \\\\\\n        --output text 2>/dev/null)\\n    \\n    API_GATEWAY=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \\\\\\n        --output text 2>/dev/null)\\n    \\n    S3_BUCKET=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \\\\\\n        --output text 2>/dev/null)\\n    \\n    if [ -n \\\"$LAMBDA_FUNCTION\\\" ] && [ \\\"$LAMBDA_FUNCTION\\\" != \\\"None\\\" ]; then\\n        echo \\\"\\u26A1 Lambda Function:\\\"\\n        echo \\\"   https://$AWS_REGION.console.aws.amazon.com/lambda/home?region=$AWS_REGION#/functions/$LAMBDA_FUNCTION\\\"\\n    fi\\n    \\n    if [ -n \\\"$API_GATEWAY\\\" ] && [ \\\"$API_GATEWAY\\\" != \\\"None\\\" ]; then\\n        echo \\\"\\uD83C\\uDF10 API Gateway:\\\"\\n        echo \\\"   $API_GATEWAY\\\"\\n    fi\\n    \\n    if [ -n \\\"$S3_BUCKET\\\" ] && [ \\\"$S3_BUCKET\\\" != \\\"None\\\" ]; then\\n        echo \\\"\\uD83E\\uDEA3 S3 Bucket:\\\"\\n        echo \\\"   https://s3.console.aws.amazon.com/s3/buckets/$S3_BUCKET?region=$AWS_REGION\\\"\\n    fi\\n    \\n    echo \\\"\\\"\\n    print_status \\\"\\uD83D\\uDCA1 Next Steps:\\\"\\n    echo \\\"  \\u2022 Test your deployed resources using the links above\\\"\\n    echo \\\"  \\u2022 Monitor logs in CloudWatch\\\"\\n    echo \\\"  \\u2022 Use delete.sh to clean up resources when done\\\"\\n    echo \\\"\\\"\\n}\\n\\n# Main deployment function\\nmain() {\\n    echo \\\"\\\"\\n    echo \\\"======================================\\\"\\n    echo \\\"\\uD83D\\uDE80 \").concat(projectName,\" Deployment\\\"\\n    echo \\\"======================================\\\"\\n    echo \\\"Project: $PROJECT_NAME\\\"\\n    echo \\\"Region: $AWS_REGION\\\"\\n    echo \\\"\\\"\\n    \\n    check_prerequisites\\n    check_web_app_config\\n    build_web_app\\n    deploy_stack\\n    deploy_web_app\\n    show_results\\n}\\n\\n# Run with error handling\\nif [ \\\"${BASH_SOURCE[0]}\\\" == \\\"${0}\\\" ]; then\\n    main \\\"$@\\\"\\nfi\\n\");};const generateDeleteScript=()=>{const projectName=formData.projectName||'lambdaforge-project';return\"#!/bin/bash\\n\\n# \".concat(projectName,\" Resource Cleanup Script\\n# Generated by LambdaForge on \").concat(new Date().toISOString(),\"\\n# \\u26A0\\uFE0F  WARNING: This script will DELETE all resources created by the deployment!\\n\\nset -e\\n\\n# Configuration\\nPROJECT_NAME=\\\"\").concat(projectName,\"\\\"\\n# Auto-detect AWS region from AWS CLI configuration\\nAWS_REGION=$(aws configure get region)\\nif [ -z \\\"$AWS_REGION\\\" ]; then\\n    echo \\\"\\u26A0\\uFE0F  No default region configured. Using us-east-1\\\"\\n    AWS_REGION=\\\"us-east-1\\\"\\nfi\\nSTACK_NAME=\\\"${PROJECT_NAME}-stack\\\"\\n\\n# Web Application Deployment Configuration\\n# Set one of these to deploy the actual web application:\\n# WEB_APP_LOCAL_PATH=\\\"/path/to/your/web/app\\\"          # Local folder path\\n# WEB_APP_GITHUB_REPO=\\\"https://github.com/user/repo\\\" # GitHub repository URL\\nWEB_APP_LOCAL_PATH=\\\"\\\"\\nWEB_APP_GITHUB_REPO=\\\"\\\"\\n\\n# Colors for output\\nRED='\\\\033[0;31m'\\nGREEN='\\\\033[0;32m'\\nYELLOW='\\\\033[1;33m'\\nBLUE='\\\\033[0;34m'\\nNC='\\\\033[0m' # No Color\\n\\n# Print functions\\nprint_status() {\\n    echo -e \\\"${BLUE}\\u2139\\uFE0F  $1${NC}\\\"\\n}\\n\\nprint_success() {\\n    echo -e \\\"${GREEN}\\u2705 $1${NC}\\\"\\n}\\n\\nprint_warning() {\\n    echo -e \\\"${YELLOW}\\u26A0\\uFE0F  $1${NC}\\\"\\n}\\n\\nprint_error() {\\n    echo -e \\\"${RED}\\u274C $1${NC}\\\"\\n}\\n\\n# Check prerequisites\\ncheck_prerequisites() {\\n    print_status \\\"Checking prerequisites...\\\"\\n    \\n    # Check AWS CLI\\n    if ! command -v aws &> /dev/null; then\\n        print_error \\\"AWS CLI is not installed. Please install it first.\\\"\\n        exit 1\\n    fi\\n    \\n    # Check AWS credentials\\n    if ! aws sts get-caller-identity &> /dev/null; then\\n        print_error \\\"AWS credentials not configured. Run 'aws configure' first.\\\"\\n        exit 1\\n    fi\\n    \\n    print_success \\\"Prerequisites check passed\\\"\\n}\\n\\n# Check web application configuration\\ncheck_web_app_config() {\\n    if [ -n \\\"$WEB_APP_LOCAL_PATH\\\" ] && [ -n \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        print_error \\\"Cannot specify both local path and GitHub repo. Choose one.\\\"\\n        exit 1\\n    fi\\n    \\n    if [ -n \\\"$WEB_APP_LOCAL_PATH\\\" ]; then\\n        if [ ! -d \\\"$WEB_APP_LOCAL_PATH\\\" ]; then\\n            print_error \\\"Local web app path does not exist: $WEB_APP_LOCAL_PATH\\\"\\n            exit 1\\n        fi\\n        print_status \\\"Web app source: Local folder ($WEB_APP_LOCAL_PATH)\\\"\\n    elif [ -n \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        print_status \\\"Web app source: GitHub repository ($WEB_APP_GITHUB_REPO)\\\"\\n    else\\n        print_warning \\\"No web app source specified. Only AWS infrastructure will be created.\\\"\\n        print_status \\\"To deploy a web app, set WEB_APP_LOCAL_PATH or WEB_APP_GITHUB_REPO in this script.\\\"\\n    fi\\n}\\n\\n# Build and package web application\\nbuild_web_app() {\\n    if [ -z \\\"$WEB_APP_LOCAL_PATH\\\" ] && [ -z \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        print_status \\\"Skipping web app build - no source specified\\\"\\n        return 0\\n    fi\\n    \\n    print_status \\\"Building web application...\\\"\\n    \\n    # Create temporary build directory\\n    BUILD_DIR=\\\"$(mktemp -d)\\\"\\n    print_status \\\"Using build directory: $BUILD_DIR\\\"\\n    \\n    if [ -n \\\"$WEB_APP_LOCAL_PATH\\\" ]; then\\n        # Copy from local path\\n        print_status \\\"Copying from local path...\\\"\\n        cp -r \\\"$WEB_APP_LOCAL_PATH\\\"/* \\\"$BUILD_DIR/\\\"\\n    elif [ -n \\\"$WEB_APP_GITHUB_REPO\\\" ]; then\\n        # Clone from GitHub\\n        print_status \\\"Cloning from GitHub...\\\"\\n        git clone \\\"$WEB_APP_GITHUB_REPO\\\" \\\"$BUILD_DIR\\\"\\n    fi\\n    \\n    # Build the application\\n    cd \\\"$BUILD_DIR\\\"\\n    \\n    if [ -f \\\"package.json\\\" ]; then\\n        print_status \\\"Installing dependencies...\\\"\\n        npm install\\n        \\n        print_status \\\"Building application...\\\"\\n        npm run build\\n        \\n        if [ -d \\\"build\\\" ]; then\\n            BUILT_APP_PATH=\\\"$BUILD_DIR/build\\\"\\n        elif [ -d \\\"dist\\\" ]; then\\n            BUILT_APP_PATH=\\\"$BUILD_DIR/dist\\\"\\n        else\\n            print_error \\\"Build directory not found. Expected 'build' or 'dist' folder.\\\"\\n            exit 1\\n        fi\\n    else\\n        print_status \\\"No package.json found, assuming static files\\\"\\n        BUILT_APP_PATH=\\\"$BUILD_DIR\\\"\\n    fi\\n    \\n    print_success \\\"Web application built successfully\\\"\\n    echo \\\"Built app location: $BUILT_APP_PATH\\\"\\n}\\n\\n# Deploy web application to S3\\ndeploy_web_app() {\\n    if [ -z \\\"$BUILT_APP_PATH\\\" ]; then\\n        print_status \\\"Skipping web app deployment - no built app\\\"\\n        return 0\\n    fi\\n    \\n    print_status \\\"Deploying web application to S3...\\\"\\n    \\n    # Get S3 bucket name from CloudFormation outputs\\n    S3_BUCKET=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \\\\\\n        --output text)\\n    \\n    if [ -z \\\"$S3_BUCKET\\\" ] || [ \\\"$S3_BUCKET\\\" = \\\"None\\\" ]; then\\n        print_warning \\\"No S3 bucket found in stack outputs. Skipping web app deployment.\\\"\\n        return 0\\n    fi\\n    \\n    print_status \\\"Uploading to S3 bucket: $S3_BUCKET\\\"\\n    \\n    # Upload files to S3\\n    aws s3 sync \\\"$BUILT_APP_PATH\\\" \\\"s3://$S3_BUCKET\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --delete\\n    \\n    # Configure S3 for static website hosting\\n    aws s3 website \\\"s3://$S3_BUCKET\\\" \\\\\\n        --index-document index.html \\\\\\n        --error-document error.html \\\\\\n        --region \\\"$AWS_REGION\\\"\\n    \\n    # Get website URL\\n    WEBSITE_URL=\\\"http://$S3_BUCKET.s3-website-$AWS_REGION.amazonaws.com\\\"\\n    \\n    print_success \\\"Web application deployed successfully!\\\"\\n    echo \\\"\\\"\\n    print_success \\\"\\uD83C\\uDF10 Your web application is available at:\\\"\\n    echo \\\"   $WEBSITE_URL\\\"\\n    echo \\\"\\\"\\n}\\n\\n# Deploy or update the CloudFormation stack\\ndeploy_stack() {\\n    print_status \\\"Checking if stack exists...\\\"\\n    \\n    if aws cloudformation describe-stacks --stack-name \\\"$STACK_NAME\\\" --region \\\"$AWS_REGION\\\" &>/dev/null; then\\n        print_status \\\"Stack exists. Updating...\\\"\\n        OPERATION=\\\"update-stack\\\"\\n    else\\n        print_status \\\"Stack does not exist. Creating...\\\"\\n        OPERATION=\\\"create-stack\\\"\\n    fi\\n    \\n    print_status \\\"Deploying CloudFormation stack...\\\"\\n    print_status \\\"Stack Name: $STACK_NAME\\\"\\n    print_status \\\"Region: $AWS_REGION\\\"\\n    print_status \\\"Template: template.yaml\\\"\\n    \\n    # Deploy the stack\\n    aws cloudformation $OPERATION \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --template-body file://template.yaml \\\\\\n        --capabilities CAPABILITY_IAM \\\\\\n        --region \\\"$AWS_REGION\\\"\\n    \\n    if [ $? -ne 0 ]; then\\n        print_error \\\"Failed to create/update the stack\\\"\\n        exit 1\\n    fi\\n    \\n    print_status \\\"Waiting for stack operation to complete...\\\"\\n    print_status \\\"This may take several minutes...\\\"\\n    \\n    # Wait for the operation to complete\\n    if [ \\\"$OPERATION\\\" = \\\"create-stack\\\" ]; then\\n        WAIT_CONDITION=\\\"stack-create-complete\\\"\\n    else\\n        WAIT_CONDITION=\\\"stack-update-complete\\\"\\n    fi\\n    \\n    if aws cloudformation wait $WAIT_CONDITION --stack-name \\\"$STACK_NAME\\\" --region \\\"$AWS_REGION\\\"; then\\n        print_success \\\"Stack operation completed successfully! \\uD83C\\uDF89\\\"\\n    else\\n        print_error \\\"Stack operation failed or timed out\\\"\\n        print_status \\\"Check the CloudFormation console for details:\\\"\\n        echo \\\"https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks\\\"\\n        exit 1\\n    fi\\n}\\n\\n# Show deployment results\\nshow_results() {\\n    print_success \\\"\\uD83C\\uDF89 Deployment completed successfully!\\\"\\n    echo \\\"\\\"\\n    print_status \\\"\\uD83D\\uDCCB Resource Summary:\\\"\\n    \\n    # Get stack outputs\\n    aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \\\\\\n        --output table\\n    \\n    echo \\\"\\\"\\n    print_status \\\"\\uD83D\\uDD17 AWS Console Links:\\\"\\n    \\n    # CloudFormation Console\\n    echo \\\"\\uD83D\\uDCCA CloudFormation Stack:\\\"\\n    echo \\\"   https://$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=$AWS_REGION#/stacks/stackinfo?stackId=$STACK_NAME\\\"\\n    \\n    # Get resource links\\n    LAMBDA_FUNCTION=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \\\\\\n        --output text 2>/dev/null)\\n    \\n    API_GATEWAY=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \\\\\\n        --output text 2>/dev/null)\\n    \\n    S3_BUCKET=$(aws cloudformation describe-stacks \\\\\\n        --stack-name \\\"$STACK_NAME\\\" \\\\\\n        --region \\\"$AWS_REGION\\\" \\\\\\n        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \\\\\\n        --output text 2>/dev/null)\\n    \\n    if [ -n \\\"$LAMBDA_FUNCTION\\\" ] && [ \\\"$LAMBDA_FUNCTION\\\" != \\\"None\\\" ]; then\\n        echo \\\"\\u26A1 Lambda Function:\\\"\\n        echo \\\"   https://$AWS_REGION.console.aws.amazon.com/lambda/home?region=$AWS_REGION#/functions/$LAMBDA_FUNCTION\\\"\\n    fi\\n    \\n    if [ -n \\\"$API_GATEWAY\\\" ] && [ \\\"$API_GATEWAY\\\" != \\\"None\\\" ]; then\\n        echo \\\"\\uD83C\\uDF10 API Gateway:\\\"\\n        echo \\\"   $API_GATEWAY\\\"\\n    fi\\n    \\n    if [ -n \\\"$S3_BUCKET\\\" ] && [ \\\"$S3_BUCKET\\\" != \\\"None\\\" ]; then\\n        echo \\\"\\uD83E\\uDEA3 S3 Bucket:\\\"\\n        echo \\\"   https://s3.console.aws.amazon.com/s3/buckets/$S3_BUCKET?region=$AWS_REGION\\\"\\n    fi\\n    \\n    echo \\\"\\\"\\n    print_status \\\"\\uD83D\\uDCA1 Next Steps:\\\"\\n    echo \\\"  \\u2022 Test your deployed resources using the links above\\\"\\n    echo \\\"  \\u2022 Monitor logs in CloudWatch\\\"\\n    echo \\\"  \\u2022 Use delete.sh to clean up resources when done\\\"\\n    echo \\\"\\\"\\n}\\n\\n# Main deployment function\\nmain() {\\n    echo \\\"\\\"\\n    echo \\\"======================================\\\"\\n    echo \\\"\\uD83D\\uDE80 \").concat(projectName,\" Deployment\\\"\\n    echo \\\"======================================\\\"\\n    echo \\\"Project: $PROJECT_NAME\\\"\\n    echo \\\"Region: $AWS_REGION\\\"\\n    echo \\\"\\\"\\n    \\n    check_prerequisites\\n    check_web_app_config\\n    build_web_app\\n    deploy_stack\\n    deploy_web_app\\n    show_results\\n}\\n\\n# Run with error handling\\nif [ \\\"${BASH_SOURCE[0]}\\\" == \\\"${0}\\\" ]; then\\n    main \\\"$@\\\"\\nfi\\n\");};const generateReadme=()=>{var _formData$selectedInf11,_formData$selectedCom1,_formData$selectedInt9,_formData$selectedSec4,_formData$selectedMon7;const projectName=formData.projectName||'LambdaForge Project';const environment=formData.environment||'Development';return\"# \".concat(projectName,\"\\n\\nGenerated by **LambdaForge** - AWS Infrastructure Automation Platform\\n\\n## Overview\\n\\nThis project contains the infrastructure and deployment configuration for **\").concat(projectName,\"**.\\n\\n- **Environment:** \").concat(environment,\"\\n- **AWS Region:** Auto-detected from AWS CLI configuration\\n- **Generated:** \").concat(new Date().toISOString(),\"\\n\\n## Architecture\\n\\n### Selected AWS Services\\n\\n#### Infrastructure Services\\n\").concat(((_formData$selectedInf11=formData.selectedInfrastructure)===null||_formData$selectedInf11===void 0?void 0:_formData$selectedInf11.map(service=>\"- \".concat(service.replace(/-/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase()))).join('\\n'))||'- None selected',\"\\n\\n#### Compute Services\\n\").concat(((_formData$selectedCom1=formData.selectedCompute)===null||_formData$selectedCom1===void 0?void 0:_formData$selectedCom1.map(service=>\"- \".concat(service.replace(/-/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase()))).join('\\n'))||'- None selected',\"\\n\\n#### Integration Services\\n\").concat(((_formData$selectedInt9=formData.selectedIntegration)===null||_formData$selectedInt9===void 0?void 0:_formData$selectedInt9.map(service=>\"- \".concat(service.replace(/-/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase()))).join('\\n'))||'- None selected',\"\\n\\n#### Security Services\\n\").concat(((_formData$selectedSec4=formData.selectedSecurity)===null||_formData$selectedSec4===void 0?void 0:_formData$selectedSec4.map(service=>\"- \".concat(service.replace(/-/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase()))).join('\\n'))||'- None selected',\"\\n\\n#### Monitoring Services\\n\").concat(((_formData$selectedMon7=formData.selectedMonitoring)===null||_formData$selectedMon7===void 0?void 0:_formData$selectedMon7.map(service=>\"- \".concat(service.replace(/-/g,' ').replace(/\\b\\w/g,l=>l.toUpperCase()))).join('\\n'))||'- None selected',\"\\n\\n## \\uD83D\\uDEA8 CRITICAL REQUIREMENTS\\n\\n### \\u26A0\\uFE0F IAM Permissions Required\\n\\n**URGENT**: You must have the following IAM permissions or deployment will fail:\\n\\n- `iam:CreateRole` - Required for Lambda execution roles\\n- `iam:AttachRolePolicy` - Required for role policy attachment\\n- `iam:PassRole` - Required for Lambda function creation\\n- `cloudformation:*` - Required for stack operations\\n- `lambda:*` - Required for Lambda function management\\n- `s3:*` - Required for S3 bucket operations\\n- `apigateway:*` - Required for API Gateway (if selected)\\n- `logs:*` - Required for CloudWatch logs\\n\\n**Common Error Without Proper Permissions:**\\n```\\nUser: arn:aws:iam::ACCOUNT:user/USERNAME is not authorized to perform: iam:CreateRole\\n```\\n\\n### \\uD83C\\uDF0D AWS Region Configuration\\n\\n**CRITICAL**: Your AWS CLI region must match your intended deployment region.\\n\\n**Check your current region:**\\n```bash\\naws configure get region\\n```\\n\\n**Common Error with Region Mismatch:**\\n```\\nCould not connect to the endpoint URL: \\\"https://cloudformation.us-east-1.amazonaws.com/\\\"\\n```\\n\\n**Set your region if needed:**\\n```bash\\naws configure set region YOUR_PREFERRED_REGION\\n```\\n\\n## Quick Start\\n\\n### Prerequisites\\n\\n- \\u2705 AWS CLI installed and configured\\n- \\u2705 **CRITICAL**: Appropriate IAM permissions (see above)\\n- \\u2705 **CRITICAL**: Correct AWS region configured\\n- \\u2705 Bash shell (for deployment script)\\n\\n### Deployment\\n\\n```bash\\n# 1. Extract the zip file\\nunzip \").concat(projectName||'project',\"-infrastructure.zip\\ncd \").concat(projectName||'project',\"-infrastructure/\\n\\n# 2. Make scripts executable\\nchmod +x deploy.sh\\nchmod +x delete.sh\\n\\n# 3. Verify your AWS configuration\\naws sts get-caller-identity\\naws configure get region\\n\\n# 4. (Optional) Configure web application deployment\\n# Edit deploy.sh and set either:\\n# WEB_APP_LOCAL_PATH=\\\"/path/to/your/web/app\\\"          # For local folder\\n# WEB_APP_GITHUB_REPO=\\\"https://github.com/user/repo\\\" # For GitHub repo\\n\\n# 5. Run deployment\\n./deploy.sh\\n```\\n\\n### Web Application Deployment Options\\n\\n#### Option 1: Deploy from Local Folder\\n```bash\\n# Edit deploy.sh and set:\\nWEB_APP_LOCAL_PATH=\\\"/path/to/your/react/app\\\"\\n```\\n\\n#### Option 2: Deploy from GitHub Repository\\n```bash\\n# Edit deploy.sh and set:\\nWEB_APP_GITHUB_REPO=\\\"https://github.com/yourusername/your-repo\\\"\\n```\\n\\n#### Option 3: Infrastructure Only (Default)\\nIf neither path is set, only AWS infrastructure will be created without deploying a web application.\\n\\n### Example: Deploy LambdaForge Application\\n\\nTo deploy the LambdaForge application itself:\\n\\n```bash\\n# From GitHub (public repository):\\nWEB_APP_GITHUB_REPO=\\\"https://github.com/your-username/lambdaforge\\\"\\n\\n# Or from local development:\\nWEB_APP_LOCAL_PATH=\\\"/Users/yourusername/Documents/lambdaforge\\\"\\n```\\n\\nAfter deployment, your LambdaForge app will be available at the S3 website URL provided in the outputs.\\n\\n### Cleanup (Delete All Resources)\\n\\n```bash\\n# \\u26A0\\uFE0F WARNING: This will DELETE all created resources!\\n./delete.sh\\n```\\n\\n## Cost Estimation\\n\\nBased on your selected services, the estimated monthly cost is **$\").concat(estimatedCost,\"**.\\n\\n## AWS Console Links\\n\\nAfter deployment, the script will provide direct links to all created resources.\\n\\nGeneral AWS Console links:\\n- [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/)\\n- [Lambda Functions](https://console.aws.amazon.com/lambda/)\\n- [S3 Buckets](https://console.aws.amazon.com/s3/)\\n- [Cost Explorer](https://console.aws.amazon.com/cost-management/home#/cost-explorer)\\n\\n## \\uD83D\\uDD27 Troubleshooting\\n\\n### Common Deployment Errors\\n\\n#### Error: \\\"User is not authorized to perform: iam:CreateRole\\\"\\n**Cause**: Missing IAM permissions\\n**Solution**: Contact your AWS administrator to grant the required permissions listed above\\n\\n#### Error: \\\"Could not connect to the endpoint URL\\\"\\n**Cause**: Region mismatch between AWS CLI and CloudFormation endpoint\\n**Solution**: \\n```bash\\naws configure set region YOUR_CORRECT_REGION\\n```\\n\\n#### Error: \\\"Stack already exists\\\"\\n**Cause**: Previous deployment with same project name\\n**Solution**: Either use a different project name or delete the existing stack:\\n```bash\\n./delete.sh\\n```\\n\\n#### Error: \\\"Template format error\\\"\\n**Cause**: Using old JSON template format\\n**Solution**: Use the new template.yaml generated by this version (proper YAML format)\\n\\n### Getting Help\\n\\nIf you encounter issues:\\n1. Check the CloudFormation console for detailed error messages\\n2. Verify your AWS CLI configuration: `aws configure list`\\n3. Ensure you have the required IAM permissions\\n4. Check that you're in the correct AWS region\\n\\n## Files Included\\n\\n- `template.yaml` - Fixed CloudFormation template (proper YAML format)\\n- `deploy.sh` - Enhanced deployment script with region auto-detection\\n- `delete.sh` - Resource cleanup script (\\u26A0\\uFE0F DELETES all resources!)\\n- `README.md` - This comprehensive documentation file\\n\\n### File Descriptions\\n\\n#### `template.yaml`\\n- Proper YAML CloudFormation format (not JSON)\\n- Auto-detects AWS region and account ID\\n- Includes console links for all resources\\n- Fixed IAM role naming to avoid conflicts\\n\\n#### `deploy.sh`\\n- Auto-detects your AWS CLI region configuration\\n- Validates prerequisites before deployment\\n- Provides direct links to all created resources\\n- Enhanced error handling and colored output\\n\\n#### `delete.sh` \\u26A0\\uFE0F\\n- **DANGER**: Permanently deletes ALL created resources\\n- Shows resources before deletion for confirmation\\n- Requires typing 'DELETE' to confirm\\n- Use when you want to clean up and stop AWS charges\\n\\n---\\n\\n**Generated by LambdaForge** - Making AWS deployment simple and automated.\\n\");};// Download single file\nconst downloadFile=(filename,content)=>{const element=document.createElement('a');const file=new Blob([content],{type:'text/plain'});element.href=URL.createObjectURL(file);element.download=filename;document.body.appendChild(element);element.click();document.body.removeChild(element);URL.revokeObjectURL(element.href);};// Create and download zip file\nconst downloadZipFile=async(files,projectName)=>{// Dynamically import JSZip\nconst JSZip=(await import('jszip')).default;const zip=new JSZip();// Add all files to zip\nObject.entries(files).forEach(_ref2=>{let[filename,content]=_ref2;zip.file(filename,content);});// Generate zip file\nconst zipBlob=await zip.generateAsync({type:'blob'});// Download zip file\nconst element=document.createElement('a');element.href=URL.createObjectURL(zipBlob);element.download=\"\".concat(projectName,\"-infrastructure.zip\");document.body.appendChild(element);element.click();document.body.removeChild(element);URL.revokeObjectURL(element.href);};// Export Configuration function - makes the button functional!\nconst exportConfiguration=async()=>{setIsExporting(true);try{const projectName=formData.projectName||'lambdaforge-project';// Generate all files\nconst files={'template.yaml':generateCloudFormationTemplate(),'deploy.sh':generateDeploymentScript(),'delete.sh':generateDeleteScript(),'README.md':generateReadme()};setGeneratedFiles(files);// Download as zip file\nawait downloadZipFile(files,projectName);// Show success message\nsetTimeout(()=>{alert(\"\\u2705 Successfully exported \".concat(projectName,\"-infrastructure.zip!\\n\\n\\uD83D\\uDCE6 Package contains:\\n\").concat(Object.keys(files).map(filename=>\"\\u2022 \".concat(filename)).join('\\n'),\"\\n\\n\\uD83D\\uDE80 Next steps:\\n1. Extract the zip file\\n2. Run: chmod +x deploy.sh delete.sh\\n3. Verify AWS permissions and region\\n4. Run: ./deploy.sh\\n\\n\\u2728 Features included:\\n\\u2022 Auto-detects your AWS region\\n\\u2022 Provides direct links to all created resources\\n\\u2022 Fixed IAM role naming issues\\n\\u2022 Proper YAML CloudFormation format\\n\\u2022 Resource cleanup script (delete.sh)\\n\\u2022 Comprehensive error handling\"));},1000);}catch(error){console.error('Export failed:',error);alert('❌ Export failed. Please try again.');}finally{setIsExporting(false);}};const simulateDeployment=async()=>{setIsGenerating(true);setDeploymentStatus('generating');setProgress(0);setGeneratedResources([]);const tasks=[{name:'Validating AWS credentials',duration:800},{name:'Analyzing infrastructure requirements',duration:1200},{name:'Generating CloudFormation templates',duration:1500},{name:'Creating deployment scripts',duration:1000},{name:'Creating resource cleanup scripts',duration:800},{name:'Generating documentation',duration:800},{name:'Validating template syntax',duration:1000},{name:'Preparing deployment package',duration:700}];let totalProgress=0;const progressStep=100/tasks.length;for(let i=0;i<tasks.length;i++){setCurrentTask(tasks[i].name);await new Promise(resolve=>setTimeout(resolve,tasks[i].duration));totalProgress+=progressStep;setProgress(Math.round(totalProgress));// Add generated resources as we progress\nif(i===2){// After CloudFormation generation\nsetGeneratedResources(prev=>[...prev,{name:'CloudFormation Template',id:'template.yaml',status:'generated',type:'infrastructure'}]);}if(i===3){// After deployment script\nsetGeneratedResources(prev=>[...prev,{name:'Deployment Script',id:'deploy.sh',status:'generated',type:'automation'}]);}if(i===4){// After generating cleanup script\nsetGeneratedResources(prev=>[...prev,{name:'Resource Cleanup Script',id:'delete.sh',status:'generated',type:'automation'}]);}if(i===5){// After documentation\nsetGeneratedResources(prev=>[...prev,{name:'README Documentation',id:'README.md',status:'generated',type:'documentation'}]);}}// Generate all files automatically\nconst files={'template.yaml':generateCloudFormationTemplate(),'deploy.sh':generateDeploymentScript(),'delete.sh':generateDeleteScript(),'README.md':generateReadme()};setGeneratedFiles(files);setCurrentTask('All deployment files generated successfully!');setDeploymentStatus('completed');setIsGenerating(false);};const getServiceCounts=()=>{var _formData$selectedInf12,_formData$selectedCom10,_formData$selectedInt0,_formData$selectedSec5,_formData$selectedMon8,_formData$selectedDep,_formData$selectedOpt;return{infrastructure:((_formData$selectedInf12=formData.selectedInfrastructure)===null||_formData$selectedInf12===void 0?void 0:_formData$selectedInf12.length)||0,compute:((_formData$selectedCom10=formData.selectedCompute)===null||_formData$selectedCom10===void 0?void 0:_formData$selectedCom10.length)||0,integration:((_formData$selectedInt0=formData.selectedIntegration)===null||_formData$selectedInt0===void 0?void 0:_formData$selectedInt0.length)||0,security:((_formData$selectedSec5=formData.selectedSecurity)===null||_formData$selectedSec5===void 0?void 0:_formData$selectedSec5.length)||0,monitoring:((_formData$selectedMon8=formData.selectedMonitoring)===null||_formData$selectedMon8===void 0?void 0:_formData$selectedMon8.length)||0,deployment:((_formData$selectedDep=formData.selectedDeployment)===null||_formData$selectedDep===void 0?void 0:_formData$selectedDep.length)||0,optimization:((_formData$selectedOpt=formData.selectedOptimization)===null||_formData$selectedOpt===void 0?void 0:_formData$selectedOpt.length)||0};};const serviceCounts=getServiceCounts();const totalServices=Object.values(serviceCounts).reduce((a,b)=>a+b,0);return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-8\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold text-aws-blue mb-2\",children:\"Generate Infrastructure\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-aws-gray-600\",children:\"Review your configuration and deploy your Lambda-powered infrastructure automation.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-3 gap-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"lg:col-span-2 space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-aws-gray-50 border border-aws-gray-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-aws-blue mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(Zap,{className:\"w-5 h-5 mr-2 text-aws-orange\"}),\"Configuration Summary\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-2 md:grid-cols-4 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-aws-blue\",children:serviceCounts.infrastructure}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"Infrastructure\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-green-600\",children:serviceCounts.compute}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"Compute\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-purple-600\",children:serviceCounts.security}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"Security\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-aws-orange\",children:totalServices}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"Total Services\"})]})]})]}),isGenerating&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border border-aws-gray-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-aws-blue mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(Clock,{className:\"w-5 h-5 mr-2 text-aws-orange animate-spin\"}),\"Deployment Progress\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm font-medium text-aws-gray-700\",children:currentTask}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm font-bold text-aws-blue\",children:[progress,\"%\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full bg-aws-gray-200 rounded-full h-3\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bg-gradient-to-r from-aws-orange to-green-500 h-3 rounded-full transition-all duration-500\",style:{width:\"\".concat(progress,\"%\")}})})]})]}),generatedResources.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border border-aws-gray-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-aws-blue mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(CheckCircle,{className:\"w-5 h-5 mr-2 text-green-500\"}),\"Generated Resources\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:generatedResources.map((resource,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-3\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 bg-green-500 rounded-full\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-aws-blue\",children:resource.name}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:resource.id})]})]}),/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded\",children:resource.status})]},index))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border border-aws-gray-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-aws-blue mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(DollarSign,{className:\"w-5 h-5 mr-2 text-green-600\"}),\"Cost Estimate\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-3xl font-bold text-green-600\",children:[\"$\",estimatedCost]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"per month\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center text-sm text-blue-800\",children:[/*#__PURE__*/_jsx(TrendingUp,{className:\"w-4 h-4 mr-2\"}),\"Auto-scaling enabled for cost optimization\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border border-aws-gray-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-aws-blue mb-4\",children:\"Project Details\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-3\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"Project Name\"}),/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-aws-blue\",children:formData.projectName||'Unnamed Project'})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"Environment\"}),/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-aws-blue\",children:formData.environment||'Development'})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-aws-gray-600\",children:\"AWS Region\"}),/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-aws-blue\",children:formData.awsRegion||'us-east-1'})]})]})]}),deploymentStatus==='completed'&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border border-aws-gray-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-aws-blue mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(Monitor,{className:\"w-5 h-5 mr-2 text-green-500\"}),\"Health Status\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm text-aws-gray-600\",children:\"Infrastructure\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"flex items-center text-green-600\",children:[/*#__PURE__*/_jsx(CheckCircle,{className:\"w-4 h-4 mr-1\"}),\"Healthy\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm text-aws-gray-600\",children:\"Security\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"flex items-center text-green-600\",children:[/*#__PURE__*/_jsx(Shield,{className:\"w-4 h-4 mr-1\"}),\"Secure\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm text-aws-gray-600\",children:\"Performance\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"flex items-center text-green-600\",children:[/*#__PURE__*/_jsx(TrendingUp,{className:\"w-4 h-4 mr-1\"}),\"Optimal\"]})]})]})]})]})]}),generatedFiles&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 border border-blue-200 rounded-lg p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-blue-800 mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(Package,{className:\"w-5 h-5 mr-2\"}),\"Generated Deployment Package\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\",children:Object.entries(generatedFiles).map(_ref3=>{let[filename,content]=_ref3;return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border border-blue-200 rounded-lg p-3 text-center\",children:[/*#__PURE__*/_jsx(FileText,{className:\"w-8 h-8 text-blue-600 mx-auto mb-2\"}),/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-blue-800 text-sm\",children:filename}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-blue-600\",children:[Math.round(content.length/1024),\"KB\"]})]},filename);})}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-blue-700\",children:\"All files have been generated and downloaded. Extract them to a directory and run the deployment script.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col sm:flex-row gap-4\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:simulateDeployment,disabled:isGenerating||deploymentStatus==='completed',className:\"flex-1 flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 \".concat(isGenerating||deploymentStatus==='completed'?'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed':'bg-aws-orange text-white hover:bg-aws-orange-dark shadow-lg hover:shadow-xl'),children:isGenerating?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Clock,{className:\"w-5 h-5 animate-spin\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Deploying Infrastructure...\"})]}):deploymentStatus==='completed'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckCircle,{className:\"w-5 h-5\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Deployment Complete\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Play,{className:\"w-5 h-5\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Deploy Infrastructure\"})]})}),/*#__PURE__*/_jsx(\"button\",{onClick:exportConfiguration,disabled:isExporting,className:\"flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 \".concat(isExporting?'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed':'bg-green-600 text-white hover:bg-green-700 shadow-lg hover:shadow-xl'),children:isExporting?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Clock,{className:\"w-5 h-5 animate-spin\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Exporting...\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Download,{className:\"w-5 h-5\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Export Configuration\"})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between pt-6 border-t border-aws-gray-200\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:prevStep,className:\"flex items-center space-x-2 text-aws-gray-600 hover:text-aws-blue transition-colors duration-200\",children:/*#__PURE__*/_jsx(\"span\",{children:\"\\u2190 BACK\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-aws-gray-500\",children:[\"Step \",currentStep,\" of \",totalSteps,\" - Ready to deploy! \\uD83D\\uDE80\"]})]})]});};export default GenerateStep;","map":{"version":3,"names":["React","useState","useEffect","Play","Download","Clock","DollarSign","CheckCircle","Zap","TrendingUp","Shield","Monitor","FileText","Package","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","GenerateStep","_ref","formData","prevStep","currentStep","totalSteps","isGenerating","setIsGenerating","progress","setProgress","currentTask","setCurrentTask","estimatedCost","setEstimatedCost","generatedResources","setGeneratedResources","deploymentStatus","setDeploymentStatus","generatedFiles","setGeneratedFiles","isExporting","setIsExporting","_formData$selectedInf","_formData$selectedInf2","_formData$selectedInf3","_formData$selectedInf4","_formData$selectedInf5","_formData$selectedCom","_formData$selectedCom2","_formData$selectedCom3","_formData$selectedCom4","_formData$selectedInt","_formData$selectedInt2","_formData$selectedInt3","_formData$selectedInt4","_formData$selectedSec","_formData$selectedSec2","_formData$selectedSec3","_formData$selectedMon","_formData$selectedMon2","_formData$selectedMon3","cost","selectedInfrastructure","includes","selectedCompute","selectedIntegration","selectedSecurity","selectedMonitoring","generateCloudFormationTemplate","projectName","environment","yamlTemplate","concat","generateResourcesYAML","generateOutputsYAML","generateResources","_formData$selectedInf6","_formData$selectedInf7","_formData$selectedCom5","_formData$selectedInt5","_formData$selectedMon4","resources","S3Bucket","Type","Properties","BucketName","VersioningConfiguration","Status","PublicAccessBlockConfiguration","BlockPublicAcls","BlockPublicPolicy","IgnorePublicAcls","RestrictPublicBuckets","Tags","Key","Value","Ref","DynamoDBTable","TableName","AttributeDefinitions","AttributeName","AttributeType","KeySchema","KeyType","BillingMode","PointInTimeRecoverySpecification","PointInTimeRecoveryEnabled","LambdaExecutionRole","RoleName","AssumeRolePolicyDocument","Version","Statement","Effect","Principal","Service","Action","ManagedPolicyArns","LambdaFunction","FunctionName","Runtime","Handler","Role","Code","ZipFile","Environment","Variables","PROJECT_NAME","ENVIRONMENT","_formData$selectedCom6","ApiGateway","Name","Description","EndpointConfiguration","Types","ApiGatewayResource","RestApiId","ParentId","PathPart","ApiGatewayMethod","ResourceId","HttpMethod","AuthorizationType","Integration","IntegrationHttpMethod","Uri","ApiGatewayDeployment","DependsOn","StageName","LambdaApiGatewayPermission","SourceArn","LogGroup","LogGroupName","RetentionInDays","generateOutputs","_formData$selectedInf8","_formData$selectedCom7","_formData$selectedInt6","outputs","S3BucketName","Export","LambdaFunctionArn","ApiEndpoint","_formData$selectedInf9","_formData$selectedInf0","_formData$selectedCom8","_formData$selectedInt7","_formData$selectedMon5","yamlResources","_formData$selectedCom9","_formData$selectedInf1","_formData$selectedInf10","_formData$selectedCom0","_formData$selectedInt8","_formData$selectedMon6","yamlOutputs","generateDeploymentScript","Date","toISOString","generateDeleteScript","generateReadme","_formData$selectedInf11","_formData$selectedCom1","_formData$selectedInt9","_formData$selectedSec4","_formData$selectedMon7","map","service","replace","l","toUpperCase","join","downloadFile","filename","content","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL","downloadZipFile","files","JSZip","default","zip","Object","entries","forEach","_ref2","zipBlob","generateAsync","exportConfiguration","setTimeout","alert","keys","error","console","simulateDeployment","tasks","name","duration","totalProgress","progressStep","length","i","Promise","resolve","Math","round","prev","id","status","getServiceCounts","_formData$selectedInf12","_formData$selectedCom10","_formData$selectedInt0","_formData$selectedSec5","_formData$selectedMon8","_formData$selectedDep","_formData$selectedOpt","infrastructure","compute","integration","security","monitoring","deployment","selectedDeployment","optimization","selectedOptimization","serviceCounts","totalServices","values","reduce","a","b","className","children","style","width","resource","index","awsRegion","_ref3","onClick","disabled"],"sources":["/Users/codinggents/Documents/lambdaforge/src/components/steps/GenerateStep.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Play, Download, Clock, DollarSign, CheckCircle, Zap, TrendingUp, Shield, Monitor, FileText, Package } from 'lucide-react';\n\nconst GenerateStep = ({ formData, prevStep, currentStep, totalSteps }) => {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [currentTask, setCurrentTask] = useState('');\n  const [estimatedCost, setEstimatedCost] = useState(0);\n  const [generatedResources, setGeneratedResources] = useState([]);\n  const [deploymentStatus, setDeploymentStatus] = useState('ready'); // ready, generating, completed, error\n  const [generatedFiles, setGeneratedFiles] = useState(null);\n  const [isExporting, setIsExporting] = useState(false);\n\n  // Calculate estimated monthly cost based on selections\n  useEffect(() => {\n    let cost = 0;\n    \n    // Infrastructure costs\n    if (formData.selectedInfrastructure?.includes('s3-bucket')) cost += 23;\n    if (formData.selectedInfrastructure?.includes('dynamodb')) cost += 45;\n    if (formData.selectedInfrastructure?.includes('rds-database')) cost += 85;\n    if (formData.selectedInfrastructure?.includes('vpc-networking')) cost += 15;\n    if (formData.selectedInfrastructure?.includes('ebs-volumes')) cost += 30;\n\n    // Compute costs\n    if (formData.selectedCompute?.includes('lambda-functions')) cost += 12;\n    if (formData.selectedCompute?.includes('ec2-instances')) cost += 120;\n    if (formData.selectedCompute?.includes('ecs-containers')) cost += 95;\n    if (formData.selectedCompute?.includes('fargate-serverless')) cost += 75;\n\n    // Integration costs\n    if (formData.selectedIntegration?.includes('api-gateway')) cost += 25;\n    if (formData.selectedIntegration?.includes('eventbridge')) cost += 8;\n    if (formData.selectedIntegration?.includes('step-functions')) cost += 15;\n    if (formData.selectedIntegration?.includes('sns-notifications')) cost += 5;\n\n    // Security costs\n    if (formData.selectedSecurity?.includes('kms-encryption')) cost += 12;\n    if (formData.selectedSecurity?.includes('secrets-manager')) cost += 8;\n    if (formData.selectedSecurity?.includes('waf-protection')) cost += 35;\n\n    // Monitoring costs\n    if (formData.selectedMonitoring?.includes('cloudwatch')) cost += 18;\n    if (formData.selectedMonitoring?.includes('x-ray-tracing')) cost += 22;\n    if (formData.selectedMonitoring?.includes('cloudtrail')) cost += 10;\n\n    setEstimatedCost(cost);\n  }, [formData]);\n\n  // File generation functions\n  const generateCloudFormationTemplate = () => {\n    const projectName = formData.projectName || 'lambdaforge-project';\n    const environment = formData.environment || 'Development';\n    \n    // Generate YAML format instead of JSON\n    const yamlTemplate = `AWSTemplateFormatVersion: '2010-09-09'\nDescription: '${projectName} - Generated by LambdaForge'\n\nParameters:\n  ProjectName:\n    Type: String\n    Default: ${projectName}\n    Description: Name of the project\n  Environment:\n    Type: String\n    Default: ${environment}\n    AllowedValues:\n      - Development\n      - Staging\n      - Production\n    Description: Environment type\n\nResources:\n${generateResourcesYAML()}\n\nOutputs:\n${generateOutputsYAML()}`;\n\n    return yamlTemplate;\n  };\n\n  const generateResources = () => {\n    const resources = {};\n\n    // Infrastructure Resources\n    if (formData.selectedInfrastructure?.includes('s3-bucket')) {\n      resources.S3Bucket = {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: { 'Fn::Sub': '${ProjectName}-storage-${AWS::AccountId}' },\n          VersioningConfiguration: { Status: 'Enabled' },\n          PublicAccessBlockConfiguration: {\n            BlockPublicAcls: true,\n            BlockPublicPolicy: true,\n            IgnorePublicAcls: true,\n            RestrictPublicBuckets: true\n          },\n          Tags: [\n            { Key: 'Project', Value: { Ref: 'ProjectName' } },\n            { Key: 'Environment', Value: { Ref: 'Environment' } }\n          ]\n        }\n      };\n    }\n\n    if (formData.selectedInfrastructure?.includes('dynamodb')) {\n      resources.DynamoDBTable = {\n        Type: 'AWS::DynamoDB::Table',\n        Properties: {\n          TableName: { 'Fn::Sub': '${ProjectName}-data' },\n          AttributeDefinitions: [\n            { AttributeName: 'id', AttributeType: 'S' }\n          ],\n          KeySchema: [\n            { AttributeName: 'id', KeyType: 'HASH' }\n          ],\n          BillingMode: 'PAY_PER_REQUEST',\n          PointInTimeRecoverySpecification: {\n            PointInTimeRecoveryEnabled: true\n          },\n          Tags: [\n            { Key: 'Project', Value: { Ref: 'ProjectName' } },\n            { Key: 'Environment', Value: { Ref: 'Environment' } }\n          ]\n        }\n      };\n    }\n\n    // Compute Resources\n    if (formData.selectedCompute?.includes('lambda-functions')) {\n      resources.LambdaExecutionRole = {\n        Type: 'AWS::IAM::Role',\n        Properties: {\n          RoleName: { 'Fn::Sub': '${ProjectName}-lambda-role' },\n          AssumeRolePolicyDocument: {\n            Version: '2012-10-17',\n            Statement: [{\n              Effect: 'Allow',\n              Principal: { Service: 'lambda.amazonaws.com' },\n              Action: 'sts:AssumeRole'\n            }]\n          },\n          ManagedPolicyArns: [\n            'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n          ],\n          Tags: [\n            { Key: 'Project', Value: { Ref: 'ProjectName' } },\n            { Key: 'Environment', Value: { Ref: 'Environment' } }\n          ]\n        }\n      };\n\n      resources.LambdaFunction = {\n        Type: 'AWS::Lambda::Function',\n        Properties: {\n          FunctionName: { 'Fn::Sub': '${ProjectName}-function' },\n          Runtime: 'nodejs18.x',\n          Handler: 'index.handler',\n          Role: { 'Fn::GetAtt': ['LambdaExecutionRole', 'Arn'] },\n          Code: {\n            ZipFile: `exports.handler = async (event) => {\n    console.log('Event:', JSON.stringify(event, null, 2));\n    \n    const response = {\n        statusCode: 200,\n        headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n            message: 'Hello from ${formData.projectName || 'LambdaForge'}!',\n            timestamp: new Date().toISOString(),\n            environment: '${formData.environment || 'Development'}'\n        })\n    };\n    \n    return response;\n};`\n          },\n          Environment: {\n            Variables: {\n              PROJECT_NAME: { Ref: 'ProjectName' },\n              ENVIRONMENT: { Ref: 'Environment' }\n            }\n          },\n          Tags: [\n            { Key: 'Project', Value: { Ref: 'ProjectName' } },\n            { Key: 'Environment', Value: { Ref: 'Environment' } }\n          ]\n        }\n      };\n    }\n\n    // Integration Resources\n    if (formData.selectedIntegration?.includes('api-gateway')) {\n      resources.ApiGateway = {\n        Type: 'AWS::ApiGateway::RestApi',\n        Properties: {\n          Name: { 'Fn::Sub': '${ProjectName}-api' },\n          Description: `API for ${formData.projectName || 'LambdaForge Project'}`,\n          EndpointConfiguration: {\n            Types: ['REGIONAL']\n          },\n          Tags: [\n            { Key: 'Project', Value: { Ref: 'ProjectName' } },\n            { Key: 'Environment', Value: { Ref: 'Environment' } }\n          ]\n        }\n      };\n\n      if (formData.selectedCompute?.includes('lambda-functions')) {\n        resources.ApiGatewayResource = {\n          Type: 'AWS::ApiGateway::Resource',\n          Properties: {\n            RestApiId: { Ref: 'ApiGateway' },\n            ParentId: { 'Fn::GetAtt': ['ApiGateway', 'RootResourceId'] },\n            PathPart: 'api'\n          }\n        };\n\n        resources.ApiGatewayMethod = {\n          Type: 'AWS::ApiGateway::Method',\n          Properties: {\n            RestApiId: { Ref: 'ApiGateway' },\n            ResourceId: { Ref: 'ApiGatewayResource' },\n            HttpMethod: 'ANY',\n            AuthorizationType: 'NONE',\n            Integration: {\n              Type: 'AWS_PROXY',\n              IntegrationHttpMethod: 'POST',\n              Uri: {\n                'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'\n              }\n            }\n          }\n        };\n\n        resources.ApiGatewayDeployment = {\n          Type: 'AWS::ApiGateway::Deployment',\n          DependsOn: ['ApiGatewayMethod'],\n          Properties: {\n            RestApiId: { Ref: 'ApiGateway' },\n            StageName: { Ref: 'Environment' }\n          }\n        };\n\n        resources.LambdaApiGatewayPermission = {\n          Type: 'AWS::Lambda::Permission',\n          Properties: {\n            FunctionName: { Ref: 'LambdaFunction' },\n            Action: 'lambda:InvokeFunction',\n            Principal: 'apigateway.amazonaws.com',\n            SourceArn: {\n              'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${Environment}/*/*'\n            }\n          }\n        };\n      }\n    }\n\n    // Monitoring Resources\n    if (formData.selectedMonitoring?.includes('cloudwatch')) {\n      resources.LogGroup = {\n        Type: 'AWS::Logs::LogGroup',\n        Properties: {\n          LogGroupName: { 'Fn::Sub': '/aws/lambda/${ProjectName}-logs' },\n          RetentionInDays: 14,\n          Tags: [\n            { Key: 'Project', Value: { Ref: 'ProjectName' } },\n            { Key: 'Environment', Value: { Ref: 'Environment' } }\n          ]\n        }\n      };\n    }\n\n    return resources;\n  };\n\n  const generateOutputs = () => {\n    const outputs = {};\n\n    if (formData.selectedInfrastructure?.includes('s3-bucket')) {\n      outputs.S3BucketName = {\n        Description: 'S3 Bucket Name',\n        Value: { Ref: 'S3Bucket' },\n        Export: { Name: { 'Fn::Sub': '${ProjectName}-s3-bucket' } }\n      };\n    }\n\n    if (formData.selectedCompute?.includes('lambda-functions')) {\n      outputs.LambdaFunctionArn = {\n        Description: 'Lambda Function ARN',\n        Value: { 'Fn::GetAtt': ['LambdaFunction', 'Arn'] },\n        Export: { Name: { 'Fn::Sub': '${ProjectName}-lambda-arn' } }\n      };\n    }\n\n    if (formData.selectedIntegration?.includes('api-gateway')) {\n      outputs.ApiEndpoint = {\n        Description: 'API Gateway endpoint URL',\n        Value: {\n          'Fn::Sub': 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'\n        },\n        Export: { Name: { 'Fn::Sub': '${ProjectName}-api-endpoint' } }\n      };\n    }\n\n    return outputs;\n  };\n\n  // YAML generation functions for proper CloudFormation format\n  const generateResourcesYAML = () => {\n    let yamlResources = '';\n\n    // Infrastructure Resources\n    if (formData.selectedInfrastructure?.includes('s3-bucket')) {\n      yamlResources += `  # S3 Bucket with versioning and static website hosting\n  S3Bucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub '\\${ProjectName}-storage-\\${AWS::AccountId}'\n      VersioningConfiguration:\n        Status: Enabled\n      WebsiteConfiguration:\n        IndexDocument: index.html\n        ErrorDocument: error.html\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: false\n        BlockPublicPolicy: false\n        IgnorePublicAcls: false\n        RestrictPublicBuckets: false\n      Tags:\n        - Key: Project\n          Value: !Ref ProjectName\n        - Key: Environment\n          Value: !Ref Environment\n\n  # S3 Bucket Policy for static website hosting\n  S3BucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket: !Ref S3Bucket\n      PolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal: '*'\n            Action: s3:GetObject\n            Resource: !Sub '\\${S3Bucket}/*'\n\n`;\n    }\n\n    if (formData.selectedInfrastructure?.includes('dynamodb')) {\n      yamlResources += `  # DynamoDB Table\n  DynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: !Sub '\\${ProjectName}-data'\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      BillingMode: PAY_PER_REQUEST\n      PointInTimeRecoverySpecification:\n        PointInTimeRecoveryEnabled: true\n      Tags:\n        - Key: Project\n          Value: !Ref ProjectName\n        - Key: Environment\n          Value: !Ref Environment\n\n`;\n    }\n\n    // Compute Resources - Fixed IAM role without custom naming\n    if (formData.selectedCompute?.includes('lambda-functions')) {\n      yamlResources += `  # Lambda Execution Role (no custom name to avoid conflicts)\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Tags:\n        - Key: Project\n          Value: !Ref ProjectName\n        - Key: Environment\n          Value: !Ref Environment\n\n  # Lambda Function\n  LambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub '\\${ProjectName}-function'\n      Runtime: nodejs18.x\n      Handler: index.handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        ZipFile: |\n          exports.handler = async (event) => {\n              console.log('Event:', JSON.stringify(event, null, 2));\n              \n              const response = {\n                  statusCode: 200,\n                  headers: {\n                      'Content-Type': 'application/json',\n                      'Access-Control-Allow-Origin': '*'\n                  },\n                  body: JSON.stringify({\n                      message: 'Hello from ${formData.projectName || 'LambdaForge'}!',\n                      timestamp: new Date().toISOString(),\n                      environment: process.env.ENVIRONMENT || 'Development'\n                  })\n              };\n              \n              return response;\n          };\n      Environment:\n        Variables:\n          PROJECT_NAME: !Ref ProjectName\n          ENVIRONMENT: !Ref Environment\n      Tags:\n        - Key: Project\n          Value: !Ref ProjectName\n        - Key: Environment\n          Value: !Ref Environment\n\n`;\n    }\n\n    // Integration Resources\n    if (formData.selectedIntegration?.includes('api-gateway')) {\n      yamlResources += `  # API Gateway\n  ApiGateway:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Sub '\\${ProjectName}-api'\n      Description: !Sub 'API for \\${ProjectName}'\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n      Tags:\n        - Key: Project\n          Value: !Ref ProjectName\n        - Key: Environment\n          Value: !Ref Environment\n\n`;\n\n      if (formData.selectedCompute?.includes('lambda-functions')) {\n        yamlResources += `  # API Gateway Resource\n  ApiGatewayResource:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref ApiGateway\n      ParentId: !GetAtt ApiGateway.RootResourceId\n      PathPart: api\n\n  # API Gateway Method\n  ApiGatewayMethod:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      RestApiId: !Ref ApiGateway\n      ResourceId: !Ref ApiGatewayResource\n      HttpMethod: ANY\n      AuthorizationType: NONE\n      Integration:\n        Type: AWS_PROXY\n        IntegrationHttpMethod: POST\n        Uri: !Sub 'arn:aws:apigateway:\\${AWS::Region}:lambda:path/2015-03-31/functions/\\${LambdaFunction.Arn}/invocations'\n\n  # API Gateway Deployment\n  ApiGatewayDeployment:\n    Type: AWS::ApiGateway::Deployment\n    DependsOn:\n      - ApiGatewayMethod\n    Properties:\n      RestApiId: !Ref ApiGateway\n      StageName: !Ref Environment\n\n  # Lambda Permission for API Gateway\n  LambdaApiGatewayPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: !Ref LambdaFunction\n      Action: lambda:InvokeFunction\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Sub 'arn:aws:apigateway:\\${AWS::Region}::/restapis/\\${ApiGateway}/stages/\\${Environment}/*/*'\n\n`;\n      }\n    }\n\n    // Monitoring Resources\n    if (formData.selectedMonitoring?.includes('cloudwatch')) {\n      yamlResources += `  # CloudWatch Log Group\n  LogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub '/aws/lambda/\\${ProjectName}-logs'\n      RetentionInDays: 14\n      Tags:\n        - Key: Project\n          Value: !Ref ProjectName\n        - Key: Environment\n          Value: !Ref Environment\n\n`;\n    }\n\n    return yamlResources || '  # No resources selected';\n  };\n\n  const generateOutputsYAML = () => {\n    let yamlOutputs = '';\n\n    if (formData.selectedInfrastructure?.includes('s3-bucket')) {\n      yamlOutputs += `  S3BucketName:\n    Description: S3 Bucket Name\n    Value: !Ref S3Bucket\n    Export:\n      Name: !Sub '\\${ProjectName}-s3-bucket'\n  S3BucketConsoleLink:\n    Description: S3 Bucket Console Link\n    Value: !Sub 'https://\\${AWS::Region}.console.aws.amazon.com/s3/buckets/\\${S3Bucket}'\n  S3WebsiteURL:\n    Description: S3 Static Website URL\n    Value: !Sub 'http://\\${S3Bucket}.s3-website-\\${AWS::Region}.amazonaws.com'\n    Export:\n      Name: !Sub '\\${ProjectName}-website-url'\n\n`;\n    }\n\n    if (formData.selectedInfrastructure?.includes('dynamodb')) {\n      yamlOutputs += `  DynamoDBTableName:\n    Description: DynamoDB Table Name\n    Value: !Ref DynamoDBTable\n    Export:\n      Name: !Sub '\\${ProjectName}-dynamodb-table'\n  DynamoDBConsoleLink:\n    Description: DynamoDB Console Link\n    Value: !Sub 'https://\\${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=\\${AWS::Region}#table?name=\\${DynamoDBTable}'\n\n`;\n    }\n\n    if (formData.selectedCompute?.includes('lambda-functions')) {\n      yamlOutputs += `  LambdaFunctionArn:\n    Description: Lambda Function ARN\n    Value: !GetAtt LambdaFunction.Arn\n    Export:\n      Name: !Sub '\\${ProjectName}-lambda-arn'\n  LambdaConsoleLink:\n    Description: Lambda Function Console Link\n    Value: !Sub 'https://\\${AWS::Region}.console.aws.amazon.com/lambda/home?region=\\${AWS::Region}#/functions/\\${LambdaFunction}'\n\n`;\n    }\n\n    if (formData.selectedIntegration?.includes('api-gateway')) {\n      yamlOutputs += `  ApiEndpoint:\n    Description: API Gateway endpoint URL\n    Value: !Sub 'https://\\${ApiGateway}.execute-api.\\${AWS::Region}.amazonaws.com/\\${Environment}'\n    Export:\n      Name: !Sub '\\${ProjectName}-api-endpoint'\n  ApiGatewayConsoleLink:\n    Description: API Gateway Console Link\n    Value: !Sub 'https://\\${AWS::Region}.console.aws.amazon.com/apigateway/home?region=\\${AWS::Region}#/apis/\\${ApiGateway}'\n\n`;\n    }\n\n    if (formData.selectedMonitoring?.includes('cloudwatch')) {\n      yamlOutputs += `  LogGroupName:\n    Description: CloudWatch Log Group Name\n    Value: !Ref LogGroup\n    Export:\n      Name: !Sub '\\${ProjectName}-log-group'\n  CloudWatchConsoleLink:\n    Description: CloudWatch Logs Console Link\n    Value: !Sub 'https://\\${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=\\${AWS::Region}#logsV2:log-groups/log-group/\\${LogGroup}'\n\n`;\n    }\n\n    yamlOutputs += `  CloudFormationConsoleLink:\n    Description: CloudFormation Stack Console Link\n    Value: !Sub 'https://\\${AWS::Region}.console.aws.amazon.com/cloudformation/home?region=\\${AWS::Region}#/stacks/stackinfo?stackId=\\${AWS::StackName}'\n\n  DeploymentRegion:\n    Description: AWS Region where resources are deployed\n    Value: !Ref AWS::Region\n\n`;\n\n    return yamlOutputs;\n  };\n\n  const generateDeploymentScript = () => {\n    const projectName = formData.projectName || 'lambdaforge-project';\n    const environment = formData.environment || 'Development';\n\n    return `#!/bin/bash\n\n# ${projectName} Deployment Script\n# Generated by LambdaForge on ${new Date().toISOString()}\n\nset -e\n\n# Configuration\nPROJECT_NAME=\"${projectName}\"\nENVIRONMENT=\"${environment}\"\n# Auto-detect AWS region from AWS CLI configuration\nAWS_REGION=\\$(aws configure get region)\nif [ -z \"\\$AWS_REGION\" ]; then\n    echo \"⚠️  No default region configured. Using us-east-1\"\n    AWS_REGION=\"us-east-1\"\nfi\nSTACK_NAME=\"\\${PROJECT_NAME}-stack\"\n\n# Colors for output\nRED='\\\\033[0;31m'\nGREEN='\\\\033[0;32m'\nYELLOW='\\\\033[1;33m'\nBLUE='\\\\033[0;34m'\nNC='\\\\033[0m'\n\nprint_status() {\n    echo -e \"\\${BLUE}[INFO]\\${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"\\${GREEN}[SUCCESS]\\${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"\\${RED}[ERROR]\\${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"\\${YELLOW}[WARNING]\\${NC} $1\"\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check AWS CLI\n    if ! command -v aws &> /dev/null; then\n        print_error \"AWS CLI is not installed. Please install it first.\"\n        exit 1\n    fi\n    \n    # Check AWS credentials\n    if ! aws sts get-caller-identity &> /dev/null; then\n        print_error \"AWS credentials not configured. Run 'aws configure' first.\"\n        exit 1\n    fi\n    \n    print_success \"Prerequisites check passed\"\n}\n\n# Check web application configuration\ncheck_web_app_config() {\n    if [ -n \"\\$WEB_APP_LOCAL_PATH\" ] && [ -n \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        print_error \"Cannot specify both local path and GitHub repo. Choose one.\"\n        exit 1\n    fi\n    \n    if [ -n \"\\$WEB_APP_LOCAL_PATH\" ]; then\n        if [ ! -d \"\\$WEB_APP_LOCAL_PATH\" ]; then\n            print_error \"Local web app path does not exist: \\$WEB_APP_LOCAL_PATH\"\n            exit 1\n        fi\n        print_status \"Web app source: Local folder (\\$WEB_APP_LOCAL_PATH)\"\n    elif [ -n \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        print_status \"Web app source: GitHub repository (\\$WEB_APP_GITHUB_REPO)\"\n    else\n        print_warning \"No web app source specified. Only AWS infrastructure will be created.\"\n        print_status \"To deploy a web app, set WEB_APP_LOCAL_PATH or WEB_APP_GITHUB_REPO in this script.\"\n    fi\n}\n\n# Build and package web application\nbuild_web_app() {\n    if [ -z \"\\$WEB_APP_LOCAL_PATH\" ] && [ -z \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        print_status \"Skipping web app build - no source specified\"\n        return 0\n    fi\n    \n    print_status \"Building web application...\"\n    \n    # Create temporary build directory\n    BUILD_DIR=\"\\$(mktemp -d)\"\n    print_status \"Using build directory: \\$BUILD_DIR\"\n    \n    if [ -n \"\\$WEB_APP_LOCAL_PATH\" ]; then\n        # Copy from local path\n        print_status \"Copying from local path...\"\n        cp -r \"\\$WEB_APP_LOCAL_PATH\"/* \"\\$BUILD_DIR/\"\n    elif [ -n \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        # Clone from GitHub\n        print_status \"Cloning from GitHub...\"\n        git clone \"\\$WEB_APP_GITHUB_REPO\" \"\\$BUILD_DIR\"\n    fi\n    \n    # Build the application\n    cd \"\\$BUILD_DIR\"\n    \n    if [ -f \"package.json\" ]; then\n        print_status \"Installing dependencies...\"\n        npm install\n        \n        print_status \"Building application...\"\n        npm run build\n        \n        if [ -d \"build\" ]; then\n            BUILT_APP_PATH=\"\\$BUILD_DIR/build\"\n        elif [ -d \"dist\" ]; then\n            BUILT_APP_PATH=\"\\$BUILD_DIR/dist\"\n        else\n            print_error \"Build directory not found. Expected 'build' or 'dist' folder.\"\n            exit 1\n        fi\n    else\n        print_status \"No package.json found, assuming static files\"\n        BUILT_APP_PATH=\"\\$BUILD_DIR\"\n    fi\n    \n    print_success \"Web application built successfully\"\n    echo \"Built app location: \\$BUILT_APP_PATH\"\n}\n\n# Deploy web application to S3\ndeploy_web_app() {\n    if [ -z \"\\$BUILT_APP_PATH\" ]; then\n        print_status \"Skipping web app deployment - no built app\"\n        return 0\n    fi\n    \n    print_status \"Deploying web application to S3...\"\n    \n    # Get S3 bucket name from CloudFormation outputs\n    S3_BUCKET=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`S3BucketName\\`].OutputValue' \\\\\n        --output text)\n    \n    if [ -z \"\\$S3_BUCKET\" ] || [ \"\\$S3_BUCKET\" = \"None\" ]; then\n        print_warning \"No S3 bucket found in stack outputs. Skipping web app deployment.\"\n        return 0\n    fi\n    \n    print_status \"Uploading to S3 bucket: \\$S3_BUCKET\"\n    \n    # Upload files to S3\n    aws s3 sync \"\\$BUILT_APP_PATH\" \"s3://\\$S3_BUCKET\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --delete\n    \n    # Configure S3 for static website hosting\n    aws s3 website \"s3://\\$S3_BUCKET\" \\\\\n        --index-document index.html \\\\\n        --error-document error.html \\\\\n        --region \"\\$AWS_REGION\"\n    \n    # Get website URL\n    WEBSITE_URL=\"http://\\$S3_BUCKET.s3-website-\\$AWS_REGION.amazonaws.com\"\n    \n    print_success \"Web application deployed successfully!\"\n    echo \"\"\n    print_success \"🌐 Your web application is available at:\"\n    echo \"   \\$WEBSITE_URL\"\n    echo \"\"\n}\n\n# Deploy or update the CloudFormation stack\ndeploy_stack() {\n    print_status \"Checking if stack exists...\"\n    \n    if aws cloudformation describe-stacks --stack-name \"\\$STACK_NAME\" --region \"\\$AWS_REGION\" &>/dev/null; then\n        print_status \"Stack exists. Updating...\"\n        OPERATION=\"update-stack\"\n    else\n        print_status \"Stack does not exist. Creating...\"\n        OPERATION=\"create-stack\"\n    fi\n    \n    print_status \"Deploying CloudFormation stack...\"\n    print_status \"Stack Name: \\$STACK_NAME\"\n    print_status \"Region: \\$AWS_REGION\"\n    print_status \"Template: template.yaml\"\n    \n    # Deploy the stack\n    aws cloudformation \\$OPERATION \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --template-body file://template.yaml \\\\\n        --capabilities CAPABILITY_IAM \\\\\n        --region \"\\$AWS_REGION\"\n    \n    if [ \\$? -ne 0 ]; then\n        print_error \"Failed to create/update the stack\"\n        exit 1\n    fi\n    \n    print_status \"Waiting for stack operation to complete...\"\n    print_status \"This may take several minutes...\"\n    \n    # Wait for the operation to complete\n    if [ \"\\$OPERATION\" = \"create-stack\" ]; then\n        WAIT_CONDITION=\"stack-create-complete\"\n    else\n        WAIT_CONDITION=\"stack-update-complete\"\n    fi\n    \n    if aws cloudformation wait \\$WAIT_CONDITION --stack-name \"\\$STACK_NAME\" --region \"\\$AWS_REGION\"; then\n        print_success \"Stack operation completed successfully! 🎉\"\n    else\n        print_error \"Stack operation failed or timed out\"\n        print_status \"Check the CloudFormation console for details:\"\n        echo \"https://\\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\\$AWS_REGION#/stacks\"\n        exit 1\n    fi\n}\n\n# Show deployment results\nshow_results() {\n    print_success \"🎉 Deployment completed successfully!\"\n    echo \"\"\n    print_status \"📋 Resource Summary:\"\n    \n    # Get stack outputs\n    aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \\\\\n        --output table\n    \n    echo \"\"\n    print_status \"🔗 AWS Console Links:\"\n    \n    # CloudFormation Console\n    echo \"📊 CloudFormation Stack:\"\n    echo \"   https://\\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\\$AWS_REGION#/stacks/stackinfo?stackId=\\$STACK_NAME\"\n    \n    # Get resource links\n    LAMBDA_FUNCTION=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`LambdaFunctionName\\`].OutputValue' \\\\\n        --output text 2>/dev/null)\n    \n    API_GATEWAY=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`ApiGatewayUrl\\`].OutputValue' \\\\\n        --output text 2>/dev/null)\n    \n    S3_BUCKET=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`S3BucketName\\`].OutputValue' \\\\\n        --output text 2>/dev/null)\n    \n    if [ -n \"\\$LAMBDA_FUNCTION\" ] && [ \"\\$LAMBDA_FUNCTION\" != \"None\" ]; then\n        echo \"⚡ Lambda Function:\"\n        echo \"   https://\\$AWS_REGION.console.aws.amazon.com/lambda/home?region=\\$AWS_REGION#/functions/\\$LAMBDA_FUNCTION\"\n    fi\n    \n    if [ -n \"\\$API_GATEWAY\" ] && [ \"\\$API_GATEWAY\" != \"None\" ]; then\n        echo \"🌐 API Gateway:\"\n        echo \"   \\$API_GATEWAY\"\n    fi\n    \n    if [ -n \"\\$S3_BUCKET\" ] && [ \"\\$S3_BUCKET\" != \"None\" ]; then\n        echo \"🪣 S3 Bucket:\"\n        echo \"   https://s3.console.aws.amazon.com/s3/buckets/\\$S3_BUCKET?region=\\$AWS_REGION\"\n    fi\n    \n    echo \"\"\n    print_status \"💡 Next Steps:\"\n    echo \"  • Test your deployed resources using the links above\"\n    echo \"  • Monitor logs in CloudWatch\"\n    echo \"  • Use delete.sh to clean up resources when done\"\n    echo \"\"\n}\n\n# Main deployment function\nmain() {\n    echo \"\"\n    echo \"======================================\"\n    echo \"🚀 ${projectName} Deployment\"\n    echo \"======================================\"\n    echo \"Project: \\$PROJECT_NAME\"\n    echo \"Region: \\$AWS_REGION\"\n    echo \"\"\n    \n    check_prerequisites\n    check_web_app_config\n    build_web_app\n    deploy_stack\n    deploy_web_app\n    show_results\n}\n\n# Run with error handling\nif [ \"\\${BASH_SOURCE[0]}\" == \"\\${0}\" ]; then\n    main \"$@\"\nfi\n`;\n  };\n\n  const generateDeleteScript = () => {\n    const projectName = formData.projectName || 'lambdaforge-project';\n\n    return `#!/bin/bash\n\n# ${projectName} Resource Cleanup Script\n# Generated by LambdaForge on ${new Date().toISOString()}\n# ⚠️  WARNING: This script will DELETE all resources created by the deployment!\n\nset -e\n\n# Configuration\nPROJECT_NAME=\"${projectName}\"\n# Auto-detect AWS region from AWS CLI configuration\nAWS_REGION=\\$(aws configure get region)\nif [ -z \"\\$AWS_REGION\" ]; then\n    echo \"⚠️  No default region configured. Using us-east-1\"\n    AWS_REGION=\"us-east-1\"\nfi\nSTACK_NAME=\"\\${PROJECT_NAME}-stack\"\n\n# Web Application Deployment Configuration\n# Set one of these to deploy the actual web application:\n# WEB_APP_LOCAL_PATH=\"/path/to/your/web/app\"          # Local folder path\n# WEB_APP_GITHUB_REPO=\"https://github.com/user/repo\" # GitHub repository URL\nWEB_APP_LOCAL_PATH=\"\"\nWEB_APP_GITHUB_REPO=\"\"\n\n# Colors for output\nRED='\\\\033[0;31m'\nGREEN='\\\\033[0;32m'\nYELLOW='\\\\033[1;33m'\nBLUE='\\\\033[0;34m'\nNC='\\\\033[0m' # No Color\n\n# Print functions\nprint_status() {\n    echo -e \"\\${BLUE}ℹ️  \\$1\\${NC}\"\n}\n\nprint_success() {\n    echo -e \"\\${GREEN}✅ \\$1\\${NC}\"\n}\n\nprint_warning() {\n    echo -e \"\\${YELLOW}⚠️  \\$1\\${NC}\"\n}\n\nprint_error() {\n    echo -e \"\\${RED}❌ \\$1\\${NC}\"\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check AWS CLI\n    if ! command -v aws &> /dev/null; then\n        print_error \"AWS CLI is not installed. Please install it first.\"\n        exit 1\n    fi\n    \n    # Check AWS credentials\n    if ! aws sts get-caller-identity &> /dev/null; then\n        print_error \"AWS credentials not configured. Run 'aws configure' first.\"\n        exit 1\n    fi\n    \n    print_success \"Prerequisites check passed\"\n}\n\n# Check web application configuration\ncheck_web_app_config() {\n    if [ -n \"\\$WEB_APP_LOCAL_PATH\" ] && [ -n \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        print_error \"Cannot specify both local path and GitHub repo. Choose one.\"\n        exit 1\n    fi\n    \n    if [ -n \"\\$WEB_APP_LOCAL_PATH\" ]; then\n        if [ ! -d \"\\$WEB_APP_LOCAL_PATH\" ]; then\n            print_error \"Local web app path does not exist: \\$WEB_APP_LOCAL_PATH\"\n            exit 1\n        fi\n        print_status \"Web app source: Local folder (\\$WEB_APP_LOCAL_PATH)\"\n    elif [ -n \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        print_status \"Web app source: GitHub repository (\\$WEB_APP_GITHUB_REPO)\"\n    else\n        print_warning \"No web app source specified. Only AWS infrastructure will be created.\"\n        print_status \"To deploy a web app, set WEB_APP_LOCAL_PATH or WEB_APP_GITHUB_REPO in this script.\"\n    fi\n}\n\n# Build and package web application\nbuild_web_app() {\n    if [ -z \"\\$WEB_APP_LOCAL_PATH\" ] && [ -z \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        print_status \"Skipping web app build - no source specified\"\n        return 0\n    fi\n    \n    print_status \"Building web application...\"\n    \n    # Create temporary build directory\n    BUILD_DIR=\"\\$(mktemp -d)\"\n    print_status \"Using build directory: \\$BUILD_DIR\"\n    \n    if [ -n \"\\$WEB_APP_LOCAL_PATH\" ]; then\n        # Copy from local path\n        print_status \"Copying from local path...\"\n        cp -r \"\\$WEB_APP_LOCAL_PATH\"/* \"\\$BUILD_DIR/\"\n    elif [ -n \"\\$WEB_APP_GITHUB_REPO\" ]; then\n        # Clone from GitHub\n        print_status \"Cloning from GitHub...\"\n        git clone \"\\$WEB_APP_GITHUB_REPO\" \"\\$BUILD_DIR\"\n    fi\n    \n    # Build the application\n    cd \"\\$BUILD_DIR\"\n    \n    if [ -f \"package.json\" ]; then\n        print_status \"Installing dependencies...\"\n        npm install\n        \n        print_status \"Building application...\"\n        npm run build\n        \n        if [ -d \"build\" ]; then\n            BUILT_APP_PATH=\"\\$BUILD_DIR/build\"\n        elif [ -d \"dist\" ]; then\n            BUILT_APP_PATH=\"\\$BUILD_DIR/dist\"\n        else\n            print_error \"Build directory not found. Expected 'build' or 'dist' folder.\"\n            exit 1\n        fi\n    else\n        print_status \"No package.json found, assuming static files\"\n        BUILT_APP_PATH=\"\\$BUILD_DIR\"\n    fi\n    \n    print_success \"Web application built successfully\"\n    echo \"Built app location: \\$BUILT_APP_PATH\"\n}\n\n# Deploy web application to S3\ndeploy_web_app() {\n    if [ -z \"\\$BUILT_APP_PATH\" ]; then\n        print_status \"Skipping web app deployment - no built app\"\n        return 0\n    fi\n    \n    print_status \"Deploying web application to S3...\"\n    \n    # Get S3 bucket name from CloudFormation outputs\n    S3_BUCKET=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`S3BucketName\\`].OutputValue' \\\\\n        --output text)\n    \n    if [ -z \"\\$S3_BUCKET\" ] || [ \"\\$S3_BUCKET\" = \"None\" ]; then\n        print_warning \"No S3 bucket found in stack outputs. Skipping web app deployment.\"\n        return 0\n    fi\n    \n    print_status \"Uploading to S3 bucket: \\$S3_BUCKET\"\n    \n    # Upload files to S3\n    aws s3 sync \"\\$BUILT_APP_PATH\" \"s3://\\$S3_BUCKET\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --delete\n    \n    # Configure S3 for static website hosting\n    aws s3 website \"s3://\\$S3_BUCKET\" \\\\\n        --index-document index.html \\\\\n        --error-document error.html \\\\\n        --region \"\\$AWS_REGION\"\n    \n    # Get website URL\n    WEBSITE_URL=\"http://\\$S3_BUCKET.s3-website-\\$AWS_REGION.amazonaws.com\"\n    \n    print_success \"Web application deployed successfully!\"\n    echo \"\"\n    print_success \"🌐 Your web application is available at:\"\n    echo \"   \\$WEBSITE_URL\"\n    echo \"\"\n}\n\n# Deploy or update the CloudFormation stack\ndeploy_stack() {\n    print_status \"Checking if stack exists...\"\n    \n    if aws cloudformation describe-stacks --stack-name \"\\$STACK_NAME\" --region \"\\$AWS_REGION\" &>/dev/null; then\n        print_status \"Stack exists. Updating...\"\n        OPERATION=\"update-stack\"\n    else\n        print_status \"Stack does not exist. Creating...\"\n        OPERATION=\"create-stack\"\n    fi\n    \n    print_status \"Deploying CloudFormation stack...\"\n    print_status \"Stack Name: \\$STACK_NAME\"\n    print_status \"Region: \\$AWS_REGION\"\n    print_status \"Template: template.yaml\"\n    \n    # Deploy the stack\n    aws cloudformation \\$OPERATION \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --template-body file://template.yaml \\\\\n        --capabilities CAPABILITY_IAM \\\\\n        --region \"\\$AWS_REGION\"\n    \n    if [ \\$? -ne 0 ]; then\n        print_error \"Failed to create/update the stack\"\n        exit 1\n    fi\n    \n    print_status \"Waiting for stack operation to complete...\"\n    print_status \"This may take several minutes...\"\n    \n    # Wait for the operation to complete\n    if [ \"\\$OPERATION\" = \"create-stack\" ]; then\n        WAIT_CONDITION=\"stack-create-complete\"\n    else\n        WAIT_CONDITION=\"stack-update-complete\"\n    fi\n    \n    if aws cloudformation wait \\$WAIT_CONDITION --stack-name \"\\$STACK_NAME\" --region \"\\$AWS_REGION\"; then\n        print_success \"Stack operation completed successfully! 🎉\"\n    else\n        print_error \"Stack operation failed or timed out\"\n        print_status \"Check the CloudFormation console for details:\"\n        echo \"https://\\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\\$AWS_REGION#/stacks\"\n        exit 1\n    fi\n}\n\n# Show deployment results\nshow_results() {\n    print_success \"🎉 Deployment completed successfully!\"\n    echo \"\"\n    print_status \"📋 Resource Summary:\"\n    \n    # Get stack outputs\n    aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \\\\\n        --output table\n    \n    echo \"\"\n    print_status \"🔗 AWS Console Links:\"\n    \n    # CloudFormation Console\n    echo \"📊 CloudFormation Stack:\"\n    echo \"   https://\\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\\$AWS_REGION#/stacks/stackinfo?stackId=\\$STACK_NAME\"\n    \n    # Get resource links\n    LAMBDA_FUNCTION=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`LambdaFunctionName\\`].OutputValue' \\\\\n        --output text 2>/dev/null)\n    \n    API_GATEWAY=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`ApiGatewayUrl\\`].OutputValue' \\\\\n        --output text 2>/dev/null)\n    \n    S3_BUCKET=\\$(aws cloudformation describe-stacks \\\\\n        --stack-name \"\\$STACK_NAME\" \\\\\n        --region \"\\$AWS_REGION\" \\\\\n        --query 'Stacks[0].Outputs[?OutputKey==\\`S3BucketName\\`].OutputValue' \\\\\n        --output text 2>/dev/null)\n    \n    if [ -n \"\\$LAMBDA_FUNCTION\" ] && [ \"\\$LAMBDA_FUNCTION\" != \"None\" ]; then\n        echo \"⚡ Lambda Function:\"\n        echo \"   https://\\$AWS_REGION.console.aws.amazon.com/lambda/home?region=\\$AWS_REGION#/functions/\\$LAMBDA_FUNCTION\"\n    fi\n    \n    if [ -n \"\\$API_GATEWAY\" ] && [ \"\\$API_GATEWAY\" != \"None\" ]; then\n        echo \"🌐 API Gateway:\"\n        echo \"   \\$API_GATEWAY\"\n    fi\n    \n    if [ -n \"\\$S3_BUCKET\" ] && [ \"\\$S3_BUCKET\" != \"None\" ]; then\n        echo \"🪣 S3 Bucket:\"\n        echo \"   https://s3.console.aws.amazon.com/s3/buckets/\\$S3_BUCKET?region=\\$AWS_REGION\"\n    fi\n    \n    echo \"\"\n    print_status \"💡 Next Steps:\"\n    echo \"  • Test your deployed resources using the links above\"\n    echo \"  • Monitor logs in CloudWatch\"\n    echo \"  • Use delete.sh to clean up resources when done\"\n    echo \"\"\n}\n\n# Main deployment function\nmain() {\n    echo \"\"\n    echo \"======================================\"\n    echo \"🚀 ${projectName} Deployment\"\n    echo \"======================================\"\n    echo \"Project: \\$PROJECT_NAME\"\n    echo \"Region: \\$AWS_REGION\"\n    echo \"\"\n    \n    check_prerequisites\n    check_web_app_config\n    build_web_app\n    deploy_stack\n    deploy_web_app\n    show_results\n}\n\n# Run with error handling\nif [ \"\\${BASH_SOURCE[0]}\" == \"\\${0}\" ]; then\n    main \"$@\"\nfi\n`;\n  };\n\n  const generateReadme = () => {\n    const projectName = formData.projectName || 'LambdaForge Project';\n    const environment = formData.environment || 'Development';\n\n    return `# ${projectName}\n\nGenerated by **LambdaForge** - AWS Infrastructure Automation Platform\n\n## Overview\n\nThis project contains the infrastructure and deployment configuration for **${projectName}**.\n\n- **Environment:** ${environment}\n- **AWS Region:** Auto-detected from AWS CLI configuration\n- **Generated:** ${new Date().toISOString()}\n\n## Architecture\n\n### Selected AWS Services\n\n#### Infrastructure Services\n${formData.selectedInfrastructure?.map(service => `- ${service.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`).join('\\n') || '- None selected'}\n\n#### Compute Services\n${formData.selectedCompute?.map(service => `- ${service.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`).join('\\n') || '- None selected'}\n\n#### Integration Services\n${formData.selectedIntegration?.map(service => `- ${service.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`).join('\\n') || '- None selected'}\n\n#### Security Services\n${formData.selectedSecurity?.map(service => `- ${service.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`).join('\\n') || '- None selected'}\n\n#### Monitoring Services\n${formData.selectedMonitoring?.map(service => `- ${service.replace(/-/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}`).join('\\n') || '- None selected'}\n\n## 🚨 CRITICAL REQUIREMENTS\n\n### ⚠️ IAM Permissions Required\n\n**URGENT**: You must have the following IAM permissions or deployment will fail:\n\n- \\`iam:CreateRole\\` - Required for Lambda execution roles\n- \\`iam:AttachRolePolicy\\` - Required for role policy attachment\n- \\`iam:PassRole\\` - Required for Lambda function creation\n- \\`cloudformation:*\\` - Required for stack operations\n- \\`lambda:*\\` - Required for Lambda function management\n- \\`s3:*\\` - Required for S3 bucket operations\n- \\`apigateway:*\\` - Required for API Gateway (if selected)\n- \\`logs:*\\` - Required for CloudWatch logs\n\n**Common Error Without Proper Permissions:**\n\\`\\`\\`\nUser: arn:aws:iam::ACCOUNT:user/USERNAME is not authorized to perform: iam:CreateRole\n\\`\\`\\`\n\n### 🌍 AWS Region Configuration\n\n**CRITICAL**: Your AWS CLI region must match your intended deployment region.\n\n**Check your current region:**\n\\`\\`\\`bash\naws configure get region\n\\`\\`\\`\n\n**Common Error with Region Mismatch:**\n\\`\\`\\`\nCould not connect to the endpoint URL: \"https://cloudformation.us-east-1.amazonaws.com/\"\n\\`\\`\\`\n\n**Set your region if needed:**\n\\`\\`\\`bash\naws configure set region YOUR_PREFERRED_REGION\n\\`\\`\\`\n\n## Quick Start\n\n### Prerequisites\n\n- ✅ AWS CLI installed and configured\n- ✅ **CRITICAL**: Appropriate IAM permissions (see above)\n- ✅ **CRITICAL**: Correct AWS region configured\n- ✅ Bash shell (for deployment script)\n\n### Deployment\n\n\\`\\`\\`bash\n# 1. Extract the zip file\nunzip ${projectName || 'project'}-infrastructure.zip\ncd ${projectName || 'project'}-infrastructure/\n\n# 2. Make scripts executable\nchmod +x deploy.sh\nchmod +x delete.sh\n\n# 3. Verify your AWS configuration\naws sts get-caller-identity\naws configure get region\n\n# 4. (Optional) Configure web application deployment\n# Edit deploy.sh and set either:\n# WEB_APP_LOCAL_PATH=\"/path/to/your/web/app\"          # For local folder\n# WEB_APP_GITHUB_REPO=\"https://github.com/user/repo\" # For GitHub repo\n\n# 5. Run deployment\n./deploy.sh\n\\`\\`\\`\n\n### Web Application Deployment Options\n\n#### Option 1: Deploy from Local Folder\n\\`\\`\\`bash\n# Edit deploy.sh and set:\nWEB_APP_LOCAL_PATH=\"/path/to/your/react/app\"\n\\`\\`\\`\n\n#### Option 2: Deploy from GitHub Repository\n\\`\\`\\`bash\n# Edit deploy.sh and set:\nWEB_APP_GITHUB_REPO=\"https://github.com/yourusername/your-repo\"\n\\`\\`\\`\n\n#### Option 3: Infrastructure Only (Default)\nIf neither path is set, only AWS infrastructure will be created without deploying a web application.\n\n### Example: Deploy LambdaForge Application\n\nTo deploy the LambdaForge application itself:\n\n\\`\\`\\`bash\n# From GitHub (public repository):\nWEB_APP_GITHUB_REPO=\"https://github.com/your-username/lambdaforge\"\n\n# Or from local development:\nWEB_APP_LOCAL_PATH=\"/Users/yourusername/Documents/lambdaforge\"\n\\`\\`\\`\n\nAfter deployment, your LambdaForge app will be available at the S3 website URL provided in the outputs.\n\n### Cleanup (Delete All Resources)\n\n\\`\\`\\`bash\n# ⚠️ WARNING: This will DELETE all created resources!\n./delete.sh\n\\`\\`\\`\n\n## Cost Estimation\n\nBased on your selected services, the estimated monthly cost is **$${estimatedCost}**.\n\n## AWS Console Links\n\nAfter deployment, the script will provide direct links to all created resources.\n\nGeneral AWS Console links:\n- [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/)\n- [Lambda Functions](https://console.aws.amazon.com/lambda/)\n- [S3 Buckets](https://console.aws.amazon.com/s3/)\n- [Cost Explorer](https://console.aws.amazon.com/cost-management/home#/cost-explorer)\n\n## 🔧 Troubleshooting\n\n### Common Deployment Errors\n\n#### Error: \"User is not authorized to perform: iam:CreateRole\"\n**Cause**: Missing IAM permissions\n**Solution**: Contact your AWS administrator to grant the required permissions listed above\n\n#### Error: \"Could not connect to the endpoint URL\"\n**Cause**: Region mismatch between AWS CLI and CloudFormation endpoint\n**Solution**: \n\\`\\`\\`bash\naws configure set region YOUR_CORRECT_REGION\n\\`\\`\\`\n\n#### Error: \"Stack already exists\"\n**Cause**: Previous deployment with same project name\n**Solution**: Either use a different project name or delete the existing stack:\n\\`\\`\\`bash\n./delete.sh\n\\`\\`\\`\n\n#### Error: \"Template format error\"\n**Cause**: Using old JSON template format\n**Solution**: Use the new template.yaml generated by this version (proper YAML format)\n\n### Getting Help\n\nIf you encounter issues:\n1. Check the CloudFormation console for detailed error messages\n2. Verify your AWS CLI configuration: \\`aws configure list\\`\n3. Ensure you have the required IAM permissions\n4. Check that you're in the correct AWS region\n\n## Files Included\n\n- \\`template.yaml\\` - Fixed CloudFormation template (proper YAML format)\n- \\`deploy.sh\\` - Enhanced deployment script with region auto-detection\n- \\`delete.sh\\` - Resource cleanup script (⚠️ DELETES all resources!)\n- \\`README.md\\` - This comprehensive documentation file\n\n### File Descriptions\n\n#### \\`template.yaml\\`\n- Proper YAML CloudFormation format (not JSON)\n- Auto-detects AWS region and account ID\n- Includes console links for all resources\n- Fixed IAM role naming to avoid conflicts\n\n#### \\`deploy.sh\\`\n- Auto-detects your AWS CLI region configuration\n- Validates prerequisites before deployment\n- Provides direct links to all created resources\n- Enhanced error handling and colored output\n\n#### \\`delete.sh\\` ⚠️\n- **DANGER**: Permanently deletes ALL created resources\n- Shows resources before deletion for confirmation\n- Requires typing 'DELETE' to confirm\n- Use when you want to clean up and stop AWS charges\n\n---\n\n**Generated by LambdaForge** - Making AWS deployment simple and automated.\n`;\n  };\n\n  // Download single file\n  const downloadFile = (filename, content) => {\n    const element = document.createElement('a');\n    const file = new Blob([content], { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    URL.revokeObjectURL(element.href);\n  };\n\n  // Create and download zip file\n  const downloadZipFile = async (files, projectName) => {\n    // Dynamically import JSZip\n    const JSZip = (await import('jszip')).default;\n    \n    const zip = new JSZip();\n    \n    // Add all files to zip\n    Object.entries(files).forEach(([filename, content]) => {\n      zip.file(filename, content);\n    });\n    \n    // Generate zip file\n    const zipBlob = await zip.generateAsync({ type: 'blob' });\n    \n    // Download zip file\n    const element = document.createElement('a');\n    element.href = URL.createObjectURL(zipBlob);\n    element.download = `${projectName}-infrastructure.zip`;\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    URL.revokeObjectURL(element.href);\n  };\n\n  // Export Configuration function - makes the button functional!\n  const exportConfiguration = async () => {\n    setIsExporting(true);\n    \n    try {\n      const projectName = formData.projectName || 'lambdaforge-project';\n      \n      // Generate all files\n      const files = {\n        'template.yaml': generateCloudFormationTemplate(),\n        'deploy.sh': generateDeploymentScript(),\n        'delete.sh': generateDeleteScript(),\n        'README.md': generateReadme()\n      };\n\n      setGeneratedFiles(files);\n\n      // Download as zip file\n      await downloadZipFile(files, projectName);\n\n      // Show success message\n      setTimeout(() => {\n        alert(`✅ Successfully exported ${projectName}-infrastructure.zip!\\n\\n📦 Package contains:\\n${Object.keys(files).map(filename => `• ${filename}`).join('\\n')}\\n\\n🚀 Next steps:\\n1. Extract the zip file\\n2. Run: chmod +x deploy.sh delete.sh\\n3. Verify AWS permissions and region\\n4. Run: ./deploy.sh\\n\\n✨ Features included:\\n• Auto-detects your AWS region\\n• Provides direct links to all created resources\\n• Fixed IAM role naming issues\\n• Proper YAML CloudFormation format\\n• Resource cleanup script (delete.sh)\\n• Comprehensive error handling`);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Export failed:', error);\n      alert('❌ Export failed. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const simulateDeployment = async () => {\n    setIsGenerating(true);\n    setDeploymentStatus('generating');\n    setProgress(0);\n    setGeneratedResources([]);\n\n    const tasks = [\n      { name: 'Validating AWS credentials', duration: 800 },\n      { name: 'Analyzing infrastructure requirements', duration: 1200 },\n      { name: 'Generating CloudFormation templates', duration: 1500 },\n      { name: 'Creating deployment scripts', duration: 1000 },\n      { name: 'Creating resource cleanup scripts', duration: 800 },\n      { name: 'Generating documentation', duration: 800 },\n      { name: 'Validating template syntax', duration: 1000 },\n      { name: 'Preparing deployment package', duration: 700 }\n    ];\n\n    let totalProgress = 0;\n    const progressStep = 100 / tasks.length;\n\n    for (let i = 0; i < tasks.length; i++) {\n      setCurrentTask(tasks[i].name);\n      \n      await new Promise(resolve => setTimeout(resolve, tasks[i].duration));\n      \n      totalProgress += progressStep;\n      setProgress(Math.round(totalProgress));\n\n      // Add generated resources as we progress\n      if (i === 2) { // After CloudFormation generation\n        setGeneratedResources(prev => [...prev, \n          { name: 'CloudFormation Template', id: 'template.yaml', status: 'generated', type: 'infrastructure' }\n        ]);\n      }\n      if (i === 3) { // After deployment script\n        setGeneratedResources(prev => [...prev, \n          { name: 'Deployment Script', id: 'deploy.sh', status: 'generated', type: 'automation' }\n        ]);\n      }\n      if (i === 4) { // After generating cleanup script\n        setGeneratedResources(prev => [...prev, \n          { name: 'Resource Cleanup Script', id: 'delete.sh', status: 'generated', type: 'automation' }\n        ]);\n      }\n      if (i === 5) { // After documentation\n        setGeneratedResources(prev => [...prev, \n          { name: 'README Documentation', id: 'README.md', status: 'generated', type: 'documentation' }\n        ]);\n      }\n    }\n\n    // Generate all files automatically\n    const files = {\n      'template.yaml': generateCloudFormationTemplate(),\n      'deploy.sh': generateDeploymentScript(),\n      'delete.sh': generateDeleteScript(),\n      'README.md': generateReadme()\n    };\n    \n    setGeneratedFiles(files);\n    setCurrentTask('All deployment files generated successfully!');\n    setDeploymentStatus('completed');\n    setIsGenerating(false);\n  };\n\n  const getServiceCounts = () => {\n    return {\n      infrastructure: formData.selectedInfrastructure?.length || 0,\n      compute: formData.selectedCompute?.length || 0,\n      integration: formData.selectedIntegration?.length || 0,\n      security: formData.selectedSecurity?.length || 0,\n      monitoring: formData.selectedMonitoring?.length || 0,\n      deployment: formData.selectedDeployment?.length || 0,\n      optimization: formData.selectedOptimization?.length || 0\n    };\n  };\n\n  const serviceCounts = getServiceCounts();\n  const totalServices = Object.values(serviceCounts).reduce((a, b) => a + b, 0);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h2 className=\"text-2xl font-bold text-aws-blue mb-2\">Generate Infrastructure</h2>\n        <p className=\"text-aws-gray-600\">\n          Review your configuration and deploy your Lambda-powered infrastructure automation.\n        </p>\n      </div>\n\n      {/* Project Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Project Info */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Configuration Summary */}\n          <div className=\"bg-aws-gray-50 border border-aws-gray-200 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-aws-blue mb-4 flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2 text-aws-orange\" />\n              Configuration Summary\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-aws-blue\">{serviceCounts.infrastructure}</div>\n                <div className=\"text-sm text-aws-gray-600\">Infrastructure</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{serviceCounts.compute}</div>\n                <div className=\"text-sm text-aws-gray-600\">Compute</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{serviceCounts.security}</div>\n                <div className=\"text-sm text-aws-gray-600\">Security</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-aws-orange\">{totalServices}</div>\n                <div className=\"text-sm text-aws-gray-600\">Total Services</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Live Progress */}\n          {isGenerating && (\n            <div className=\"bg-white border border-aws-gray-200 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-aws-blue mb-4 flex items-center\">\n                <Clock className=\"w-5 h-5 mr-2 text-aws-orange animate-spin\" />\n                Deployment Progress\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-aws-gray-700\">{currentTask}</span>\n                  <span className=\"text-sm font-bold text-aws-blue\">{progress}%</span>\n                </div>\n                <div className=\"w-full bg-aws-gray-200 rounded-full h-3\">\n                  <div \n                    className=\"bg-gradient-to-r from-aws-orange to-green-500 h-3 rounded-full transition-all duration-500\"\n                    style={{ width: `${progress}%` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Generated Resources */}\n          {generatedResources.length > 0 && (\n            <div className=\"bg-white border border-aws-gray-200 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-aws-blue mb-4 flex items-center\">\n                <CheckCircle className=\"w-5 h-5 mr-2 text-green-500\" />\n                Generated Resources\n              </h3>\n              <div className=\"space-y-3\">\n                {generatedResources.map((resource, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      <div>\n                        <div className=\"font-medium text-aws-blue\">{resource.name}</div>\n                        <div className=\"text-sm text-aws-gray-600\">{resource.id}</div>\n                      </div>\n                    </div>\n                    <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded\">\n                      {resource.status}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Cost Estimate & Actions */}\n        <div className=\"space-y-6\">\n          {/* Cost Estimate */}\n          <div className=\"bg-white border border-aws-gray-200 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-aws-blue mb-4 flex items-center\">\n              <DollarSign className=\"w-5 h-5 mr-2 text-green-600\" />\n              Cost Estimate\n            </h3>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">${estimatedCost}</div>\n              <div className=\"text-sm text-aws-gray-600\">per month</div>\n            </div>\n            <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-center text-sm text-blue-800\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                Auto-scaling enabled for cost optimization\n              </div>\n            </div>\n          </div>\n\n          {/* Project Details */}\n          <div className=\"bg-white border border-aws-gray-200 rounded-lg p-6\">\n            <h3 className=\"text-lg font-semibold text-aws-blue mb-4\">Project Details</h3>\n            <div className=\"space-y-3\">\n              <div>\n                <div className=\"text-sm text-aws-gray-600\">Project Name</div>\n                <div className=\"font-medium text-aws-blue\">{formData.projectName || 'Unnamed Project'}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-aws-gray-600\">Environment</div>\n                <div className=\"font-medium text-aws-blue\">{formData.environment || 'Development'}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-aws-gray-600\">AWS Region</div>\n                <div className=\"font-medium text-aws-blue\">{formData.awsRegion || 'us-east-1'}</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Health Status */}\n          {deploymentStatus === 'completed' && (\n            <div className=\"bg-white border border-aws-gray-200 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-aws-blue mb-4 flex items-center\">\n                <Monitor className=\"w-5 h-5 mr-2 text-green-500\" />\n                Health Status\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-aws-gray-600\">Infrastructure</span>\n                  <span className=\"flex items-center text-green-600\">\n                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                    Healthy\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-aws-gray-600\">Security</span>\n                  <span className=\"flex items-center text-green-600\">\n                    <Shield className=\"w-4 h-4 mr-1\" />\n                    Secure\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-aws-gray-600\">Performance</span>\n                  <span className=\"flex items-center text-green-600\">\n                    <TrendingUp className=\"w-4 h-4 mr-1\" />\n                    Optimal\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Enhanced Export Section */}\n      {generatedFiles && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-blue-800 mb-4 flex items-center\">\n            <Package className=\"w-5 h-5 mr-2\" />\n            Generated Deployment Package\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n            {Object.entries(generatedFiles).map(([filename, content]) => (\n              <div key={filename} className=\"bg-white border border-blue-200 rounded-lg p-3 text-center\">\n                <FileText className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                <div className=\"font-medium text-blue-800 text-sm\">{filename}</div>\n                <div className=\"text-xs text-blue-600\">{Math.round(content.length / 1024)}KB</div>\n              </div>\n            ))}\n          </div>\n          <p className=\"text-sm text-blue-700\">\n            All files have been generated and downloaded. Extract them to a directory and run the deployment script.\n          </p>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <button\n          onClick={simulateDeployment}\n          disabled={isGenerating || deploymentStatus === 'completed'}\n          className={`flex-1 flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${\n            isGenerating || deploymentStatus === 'completed'\n              ? 'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed'\n              : 'bg-aws-orange text-white hover:bg-aws-orange-dark shadow-lg hover:shadow-xl'\n          }`}\n        >\n          {isGenerating ? (\n            <>\n              <Clock className=\"w-5 h-5 animate-spin\" />\n              <span>Deploying Infrastructure...</span>\n            </>\n          ) : deploymentStatus === 'completed' ? (\n            <>\n              <CheckCircle className=\"w-5 h-5\" />\n              <span>Deployment Complete</span>\n            </>\n          ) : (\n            <>\n              <Play className=\"w-5 h-5\" />\n              <span>Deploy Infrastructure</span>\n            </>\n          )}\n        </button>\n\n        <button \n          onClick={exportConfiguration}\n          disabled={isExporting}\n          className={`flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${\n            isExporting \n              ? 'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed'\n              : 'bg-green-600 text-white hover:bg-green-700 shadow-lg hover:shadow-xl'\n          }`}\n        >\n          {isExporting ? (\n            <>\n              <Clock className=\"w-5 h-5 animate-spin\" />\n              <span>Exporting...</span>\n            </>\n          ) : (\n            <>\n              <Download className=\"w-5 h-5\" />\n              <span>Export Configuration</span>\n            </>\n          )}\n        </button>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex items-center justify-between pt-6 border-t border-aws-gray-200\">\n        <button\n          onClick={prevStep}\n          className=\"flex items-center space-x-2 text-aws-gray-600 hover:text-aws-blue transition-colors duration-200\"\n        >\n          <span>← BACK</span>\n        </button>\n        <div className=\"text-sm text-aws-gray-500\">\n          Step {currentStep} of {totalSteps} - Ready to deploy! 🚀\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GenerateStep; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
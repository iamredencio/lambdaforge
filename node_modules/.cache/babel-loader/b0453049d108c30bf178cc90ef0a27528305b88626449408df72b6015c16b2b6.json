{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, _ref) => {\n  var _partitionHash$partit, _partitionHash$partit2, _regionHash$resolvedR, _partitionHash$partit3, _regionHash$resolvedR2, _regionHash$resolvedR3;\n  let {\n    useFipsEndpoint = false,\n    useDualstackEndpoint = false,\n    signingService,\n    regionHash,\n    partitionHash\n  } = _ref;\n  const partition = getResolvedPartition(region, {\n    partitionHash\n  });\n  const resolvedRegion = region in regionHash ? region : (_partitionHash$partit = (_partitionHash$partit2 = partitionHash[partition]) === null || _partitionHash$partit2 === void 0 ? void 0 : _partitionHash$partit2.endpoint) !== null && _partitionHash$partit !== void 0 ? _partitionHash$partit : region;\n  const hostnameOptions = {\n    useFipsEndpoint,\n    useDualstackEndpoint\n  };\n  const regionHostname = getHostnameFromVariants((_regionHash$resolvedR = regionHash[resolvedRegion]) === null || _regionHash$resolvedR === void 0 ? void 0 : _regionHash$resolvedR.variants, hostnameOptions);\n  const partitionHostname = getHostnameFromVariants((_partitionHash$partit3 = partitionHash[partition]) === null || _partitionHash$partit3 === void 0 ? void 0 : _partitionHash$partit3.variants, hostnameOptions);\n  const hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname,\n    partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(\"Endpoint resolution failed for: \".concat({\n      resolvedRegion,\n      useFipsEndpoint,\n      useDualstackEndpoint\n    }));\n  }\n  const signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: (_regionHash$resolvedR2 = regionHash[resolvedRegion]) === null || _regionHash$resolvedR2 === void 0 ? void 0 : _regionHash$resolvedR2.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint\n  });\n  return _objectSpread(_objectSpread({\n    partition,\n    signingService,\n    hostname\n  }, signingRegion && {\n    signingRegion\n  }), ((_regionHash$resolvedR3 = regionHash[resolvedRegion]) === null || _regionHash$resolvedR3 === void 0 ? void 0 : _regionHash$resolvedR3.signingService) && {\n    signingService: regionHash[resolvedRegion].signingService\n  });\n};","map":{"version":3,"names":["getHostnameFromVariants","getResolvedHostname","getResolvedPartition","getResolvedSigningRegion","getRegionInfo","region","_ref","_partitionHash$partit","_partitionHash$partit2","_regionHash$resolvedR","_partitionHash$partit3","_regionHash$resolvedR2","_regionHash$resolvedR3","useFipsEndpoint","useDualstackEndpoint","signingService","regionHash","partitionHash","partition","resolvedRegion","endpoint","hostnameOptions","regionHostname","variants","partitionHostname","hostname","undefined","Error","concat","signingRegion","regionRegex","_objectSpread"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js"],"sourcesContent":["import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\n    const partition = getResolvedPartition(region, { partitionHash });\n    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\n    }\n    const signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: regionHash[resolvedRegion]?.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint,\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...(signingRegion && { signingRegion }),\n        ...(regionHash[resolvedRegion]?.signingService && {\n            signingService: regionHash[resolvedRegion].signingService,\n        }),\n    };\n};\n"],"mappings":";AAAA,SAASA,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,OAAO,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAAC,IAAA,KAA4G;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAAA,IAA1G;IAAEC,eAAe,GAAG,KAAK;IAAEC,oBAAoB,GAAG,KAAK;IAAEC,cAAc;IAAEC,UAAU;IAAEC;EAAe,CAAC,GAAAX,IAAA;EACvI,MAAMY,SAAS,GAAGhB,oBAAoB,CAACG,MAAM,EAAE;IAAEY;EAAc,CAAC,CAAC;EACjE,MAAME,cAAc,GAAGd,MAAM,IAAIW,UAAU,GAAGX,MAAM,IAAAE,qBAAA,IAAAC,sBAAA,GAAGS,aAAa,CAACC,SAAS,CAAC,cAAAV,sBAAA,uBAAxBA,sBAAA,CAA0BY,QAAQ,cAAAb,qBAAA,cAAAA,qBAAA,GAAIF,MAAM;EACnG,MAAMgB,eAAe,GAAG;IAAER,eAAe;IAAEC;EAAqB,CAAC;EACjE,MAAMQ,cAAc,GAAGtB,uBAAuB,EAAAS,qBAAA,GAACO,UAAU,CAACG,cAAc,CAAC,cAAAV,qBAAA,uBAA1BA,qBAAA,CAA4Bc,QAAQ,EAAEF,eAAe,CAAC;EACrG,MAAMG,iBAAiB,GAAGxB,uBAAuB,EAAAU,sBAAA,GAACO,aAAa,CAACC,SAAS,CAAC,cAAAR,sBAAA,uBAAxBA,sBAAA,CAA0Ba,QAAQ,EAAEF,eAAe,CAAC;EACtG,MAAMI,QAAQ,GAAGxB,mBAAmB,CAACkB,cAAc,EAAE;IAAEG,cAAc;IAAEE;EAAkB,CAAC,CAAC;EAC3F,IAAIC,QAAQ,KAAKC,SAAS,EAAE;IACxB,MAAM,IAAIC,KAAK,oCAAAC,MAAA,CAAoC;MAAET,cAAc;MAAEN,eAAe;MAAEC;IAAqB,CAAC,CAAE,CAAC;EACnH;EACA,MAAMe,aAAa,GAAG1B,wBAAwB,CAACsB,QAAQ,EAAE;IACrDI,aAAa,GAAAlB,sBAAA,GAAEK,UAAU,CAACG,cAAc,CAAC,cAAAR,sBAAA,uBAA1BA,sBAAA,CAA4BkB,aAAa;IACxDC,WAAW,EAAEb,aAAa,CAACC,SAAS,CAAC,CAACY,WAAW;IACjDjB;EACJ,CAAC,CAAC;EACF,OAAAkB,aAAA,CAAAA,aAAA;IACIb,SAAS;IACTH,cAAc;IACdU;EAAQ,GACJI,aAAa,IAAI;IAAEA;EAAc,CAAC,GAClC,EAAAjB,sBAAA,GAAAI,UAAU,CAACG,cAAc,CAAC,cAAAP,sBAAA,uBAA1BA,sBAAA,CAA4BG,cAAc,KAAI;IAC9CA,cAAc,EAAEC,UAAU,CAACG,cAAc,CAAC,CAACJ;EAC/C,CAAC;AAET,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
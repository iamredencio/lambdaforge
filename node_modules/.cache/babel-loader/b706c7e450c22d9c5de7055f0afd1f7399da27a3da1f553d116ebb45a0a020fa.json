{"ast":null,"code":"// AWS Configuration for LambdaForge\n// ⚠️ SECURITY WARNING: This is a demo application. \n// In production, use IAM roles, AWS Cognito, or AWS IAM Identity Center instead of hardcoded credentials.\n\nexport const awsConfig = {\n  // AWS Bedrock settings\n  bedrock: {\n    region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n    modelId: 'anthropic.claude-3-sonnet-20240229-v1:0',\n    maxTokens: 4000,\n    temperature: 0.1,\n    topP: 0.9\n  },\n  // AWS Credentials (DEMO ONLY - DO NOT USE IN PRODUCTION)\n  // Production alternatives:\n  // 1. AWS IAM Roles with AssumeRole\n  // 2. AWS Cognito Identity Pools\n  // 3. AWS IAM Identity Center (SSO)\n  // 4. Temporary credentials via STS\n  credentials: {\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID || '',\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY || ''\n  },\n  // Security settings\n  security: {\n    // Enable HTTPS only\n    enforceHTTPS: true,\n    // Maximum credential age in milliseconds (24 hours)\n    maxCredentialAge: 24 * 60 * 60 * 1000,\n    // Enable credential validation\n    validateCredentials: true,\n    // Sanitize user inputs\n    sanitizeInputs: true\n  },\n  // Feature flags\n  features: {\n    enableAISuggestions: process.env.REACT_APP_ENABLE_AI_SUGGESTIONS !== 'false',\n    enableFallbackMode: true,\n    debugMode: process.env.REACT_APP_DEBUG_MODE === 'true',\n    // Security features\n    enableCredentialWarnings: true,\n    enableInputSanitization: true\n  },\n  // Available Bedrock regions\n  availableRegions: ['us-east-1', 'us-west-2', 'eu-west-1', 'ap-southeast-1', 'ap-northeast-1'],\n  // Supported models\n  supportedModels: [{\n    id: 'anthropic.claude-3-sonnet-20240229-v1:0',\n    name: 'Claude 3 Sonnet',\n    provider: 'Anthropic',\n    description: 'Balanced performance and speed for architecture analysis'\n  }, {\n    id: 'anthropic.claude-3-haiku-20240307-v1:0',\n    name: 'Claude 3 Haiku',\n    provider: 'Anthropic',\n    description: 'Fast and efficient for quick suggestions'\n  }]\n};\n\n// Input sanitization function\nexport const sanitizeInput = input => {\n  if (typeof input !== 'string') return input;\n\n  // Remove potentially dangerous characters\n  return input.replace(/[<>]/g, '') // Remove angle brackets\n  .replace(/javascript:/gi, '') // Remove javascript: protocol\n  .replace(/on\\w+=/gi, '') // Remove event handlers\n  .trim().substring(0, 1000); // Limit length\n};\n\n// Enhanced validation function\nexport const validateAWSConfig = () => {\n  const errors = [];\n  const warnings = [];\n\n  // Check for credentials\n  if (!awsConfig.credentials.accessKeyId) {\n    errors.push('AWS Access Key ID is required for AI suggestions');\n  } else {\n    // Check for demo/test credentials\n    if (awsConfig.credentials.accessKeyId.includes('EXAMPLE') || awsConfig.credentials.accessKeyId.includes('DEMO')) {\n      warnings.push('Demo credentials detected - replace with real credentials for production');\n    }\n  }\n  if (!awsConfig.credentials.secretAccessKey) {\n    errors.push('AWS Secret Access Key is required for AI suggestions');\n  } else {\n    // Check for demo/test credentials\n    if (awsConfig.credentials.secretAccessKey.includes('EXAMPLE') || awsConfig.credentials.secretAccessKey.includes('DEMO')) {\n      warnings.push('Demo secret key detected - replace with real credentials for production');\n    }\n  }\n\n  // Check region\n  if (!awsConfig.availableRegions.includes(awsConfig.bedrock.region)) {\n    errors.push(`Region ${awsConfig.bedrock.region} is not supported for Bedrock`);\n  }\n\n  // Security checks\n  if (window.location.protocol === 'http:' && awsConfig.security.enforceHTTPS) {\n    warnings.push('Application is running over HTTP - HTTPS recommended for production');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n// Security utilities\nexport const securityUtils = {\n  // Check if credentials appear to be production-ready\n  isProductionCredentials: (accessKeyId, secretAccessKey) => {\n    const testPatterns = [/EXAMPLE/i, /DEMO/i, /TEST/i, /FAKE/i, /SAMPLE/i];\n    return !testPatterns.some(pattern => pattern.test(accessKeyId) || pattern.test(secretAccessKey));\n  },\n  // Mask sensitive data for logging\n  maskCredentials: credentials => ({\n    accessKeyId: credentials.accessKeyId ? credentials.accessKeyId.substring(0, 4) + '***' + credentials.accessKeyId.slice(-4) : '',\n    secretAccessKey: credentials.secretAccessKey ? '***masked***' : ''\n  }),\n  // Validate input format\n  validateInputFormat: (input, type) => {\n    switch (type) {\n      case 'projectName':\n        return /^[a-zA-Z0-9-_]{1,50}$/.test(input);\n      case 'awsRegion':\n        return awsConfig.availableRegions.includes(input);\n      case 'accessKeyId':\n        return /^[A-Z0-9]{16,32}$/.test(input);\n      default:\n        return true;\n    }\n  }\n};\nexport default awsConfig;","map":{"version":3,"names":["awsConfig","bedrock","region","process","env","REACT_APP_AWS_REGION","modelId","maxTokens","temperature","topP","credentials","accessKeyId","REACT_APP_AWS_ACCESS_KEY_ID","secretAccessKey","REACT_APP_AWS_SECRET_ACCESS_KEY","security","enforceHTTPS","maxCredentialAge","validateCredentials","sanitizeInputs","features","enableAISuggestions","REACT_APP_ENABLE_AI_SUGGESTIONS","enableFallbackMode","debugMode","REACT_APP_DEBUG_MODE","enableCredentialWarnings","enableInputSanitization","availableRegions","supportedModels","id","name","provider","description","sanitizeInput","input","replace","trim","substring","validateAWSConfig","errors","warnings","push","includes","window","location","protocol","isValid","length","securityUtils","isProductionCredentials","testPatterns","some","pattern","test","maskCredentials","slice","validateInputFormat","type"],"sources":["/Users/codinggents/Documents/lambdaforge/src/config/aws-config.js"],"sourcesContent":["// AWS Configuration for LambdaForge\n// ⚠️ SECURITY WARNING: This is a demo application. \n// In production, use IAM roles, AWS Cognito, or AWS IAM Identity Center instead of hardcoded credentials.\n\nexport const awsConfig = {\n  // AWS Bedrock settings\n  bedrock: {\n    region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n    modelId: 'anthropic.claude-3-sonnet-20240229-v1:0',\n    maxTokens: 4000,\n    temperature: 0.1,\n    topP: 0.9\n  },\n\n  // AWS Credentials (DEMO ONLY - DO NOT USE IN PRODUCTION)\n  // Production alternatives:\n  // 1. AWS IAM Roles with AssumeRole\n  // 2. AWS Cognito Identity Pools\n  // 3. AWS IAM Identity Center (SSO)\n  // 4. Temporary credentials via STS\n  credentials: {\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID || '',\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY || ''\n  },\n\n  // Security settings\n  security: {\n    // Enable HTTPS only\n    enforceHTTPS: true,\n    // Maximum credential age in milliseconds (24 hours)\n    maxCredentialAge: 24 * 60 * 60 * 1000,\n    // Enable credential validation\n    validateCredentials: true,\n    // Sanitize user inputs\n    sanitizeInputs: true\n  },\n\n  // Feature flags\n  features: {\n    enableAISuggestions: process.env.REACT_APP_ENABLE_AI_SUGGESTIONS !== 'false',\n    enableFallbackMode: true,\n    debugMode: process.env.REACT_APP_DEBUG_MODE === 'true',\n    // Security features\n    enableCredentialWarnings: true,\n    enableInputSanitization: true\n  },\n\n  // Available Bedrock regions\n  availableRegions: [\n    'us-east-1',\n    'us-west-2',\n    'eu-west-1',\n    'ap-southeast-1',\n    'ap-northeast-1'\n  ],\n\n  // Supported models\n  supportedModels: [\n    {\n      id: 'anthropic.claude-3-sonnet-20240229-v1:0',\n      name: 'Claude 3 Sonnet',\n      provider: 'Anthropic',\n      description: 'Balanced performance and speed for architecture analysis'\n    },\n    {\n      id: 'anthropic.claude-3-haiku-20240307-v1:0',\n      name: 'Claude 3 Haiku',\n      provider: 'Anthropic',\n      description: 'Fast and efficient for quick suggestions'\n    }\n  ]\n};\n\n// Input sanitization function\nexport const sanitizeInput = (input) => {\n  if (typeof input !== 'string') return input;\n  \n  // Remove potentially dangerous characters\n  return input\n    .replace(/[<>]/g, '') // Remove angle brackets\n    .replace(/javascript:/gi, '') // Remove javascript: protocol\n    .replace(/on\\w+=/gi, '') // Remove event handlers\n    .trim()\n    .substring(0, 1000); // Limit length\n};\n\n// Enhanced validation function\nexport const validateAWSConfig = () => {\n  const errors = [];\n  const warnings = [];\n  \n  // Check for credentials\n  if (!awsConfig.credentials.accessKeyId) {\n    errors.push('AWS Access Key ID is required for AI suggestions');\n  } else {\n    // Check for demo/test credentials\n    if (awsConfig.credentials.accessKeyId.includes('EXAMPLE') || \n        awsConfig.credentials.accessKeyId.includes('DEMO')) {\n      warnings.push('Demo credentials detected - replace with real credentials for production');\n    }\n  }\n  \n  if (!awsConfig.credentials.secretAccessKey) {\n    errors.push('AWS Secret Access Key is required for AI suggestions');\n  } else {\n    // Check for demo/test credentials\n    if (awsConfig.credentials.secretAccessKey.includes('EXAMPLE') || \n        awsConfig.credentials.secretAccessKey.includes('DEMO')) {\n      warnings.push('Demo secret key detected - replace with real credentials for production');\n    }\n  }\n  \n  // Check region\n  if (!awsConfig.availableRegions.includes(awsConfig.bedrock.region)) {\n    errors.push(`Region ${awsConfig.bedrock.region} is not supported for Bedrock`);\n  }\n  \n  // Security checks\n  if (window.location.protocol === 'http:' && awsConfig.security.enforceHTTPS) {\n    warnings.push('Application is running over HTTP - HTTPS recommended for production');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n// Security utilities\nexport const securityUtils = {\n  // Check if credentials appear to be production-ready\n  isProductionCredentials: (accessKeyId, secretAccessKey) => {\n    const testPatterns = [\n      /EXAMPLE/i,\n      /DEMO/i,\n      /TEST/i,\n      /FAKE/i,\n      /SAMPLE/i\n    ];\n    \n    return !testPatterns.some(pattern => \n      pattern.test(accessKeyId) || pattern.test(secretAccessKey)\n    );\n  },\n  \n  // Mask sensitive data for logging\n  maskCredentials: (credentials) => ({\n    accessKeyId: credentials.accessKeyId ? \n      credentials.accessKeyId.substring(0, 4) + '***' + credentials.accessKeyId.slice(-4) : '',\n    secretAccessKey: credentials.secretAccessKey ? '***masked***' : ''\n  }),\n  \n  // Validate input format\n  validateInputFormat: (input, type) => {\n    switch (type) {\n      case 'projectName':\n        return /^[a-zA-Z0-9-_]{1,50}$/.test(input);\n      case 'awsRegion':\n        return awsConfig.availableRegions.includes(input);\n      case 'accessKeyId':\n        return /^[A-Z0-9]{16,32}$/.test(input);\n      default:\n        return true;\n    }\n  }\n};\n\nexport default awsConfig; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
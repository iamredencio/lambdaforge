{"ast":null,"code":"import { EndpointURLScheme } from \"@smithy/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n  [EndpointURLScheme.HTTP]: 80,\n  [EndpointURLScheme.HTTPS]: 443\n};\nexport const parseURL = value => {\n  const whatwgURL = (() => {\n    try {\n      if (value instanceof URL) {\n        return value;\n      }\n      if (typeof value === \"object\" && \"hostname\" in value) {\n        const {\n          hostname,\n          port,\n          protocol = \"\",\n          path = \"\",\n          query = {}\n        } = value;\n        const url = new URL(\"\".concat(protocol, \"//\").concat(hostname).concat(port ? \":\".concat(port) : \"\").concat(path));\n        url.search = Object.entries(query).map(_ref => {\n          let [k, v] = _ref;\n          return \"\".concat(k, \"=\").concat(v);\n        }).join(\"&\");\n        return url;\n      }\n      return new URL(value);\n    } catch (error) {\n      return null;\n    }\n  })();\n  if (!whatwgURL) {\n    console.error(\"Unable to parse \".concat(JSON.stringify(value), \" as a whatwg URL.\"));\n    return null;\n  }\n  const urlString = whatwgURL.href;\n  const {\n    host,\n    hostname,\n    pathname,\n    protocol,\n    search\n  } = whatwgURL;\n  if (search) {\n    return null;\n  }\n  const scheme = protocol.slice(0, -1);\n  if (!Object.values(EndpointURLScheme).includes(scheme)) {\n    return null;\n  }\n  const isIp = isIpAddress(hostname);\n  const inputContainsDefaultPort = urlString.includes(\"\".concat(host, \":\").concat(DEFAULT_PORTS[scheme])) || typeof value === \"string\" && value.includes(\"\".concat(host, \":\").concat(DEFAULT_PORTS[scheme]));\n  const authority = \"\".concat(host).concat(inputContainsDefaultPort ? \":\".concat(DEFAULT_PORTS[scheme]) : \"\");\n  return {\n    scheme,\n    authority,\n    path: pathname,\n    normalizedPath: pathname.endsWith(\"/\") ? pathname : \"\".concat(pathname, \"/\"),\n    isIp\n  };\n};","map":{"version":3,"names":["EndpointURLScheme","isIpAddress","DEFAULT_PORTS","HTTP","HTTPS","parseURL","value","whatwgURL","URL","hostname","port","protocol","path","query","url","concat","search","Object","entries","map","_ref","k","v","join","error","console","JSON","stringify","urlString","href","host","pathname","scheme","slice","values","includes","isIp","inputContainsDefaultPort","authority","normalizedPath","endsWith"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js"],"sourcesContent":["import { EndpointURLScheme } from \"@smithy/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n    [EndpointURLScheme.HTTP]: 80,\n    [EndpointURLScheme.HTTPS]: 443,\n};\nexport const parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => \"\".concat(shortDate, \"/\").concat(region, \"/\").concat(service, \"/\").concat(KEY_TYPE_IDENTIFIER);\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = \"\".concat(shortDate, \":\").concat(region, \":\").concat(service, \":\").concat(toHex(credsHash), \":\").concat(credentials.sessionToken);\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift()];\n  }\n  let key = \"AWS4\".concat(credentials.secretAccessKey);\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return signingKeyCache[cacheKey] = key;\n};\nexport const clearCredentialCache = () => {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(cacheKey => {\n    delete signingKeyCache[cacheKey];\n  });\n};\nconst hmac = (ctor, secret, data) => {\n  const hash = new ctor(secret);\n  hash.update(toUint8Array(data));\n  return hash.digest();\n};","map":{"version":3,"names":["toHex","toUint8Array","KEY_TYPE_IDENTIFIER","MAX_CACHE_SIZE","signingKeyCache","cacheQueue","createScope","shortDate","region","service","concat","getSigningKey","sha256Constructor","credentials","credsHash","hmac","secretAccessKey","accessKeyId","cacheKey","sessionToken","push","length","shift","key","signable","clearCredentialCache","Object","keys","forEach","ctor","secret","data","hash","update","digest"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js"],"sourcesContent":["import { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while (cacheQueue.length > MAX_CACHE_SIZE) {\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return (signingKeyCache[cacheKey] = key);\n};\nexport const clearCredentialCache = () => {\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n    });\n};\nconst hmac = (ctor, secret, data) => {\n    const hash = new ctor(secret);\n    hash.update(toUint8Array(data));\n    return hash.digest();\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,2BAA2B;AACjD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,aAAa;AACjE,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,UAAU,GAAG,EAAE;AACrB,OAAO,MAAMC,WAAW,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAAC,MAAA,CAAQH,SAAS,OAAAG,MAAA,CAAIF,MAAM,OAAAE,MAAA,CAAID,OAAO,OAAAC,MAAA,CAAIR,mBAAmB,CAAE;AACrH,OAAO,MAAMS,aAAa,GAAG,MAAAA,CAAOC,iBAAiB,EAAEC,WAAW,EAAEN,SAAS,EAAEC,MAAM,EAAEC,OAAO,KAAK;EAC/F,MAAMK,SAAS,GAAG,MAAMC,IAAI,CAACH,iBAAiB,EAAEC,WAAW,CAACG,eAAe,EAAEH,WAAW,CAACI,WAAW,CAAC;EACrG,MAAMC,QAAQ,MAAAR,MAAA,CAAMH,SAAS,OAAAG,MAAA,CAAIF,MAAM,OAAAE,MAAA,CAAID,OAAO,OAAAC,MAAA,CAAIV,KAAK,CAACc,SAAS,CAAC,OAAAJ,MAAA,CAAIG,WAAW,CAACM,YAAY,CAAE;EACpG,IAAID,QAAQ,IAAId,eAAe,EAAE;IAC7B,OAAOA,eAAe,CAACc,QAAQ,CAAC;EACpC;EACAb,UAAU,CAACe,IAAI,CAACF,QAAQ,CAAC;EACzB,OAAOb,UAAU,CAACgB,MAAM,GAAGlB,cAAc,EAAE;IACvC,OAAOC,eAAe,CAACC,UAAU,CAACiB,KAAK,CAAC,CAAC,CAAC;EAC9C;EACA,IAAIC,GAAG,UAAAb,MAAA,CAAUG,WAAW,CAACG,eAAe,CAAE;EAC9C,KAAK,MAAMQ,QAAQ,IAAI,CAACjB,SAAS,EAAEC,MAAM,EAAEC,OAAO,EAAEP,mBAAmB,CAAC,EAAE;IACtEqB,GAAG,GAAG,MAAMR,IAAI,CAACH,iBAAiB,EAAEW,GAAG,EAAEC,QAAQ,CAAC;EACtD;EACA,OAAQpB,eAAe,CAACc,QAAQ,CAAC,GAAGK,GAAG;AAC3C,CAAC;AACD,OAAO,MAAME,oBAAoB,GAAGA,CAAA,KAAM;EACtCpB,UAAU,CAACgB,MAAM,GAAG,CAAC;EACrBK,MAAM,CAACC,IAAI,CAACvB,eAAe,CAAC,CAACwB,OAAO,CAAEV,QAAQ,IAAK;IAC/C,OAAOd,eAAe,CAACc,QAAQ,CAAC;EACpC,CAAC,CAAC;AACN,CAAC;AACD,MAAMH,IAAI,GAAGA,CAACc,IAAI,EAAEC,MAAM,EAAEC,IAAI,KAAK;EACjC,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACC,MAAM,CAAC;EAC7BE,IAAI,CAACC,MAAM,CAAChC,YAAY,CAAC8B,IAAI,CAAC,CAAC;EAC/B,OAAOC,IAAI,CAACE,MAAM,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
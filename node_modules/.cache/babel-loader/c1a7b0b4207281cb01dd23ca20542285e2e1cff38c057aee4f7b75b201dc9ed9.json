{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n  if (!property) {\n    throw new Error(\"Property `\".concat(name, \"` is not resolved for AWS SDK SigV4Auth\"));\n  }\n  return property;\n};\nexport const validateSigningProperties = async signingProperties => {\n  var _context$endpointV;\n  const context = throwSigningPropertyError(\"context\", signingProperties.context);\n  const config = throwSigningPropertyError(\"config\", signingProperties.config);\n  const authScheme = (_context$endpointV = context.endpointV2) === null || _context$endpointV === void 0 || (_context$endpointV = _context$endpointV.properties) === null || _context$endpointV === void 0 || (_context$endpointV = _context$endpointV.authSchemes) === null || _context$endpointV === void 0 ? void 0 : _context$endpointV[0];\n  const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n  const signer = await signerFunction(authScheme);\n  const signingRegion = signingProperties === null || signingProperties === void 0 ? void 0 : signingProperties.signingRegion;\n  const signingRegionSet = signingProperties === null || signingProperties === void 0 ? void 0 : signingProperties.signingRegionSet;\n  const signingName = signingProperties === null || signingProperties === void 0 ? void 0 : signingProperties.signingName;\n  return {\n    config,\n    signer,\n    signingRegion,\n    signingRegionSet,\n    signingName\n  };\n};\nexport class AwsSdkSigV4Signer {\n  async sign(httpRequest, identity, signingProperties) {\n    var _handlerExecutionCont, _handlerExecutionCont2;\n    if (!HttpRequest.isInstance(httpRequest)) {\n      throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n    }\n    const validatedProps = await validateSigningProperties(signingProperties);\n    const {\n      config,\n      signer\n    } = validatedProps;\n    let {\n      signingRegion,\n      signingName\n    } = validatedProps;\n    const handlerExecutionContext = signingProperties.context;\n    if ((_handlerExecutionCont = handlerExecutionContext === null || handlerExecutionContext === void 0 || (_handlerExecutionCont2 = handlerExecutionContext.authSchemes) === null || _handlerExecutionCont2 === void 0 ? void 0 : _handlerExecutionCont2.length) !== null && _handlerExecutionCont !== void 0 ? _handlerExecutionCont : 0 > 1) {\n      const [first, second] = handlerExecutionContext.authSchemes;\n      if ((first === null || first === void 0 ? void 0 : first.name) === \"sigv4a\" && (second === null || second === void 0 ? void 0 : second.name) === \"sigv4\") {\n        var _second$signingRegion, _second$signingName;\n        signingRegion = (_second$signingRegion = second === null || second === void 0 ? void 0 : second.signingRegion) !== null && _second$signingRegion !== void 0 ? _second$signingRegion : signingRegion;\n        signingName = (_second$signingName = second === null || second === void 0 ? void 0 : second.signingName) !== null && _second$signingName !== void 0 ? _second$signingName : signingName;\n      }\n    }\n    const signedRequest = await signer.sign(httpRequest, {\n      signingDate: getSkewCorrectedDate(config.systemClockOffset),\n      signingRegion: signingRegion,\n      signingService: signingName\n    });\n    return signedRequest;\n  }\n  errorHandler(signingProperties) {\n    return error => {\n      var _error$ServerTime;\n      const serverTime = (_error$ServerTime = error.ServerTime) !== null && _error$ServerTime !== void 0 ? _error$ServerTime : getDateHeader(error.$response);\n      if (serverTime) {\n        const config = throwSigningPropertyError(\"config\", signingProperties.config);\n        const initialSystemClockOffset = config.systemClockOffset;\n        config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n        const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n        if (clockSkewCorrected && error.$metadata) {\n          error.$metadata.clockSkewCorrected = true;\n        }\n      }\n      throw error;\n    };\n  }\n  successHandler(httpResponse, signingProperties) {\n    const dateHeader = getDateHeader(httpResponse);\n    if (dateHeader) {\n      const config = throwSigningPropertyError(\"config\", signingProperties.config);\n      config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n    }\n  }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;","map":{"version":3,"names":["HttpRequest","getDateHeader","getSkewCorrectedDate","getUpdatedSystemClockOffset","throwSigningPropertyError","name","property","Error","concat","validateSigningProperties","signingProperties","_context$endpointV","context","config","authScheme","endpointV2","properties","authSchemes","signerFunction","signer","signingRegion","signingRegionSet","signingName","AwsSdkSigV4Signer","sign","httpRequest","identity","_handlerExecutionCont","_handlerExecutionCont2","isInstance","validatedProps","handlerExecutionContext","length","first","second","_second$signingRegion","_second$signingName","signedRequest","signingDate","systemClockOffset","signingService","errorHandler","error","_error$ServerTime","serverTime","ServerTime","$response","initialSystemClockOffset","clockSkewCorrected","$metadata","successHandler","httpResponse","dateHeader","AWSSDKSigV4Signer"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n    if (!property) {\n        throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n    }\n    return property;\n};\nexport const validateSigningProperties = async (signingProperties) => {\n    const context = throwSigningPropertyError(\"context\", signingProperties.context);\n    const config = throwSigningPropertyError(\"config\", signingProperties.config);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n    const signer = await signerFunction(authScheme);\n    const signingRegion = signingProperties?.signingRegion;\n    const signingRegionSet = signingProperties?.signingRegionSet;\n    const signingName = signingProperties?.signingName;\n    return {\n        config,\n        signer,\n        signingRegion,\n        signingRegionSet,\n        signingName,\n    };\n};\nexport class AwsSdkSigV4Signer {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!HttpRequest.isInstance(httpRequest)) {\n            throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const validatedProps = await validateSigningProperties(signingProperties);\n        const { config, signer } = validatedProps;\n        let { signingRegion, signingName } = validatedProps;\n        const handlerExecutionContext = signingProperties.context;\n        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {\n            const [first, second] = handlerExecutionContext.authSchemes;\n            if (first?.name === \"sigv4a\" && second?.name === \"sigv4\") {\n                signingRegion = second?.signingRegion ?? signingRegion;\n                signingName = second?.signingName ?? signingName;\n            }\n        }\n        const signedRequest = await signer.sign(httpRequest, {\n            signingDate: getSkewCorrectedDate(config.systemClockOffset),\n            signingRegion: signingRegion,\n            signingService: signingName,\n        });\n        return signedRequest;\n    }\n    errorHandler(signingProperties) {\n        return (error) => {\n            const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n            if (serverTime) {\n                const config = throwSigningPropertyError(\"config\", signingProperties.config);\n                const initialSystemClockOffset = config.systemClockOffset;\n                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n                if (clockSkewCorrected && error.$metadata) {\n                    error.$metadata.clockSkewCorrected = true;\n                }\n            }\n            throw error;\n        };\n    }\n    successHandler(httpResponse, signingProperties) {\n        const dateHeader = getDateHeader(httpResponse);\n        if (dateHeader) {\n            const config = throwSigningPropertyError(\"config\", signingProperties.config);\n            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n        }\n    }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
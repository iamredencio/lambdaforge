{"ast":null,"code":"import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nimport { getEndpointFromConfig } from \"./getEndpointFromConfig\";\nimport { toEndpointV1 } from \"./toEndpointV1\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n  if (!clientConfig.endpoint) {\n    let endpointFromConfig;\n    if (clientConfig.serviceConfiguredEndpoint) {\n      endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();\n    } else {\n      endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId);\n    }\n    if (endpointFromConfig) {\n      clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));\n    }\n  }\n  const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n  if (typeof clientConfig.endpointProvider !== \"function\") {\n    throw new Error(\"config.endpointProvider is not set.\");\n  }\n  const endpoint = clientConfig.endpointProvider(endpointParams, context);\n  return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n  var _instructionsSupplier;\n  const endpointParams = {};\n  const instructions = (instructionsSupplier === null || instructionsSupplier === void 0 || (_instructionsSupplier = instructionsSupplier.getEndpointParameterInstructions) === null || _instructionsSupplier === void 0 ? void 0 : _instructionsSupplier.call(instructionsSupplier)) || {};\n  for (const [name, instruction] of Object.entries(instructions)) {\n    switch (instruction.type) {\n      case \"staticContextParams\":\n        endpointParams[name] = instruction.value;\n        break;\n      case \"contextParams\":\n        endpointParams[name] = commandInput[instruction.name];\n        break;\n      case \"clientContextParams\":\n      case \"builtInParams\":\n        endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n        break;\n      case \"operationContextParams\":\n        endpointParams[name] = instruction.get(commandInput);\n        break;\n      default:\n        throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n    }\n  }\n  if (Object.keys(instructions).length === 0) {\n    Object.assign(endpointParams, clientConfig);\n  }\n  if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n    await resolveParamsForS3(endpointParams);\n  }\n  return endpointParams;\n};","map":{"version":3,"names":["resolveParamsForS3","createConfigValueProvider","getEndpointFromConfig","toEndpointV1","getEndpointFromInstructions","commandInput","instructionsSupplier","clientConfig","context","endpoint","endpointFromConfig","serviceConfiguredEndpoint","serviceId","Promise","resolve","endpointParams","resolveParams","endpointProvider","Error","_instructionsSupplier","instructions","getEndpointParameterInstructions","call","name","instruction","Object","entries","type","value","get","JSON","stringify","keys","length","assign","String","toLowerCase"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"],"sourcesContent":["import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nimport { getEndpointFromConfig } from \"./getEndpointFromConfig\";\nimport { toEndpointV1 } from \"./toEndpointV1\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n    if (!clientConfig.endpoint) {\n        let endpointFromConfig;\n        if (clientConfig.serviceConfiguredEndpoint) {\n            endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();\n        }\n        else {\n            endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId);\n        }\n        if (endpointFromConfig) {\n            clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));\n        }\n    }\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n    const endpointParams = {};\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n    for (const [name, instruction] of Object.entries(instructions)) {\n        switch (instruction.type) {\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n                break;\n            case \"operationContextParams\":\n                endpointParams[name] = instruction.get(commandInput);\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await resolveParamsForS3(endpointParams);\n    }\n    return endpointParams;\n};\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAOC,YAAY,EAAEC,oBAAoB,EAAEC,YAAY,EAAEC,OAAO,KAAK;EAC5G,IAAI,CAACD,YAAY,CAACE,QAAQ,EAAE;IACxB,IAAIC,kBAAkB;IACtB,IAAIH,YAAY,CAACI,yBAAyB,EAAE;MACxCD,kBAAkB,GAAG,MAAMH,YAAY,CAACI,yBAAyB,CAAC,CAAC;IACvE,CAAC,MACI;MACDD,kBAAkB,GAAG,MAAMR,qBAAqB,CAACK,YAAY,CAACK,SAAS,CAAC;IAC5E;IACA,IAAIF,kBAAkB,EAAE;MACpBH,YAAY,CAACE,QAAQ,GAAG,MAAMI,OAAO,CAACC,OAAO,CAACX,YAAY,CAACO,kBAAkB,CAAC,CAAC;IACnF;EACJ;EACA,MAAMK,cAAc,GAAG,MAAMC,aAAa,CAACX,YAAY,EAAEC,oBAAoB,EAAEC,YAAY,CAAC;EAC5F,IAAI,OAAOA,YAAY,CAACU,gBAAgB,KAAK,UAAU,EAAE;IACrD,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,MAAMT,QAAQ,GAAGF,YAAY,CAACU,gBAAgB,CAACF,cAAc,EAAEP,OAAO,CAAC;EACvE,OAAOC,QAAQ;AACnB,CAAC;AACD,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOX,YAAY,EAAEC,oBAAoB,EAAEC,YAAY,KAAK;EAAA,IAAAY,qBAAA;EACrF,MAAMJ,cAAc,GAAG,CAAC,CAAC;EACzB,MAAMK,YAAY,GAAG,CAAAd,oBAAoB,aAApBA,oBAAoB,gBAAAa,qBAAA,GAApBb,oBAAoB,CAAEe,gCAAgC,cAAAF,qBAAA,uBAAtDA,qBAAA,CAAAG,IAAA,CAAAhB,oBAAyD,CAAC,KAAI,CAAC,CAAC;EACrF,KAAK,MAAM,CAACiB,IAAI,EAAEC,WAAW,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACN,YAAY,CAAC,EAAE;IAC5D,QAAQI,WAAW,CAACG,IAAI;MACpB,KAAK,qBAAqB;QACtBZ,cAAc,CAACQ,IAAI,CAAC,GAAGC,WAAW,CAACI,KAAK;QACxC;MACJ,KAAK,eAAe;QAChBb,cAAc,CAACQ,IAAI,CAAC,GAAGlB,YAAY,CAACmB,WAAW,CAACD,IAAI,CAAC;QACrD;MACJ,KAAK,qBAAqB;MAC1B,KAAK,eAAe;QAChBR,cAAc,CAACQ,IAAI,CAAC,GAAG,MAAMtB,yBAAyB,CAACuB,WAAW,CAACD,IAAI,EAAEA,IAAI,EAAEhB,YAAY,CAAC,CAAC,CAAC;QAC9F;MACJ,KAAK,wBAAwB;QACzBQ,cAAc,CAACQ,IAAI,CAAC,GAAGC,WAAW,CAACK,GAAG,CAACxB,YAAY,CAAC;QACpD;MACJ;QACI,MAAM,IAAIa,KAAK,CAAC,+CAA+C,GAAGY,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC,CAAC;IACtG;EACJ;EACA,IAAIC,MAAM,CAACO,IAAI,CAACZ,YAAY,CAAC,CAACa,MAAM,KAAK,CAAC,EAAE;IACxCR,MAAM,CAACS,MAAM,CAACnB,cAAc,EAAER,YAAY,CAAC;EAC/C;EACA,IAAI4B,MAAM,CAAC5B,YAAY,CAACK,SAAS,CAAC,CAACwB,WAAW,CAAC,CAAC,KAAK,IAAI,EAAE;IACvD,MAAMpC,kBAAkB,CAACe,cAAc,CAAC;EAC5C;EACA,OAAOA,cAAc;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
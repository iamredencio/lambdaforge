{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { RpcProtocol } from \"@smithy/core/protocols\";\nimport { deref, NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { JsonCodec } from \"./JsonCodec\";\nimport { loadRestJsonErrorCode } from \"./parseJsonBody\";\nexport class AwsJsonRpcProtocol extends RpcProtocol {\n  constructor(_ref) {\n    let {\n      defaultNamespace\n    } = _ref;\n    super({\n      defaultNamespace\n    });\n    _defineProperty(this, \"serializer\", void 0);\n    _defineProperty(this, \"deserializer\", void 0);\n    _defineProperty(this, \"codec\", void 0);\n    this.codec = new JsonCodec({\n      timestampFormat: {\n        useTrait: true,\n        default: SCHEMA.TIMESTAMP_EPOCH_SECONDS\n      },\n      jsonName: false\n    });\n    this.serializer = this.codec.createSerializer();\n    this.deserializer = this.codec.createDeserializer();\n  }\n  async serializeRequest(operationSchema, input, context) {\n    const request = await super.serializeRequest(operationSchema, input, context);\n    if (!request.path.endsWith(\"/\")) {\n      request.path += \"/\";\n    }\n    Object.assign(request.headers, {\n      \"content-type\": \"application/x-amz-json-\".concat(this.getJsonRpcVersion()),\n      \"x-amz-target\": (this.getJsonRpcVersion() === \"1.0\" ? \"JsonRpc10.\" : \"JsonProtocol.\") + NormalizedSchema.of(operationSchema).getName()\n    });\n    if (deref(operationSchema.input) === \"unit\" || !request.body) {\n      request.body = \"{}\";\n    }\n    try {\n      request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n    } catch (e) {}\n    return request;\n  }\n  getPayloadCodec() {\n    return this.codec;\n  }\n  async handleError(operationSchema, context, response, dataObject, metadata) {\n    var _loadRestJsonErrorCod, _ref2, _dataObject$message;\n    const errorIdentifier = (_loadRestJsonErrorCod = loadRestJsonErrorCode(response, dataObject)) !== null && _loadRestJsonErrorCod !== void 0 ? _loadRestJsonErrorCod : \"Unknown\";\n    let namespace = this.options.defaultNamespace;\n    let errorName = errorIdentifier;\n    if (errorIdentifier.includes(\"#\")) {\n      [namespace, errorName] = errorIdentifier.split(\"#\");\n    }\n    const registry = TypeRegistry.for(namespace);\n    let errorSchema;\n    try {\n      errorSchema = registry.getSchema(errorIdentifier);\n    } catch (e) {\n      const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n      if (baseExceptionSchema) {\n        const ErrorCtor = baseExceptionSchema.ctor;\n        throw Object.assign(new ErrorCtor(errorName), dataObject);\n      }\n      throw new Error(errorName);\n    }\n    const ns = NormalizedSchema.of(errorSchema);\n    const message = (_ref2 = (_dataObject$message = dataObject.message) !== null && _dataObject$message !== void 0 ? _dataObject$message : dataObject.Message) !== null && _ref2 !== void 0 ? _ref2 : \"Unknown\";\n    const exception = new errorSchema.ctor(message);\n    await this.deserializeHttpMessage(errorSchema, context, response, dataObject);\n    const output = {};\n    for (const [name, member] of ns.structIterator()) {\n      var _member$getMergedTrai;\n      const target = (_member$getMergedTrai = member.getMergedTraits().jsonName) !== null && _member$getMergedTrai !== void 0 ? _member$getMergedTrai : name;\n      output[name] = this.codec.createDeserializer().readObject(member, dataObject[target]);\n    }\n    Object.assign(exception, _objectSpread({\n      $metadata: metadata,\n      $response: response,\n      $fault: ns.getMergedTraits().error,\n      message\n    }, output));\n    throw exception;\n  }\n}","map":{"version":3,"names":["RpcProtocol","deref","NormalizedSchema","SCHEMA","TypeRegistry","calculateBodyLength","JsonCodec","loadRestJsonErrorCode","AwsJsonRpcProtocol","constructor","_ref","defaultNamespace","_defineProperty","codec","timestampFormat","useTrait","default","TIMESTAMP_EPOCH_SECONDS","jsonName","serializer","createSerializer","deserializer","createDeserializer","serializeRequest","operationSchema","input","context","request","path","endsWith","Object","assign","headers","concat","getJsonRpcVersion","of","getName","body","String","e","getPayloadCodec","handleError","response","dataObject","metadata","_loadRestJsonErrorCod","_ref2","_dataObject$message","errorIdentifier","namespace","options","errorName","includes","split","registry","for","errorSchema","getSchema","baseExceptionSchema","getBaseException","ErrorCtor","ctor","Error","ns","message","Message","exception","deserializeHttpMessage","output","name","member","structIterator","_member$getMergedTrai","target","getMergedTraits","readObject","_objectSpread","$metadata","$response","$fault","error"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/AwsJsonRpcProtocol.js"],"sourcesContent":["import { RpcProtocol } from \"@smithy/core/protocols\";\nimport { deref, NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { JsonCodec } from \"./JsonCodec\";\nimport { loadRestJsonErrorCode } from \"./parseJsonBody\";\nexport class AwsJsonRpcProtocol extends RpcProtocol {\n    serializer;\n    deserializer;\n    codec;\n    constructor({ defaultNamespace }) {\n        super({\n            defaultNamespace,\n        });\n        this.codec = new JsonCodec({\n            timestampFormat: {\n                useTrait: true,\n                default: SCHEMA.TIMESTAMP_EPOCH_SECONDS,\n            },\n            jsonName: false,\n        });\n        this.serializer = this.codec.createSerializer();\n        this.deserializer = this.codec.createDeserializer();\n    }\n    async serializeRequest(operationSchema, input, context) {\n        const request = await super.serializeRequest(operationSchema, input, context);\n        if (!request.path.endsWith(\"/\")) {\n            request.path += \"/\";\n        }\n        Object.assign(request.headers, {\n            \"content-type\": `application/x-amz-json-${this.getJsonRpcVersion()}`,\n            \"x-amz-target\": (this.getJsonRpcVersion() === \"1.0\" ? `JsonRpc10.` : `JsonProtocol.`) +\n                NormalizedSchema.of(operationSchema).getName(),\n        });\n        if (deref(operationSchema.input) === \"unit\" || !request.body) {\n            request.body = \"{}\";\n        }\n        try {\n            request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n        }\n        catch (e) { }\n        return request;\n    }\n    getPayloadCodec() {\n        return this.codec;\n    }\n    async handleError(operationSchema, context, response, dataObject, metadata) {\n        const errorIdentifier = loadRestJsonErrorCode(response, dataObject) ?? \"Unknown\";\n        let namespace = this.options.defaultNamespace;\n        let errorName = errorIdentifier;\n        if (errorIdentifier.includes(\"#\")) {\n            [namespace, errorName] = errorIdentifier.split(\"#\");\n        }\n        const registry = TypeRegistry.for(namespace);\n        let errorSchema;\n        try {\n            errorSchema = registry.getSchema(errorIdentifier);\n        }\n        catch (e) {\n            const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n            if (baseExceptionSchema) {\n                const ErrorCtor = baseExceptionSchema.ctor;\n                throw Object.assign(new ErrorCtor(errorName), dataObject);\n            }\n            throw new Error(errorName);\n        }\n        const ns = NormalizedSchema.of(errorSchema);\n        const message = dataObject.message ?? dataObject.Message ?? \"Unknown\";\n        const exception = new errorSchema.ctor(message);\n        await this.deserializeHttpMessage(errorSchema, context, response, dataObject);\n        const output = {};\n        for (const [name, member] of ns.structIterator()) {\n            const target = member.getMergedTraits().jsonName ?? name;\n            output[name] = this.codec.createDeserializer().readObject(member, dataObject[target]);\n        }\n        Object.assign(exception, {\n            $metadata: metadata,\n            $response: response,\n            $fault: ns.getMergedTraits().error,\n            message,\n            ...output,\n        });\n        throw exception;\n    }\n}\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,wBAAwB;AACpD,SAASC,KAAK,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,YAAY,QAAQ,qBAAqB;AACnF,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,qBAAqB,QAAQ,iBAAiB;AACvD,OAAO,MAAMC,kBAAkB,SAASR,WAAW,CAAC;EAIhDS,WAAWA,CAAAC,IAAA,EAAuB;IAAA,IAAtB;MAAEC;IAAiB,CAAC,GAAAD,IAAA;IAC5B,KAAK,CAAC;MACFC;IACJ,CAAC,CAAC;IAACC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACH,IAAI,CAACC,KAAK,GAAG,IAAIP,SAAS,CAAC;MACvBQ,eAAe,EAAE;QACbC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAEb,MAAM,CAACc;MACpB,CAAC;MACDC,QAAQ,EAAE;IACd,CAAC,CAAC;IACF,IAAI,CAACC,UAAU,GAAG,IAAI,CAACN,KAAK,CAACO,gBAAgB,CAAC,CAAC;IAC/C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACR,KAAK,CAACS,kBAAkB,CAAC,CAAC;EACvD;EACA,MAAMC,gBAAgBA,CAACC,eAAe,EAAEC,KAAK,EAAEC,OAAO,EAAE;IACpD,MAAMC,OAAO,GAAG,MAAM,KAAK,CAACJ,gBAAgB,CAACC,eAAe,EAAEC,KAAK,EAAEC,OAAO,CAAC;IAC7E,IAAI,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7BF,OAAO,CAACC,IAAI,IAAI,GAAG;IACvB;IACAE,MAAM,CAACC,MAAM,CAACJ,OAAO,CAACK,OAAO,EAAE;MAC3B,cAAc,4BAAAC,MAAA,CAA4B,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAAE;MACpE,cAAc,EAAE,CAAC,IAAI,CAACA,iBAAiB,CAAC,CAAC,KAAK,KAAK,iCAAiC,IAChFhC,gBAAgB,CAACiC,EAAE,CAACX,eAAe,CAAC,CAACY,OAAO,CAAC;IACrD,CAAC,CAAC;IACF,IAAInC,KAAK,CAACuB,eAAe,CAACC,KAAK,CAAC,KAAK,MAAM,IAAI,CAACE,OAAO,CAACU,IAAI,EAAE;MAC1DV,OAAO,CAACU,IAAI,GAAG,IAAI;IACvB;IACA,IAAI;MACAV,OAAO,CAACK,OAAO,CAAC,gBAAgB,CAAC,GAAGM,MAAM,CAACjC,mBAAmB,CAACsB,OAAO,CAACU,IAAI,CAAC,CAAC;IACjF,CAAC,CACD,OAAOE,CAAC,EAAE,CAAE;IACZ,OAAOZ,OAAO;EAClB;EACAa,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC3B,KAAK;EACrB;EACA,MAAM4B,WAAWA,CAACjB,eAAe,EAAEE,OAAO,EAAEgB,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,EAAE;IAAA,IAAAC,qBAAA,EAAAC,KAAA,EAAAC,mBAAA;IACxE,MAAMC,eAAe,IAAAH,qBAAA,GAAGtC,qBAAqB,CAACmC,QAAQ,EAAEC,UAAU,CAAC,cAAAE,qBAAA,cAAAA,qBAAA,GAAI,SAAS;IAChF,IAAII,SAAS,GAAG,IAAI,CAACC,OAAO,CAACvC,gBAAgB;IAC7C,IAAIwC,SAAS,GAAGH,eAAe;IAC/B,IAAIA,eAAe,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC/B,CAACH,SAAS,EAAEE,SAAS,CAAC,GAAGH,eAAe,CAACK,KAAK,CAAC,GAAG,CAAC;IACvD;IACA,MAAMC,QAAQ,GAAGlD,YAAY,CAACmD,GAAG,CAACN,SAAS,CAAC;IAC5C,IAAIO,WAAW;IACf,IAAI;MACAA,WAAW,GAAGF,QAAQ,CAACG,SAAS,CAACT,eAAe,CAAC;IACrD,CAAC,CACD,OAAOT,CAAC,EAAE;MACN,MAAMmB,mBAAmB,GAAGtD,YAAY,CAACmD,GAAG,CAAC,0BAA0B,GAAGN,SAAS,CAAC,CAACU,gBAAgB,CAAC,CAAC;MACvG,IAAID,mBAAmB,EAAE;QACrB,MAAME,SAAS,GAAGF,mBAAmB,CAACG,IAAI;QAC1C,MAAM/B,MAAM,CAACC,MAAM,CAAC,IAAI6B,SAAS,CAACT,SAAS,CAAC,EAAER,UAAU,CAAC;MAC7D;MACA,MAAM,IAAImB,KAAK,CAACX,SAAS,CAAC;IAC9B;IACA,MAAMY,EAAE,GAAG7D,gBAAgB,CAACiC,EAAE,CAACqB,WAAW,CAAC;IAC3C,MAAMQ,OAAO,IAAAlB,KAAA,IAAAC,mBAAA,GAAGJ,UAAU,CAACqB,OAAO,cAAAjB,mBAAA,cAAAA,mBAAA,GAAIJ,UAAU,CAACsB,OAAO,cAAAnB,KAAA,cAAAA,KAAA,GAAI,SAAS;IACrE,MAAMoB,SAAS,GAAG,IAAIV,WAAW,CAACK,IAAI,CAACG,OAAO,CAAC;IAC/C,MAAM,IAAI,CAACG,sBAAsB,CAACX,WAAW,EAAE9B,OAAO,EAAEgB,QAAQ,EAAEC,UAAU,CAAC;IAC7E,MAAMyB,MAAM,GAAG,CAAC,CAAC;IACjB,KAAK,MAAM,CAACC,IAAI,EAAEC,MAAM,CAAC,IAAIP,EAAE,CAACQ,cAAc,CAAC,CAAC,EAAE;MAAA,IAAAC,qBAAA;MAC9C,MAAMC,MAAM,IAAAD,qBAAA,GAAGF,MAAM,CAACI,eAAe,CAAC,CAAC,CAACxD,QAAQ,cAAAsD,qBAAA,cAAAA,qBAAA,GAAIH,IAAI;MACxDD,MAAM,CAACC,IAAI,CAAC,GAAG,IAAI,CAACxD,KAAK,CAACS,kBAAkB,CAAC,CAAC,CAACqD,UAAU,CAACL,MAAM,EAAE3B,UAAU,CAAC8B,MAAM,CAAC,CAAC;IACzF;IACA3C,MAAM,CAACC,MAAM,CAACmC,SAAS,EAAAU,aAAA;MACnBC,SAAS,EAAEjC,QAAQ;MACnBkC,SAAS,EAAEpC,QAAQ;MACnBqC,MAAM,EAAEhB,EAAE,CAACW,eAAe,CAAC,CAAC,CAACM,KAAK;MAClChB;IAAO,GACJI,MAAM,CACZ,CAAC;IACF,MAAMF,SAAS;EACnB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { setFeature } from \"@aws-sdk/core\";\nconst ACCOUNT_ID_ENDPOINT_REGEX = /\\d{12}\\.ddb/;\nexport async function checkFeatures(context, config, args) {\n  var _request$headers, _context$__smithy_con;\n  const request = args.request;\n  if ((request === null || request === void 0 || (_request$headers = request.headers) === null || _request$headers === void 0 ? void 0 : _request$headers[\"smithy-protocol\"]) === \"rpc-v2-cbor\") {\n    setFeature(context, \"PROTOCOL_RPC_V2_CBOR\", \"M\");\n  }\n  if (typeof config.retryStrategy === \"function\") {\n    const retryStrategy = await config.retryStrategy();\n    if (typeof retryStrategy.acquireInitialRetryToken === \"function\") {\n      var _retryStrategy$constr;\n      if ((_retryStrategy$constr = retryStrategy.constructor) !== null && _retryStrategy$constr !== void 0 && (_retryStrategy$constr = _retryStrategy$constr.name) !== null && _retryStrategy$constr !== void 0 && _retryStrategy$constr.includes(\"Adaptive\")) {\n        setFeature(context, \"RETRY_MODE_ADAPTIVE\", \"F\");\n      } else {\n        setFeature(context, \"RETRY_MODE_STANDARD\", \"E\");\n      }\n    } else {\n      setFeature(context, \"RETRY_MODE_LEGACY\", \"D\");\n    }\n  }\n  if (typeof config.accountIdEndpointMode === \"function\") {\n    var _endpointV2$url, _config$accountIdEndp;\n    const endpointV2 = context.endpointV2;\n    if (String(endpointV2 === null || endpointV2 === void 0 || (_endpointV2$url = endpointV2.url) === null || _endpointV2$url === void 0 ? void 0 : _endpointV2$url.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {\n      setFeature(context, \"ACCOUNT_ID_ENDPOINT\", \"O\");\n    }\n    switch (await ((_config$accountIdEndp = config.accountIdEndpointMode) === null || _config$accountIdEndp === void 0 ? void 0 : _config$accountIdEndp.call(config))) {\n      case \"disabled\":\n        setFeature(context, \"ACCOUNT_ID_MODE_DISABLED\", \"Q\");\n        break;\n      case \"preferred\":\n        setFeature(context, \"ACCOUNT_ID_MODE_PREFERRED\", \"P\");\n        break;\n      case \"required\":\n        setFeature(context, \"ACCOUNT_ID_MODE_REQUIRED\", \"R\");\n        break;\n    }\n  }\n  const identity = (_context$__smithy_con = context.__smithy_context) === null || _context$__smithy_con === void 0 || (_context$__smithy_con = _context$__smithy_con.selectedHttpAuthScheme) === null || _context$__smithy_con === void 0 ? void 0 : _context$__smithy_con.identity;\n  if (identity !== null && identity !== void 0 && identity.$source) {\n    const credentials = identity;\n    if (credentials.accountId) {\n      setFeature(context, \"RESOLVED_ACCOUNT_ID\", \"T\");\n    }\n    for (const [key, value] of Object.entries((_credentials$$source = credentials.$source) !== null && _credentials$$source !== void 0 ? _credentials$$source : {})) {\n      var _credentials$$source;\n      setFeature(context, key, value);\n    }\n  }\n}","map":{"version":3,"names":["setFeature","ACCOUNT_ID_ENDPOINT_REGEX","checkFeatures","context","config","args","_request$headers","_context$__smithy_con","request","headers","retryStrategy","acquireInitialRetryToken","_retryStrategy$constr","constructor","name","includes","accountIdEndpointMode","_endpointV2$url","_config$accountIdEndp","endpointV2","String","url","hostname","match","call","identity","__smithy_context","selectedHttpAuthScheme","$source","credentials","accountId","key","value","Object","entries","_credentials$$source"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js"],"sourcesContent":["import { setFeature } from \"@aws-sdk/core\";\nconst ACCOUNT_ID_ENDPOINT_REGEX = /\\d{12}\\.ddb/;\nexport async function checkFeatures(context, config, args) {\n    const request = args.request;\n    if (request?.headers?.[\"smithy-protocol\"] === \"rpc-v2-cbor\") {\n        setFeature(context, \"PROTOCOL_RPC_V2_CBOR\", \"M\");\n    }\n    if (typeof config.retryStrategy === \"function\") {\n        const retryStrategy = await config.retryStrategy();\n        if (typeof retryStrategy.acquireInitialRetryToken === \"function\") {\n            if (retryStrategy.constructor?.name?.includes(\"Adaptive\")) {\n                setFeature(context, \"RETRY_MODE_ADAPTIVE\", \"F\");\n            }\n            else {\n                setFeature(context, \"RETRY_MODE_STANDARD\", \"E\");\n            }\n        }\n        else {\n            setFeature(context, \"RETRY_MODE_LEGACY\", \"D\");\n        }\n    }\n    if (typeof config.accountIdEndpointMode === \"function\") {\n        const endpointV2 = context.endpointV2;\n        if (String(endpointV2?.url?.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {\n            setFeature(context, \"ACCOUNT_ID_ENDPOINT\", \"O\");\n        }\n        switch (await config.accountIdEndpointMode?.()) {\n            case \"disabled\":\n                setFeature(context, \"ACCOUNT_ID_MODE_DISABLED\", \"Q\");\n                break;\n            case \"preferred\":\n                setFeature(context, \"ACCOUNT_ID_MODE_PREFERRED\", \"P\");\n                break;\n            case \"required\":\n                setFeature(context, \"ACCOUNT_ID_MODE_REQUIRED\", \"R\");\n                break;\n        }\n    }\n    const identity = context.__smithy_context?.selectedHttpAuthScheme?.identity;\n    if (identity?.$source) {\n        const credentials = identity;\n        if (credentials.accountId) {\n            setFeature(context, \"RESOLVED_ACCOUNT_ID\", \"T\");\n        }\n        for (const [key, value] of Object.entries(credentials.$source ?? {})) {\n            setFeature(context, key, value);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
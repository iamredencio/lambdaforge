{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nconst PRELUDE_MEMBER_LENGTH = 4;\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nconst CHECKSUM_LENGTH = 4;\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage(_ref) {\n  let {\n    byteLength,\n    byteOffset,\n    buffer\n  } = _ref;\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n  const view = new DataView(buffer, byteOffset, byteLength);\n  const messageLength = view.getUint32(0, false);\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\".concat(expectedPreludeChecksum, \") does not match the calculated CRC32 checksum (\").concat(checksummer.digest(), \")\"));\n  }\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\".concat(checksummer.digest(), \") did not match the expected value of \").concat(expectedMessageChecksum));\n  }\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}","map":{"version":3,"names":["Crc32","PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","_ref","byteLength","byteOffset","buffer","Error","view","DataView","messageLength","getUint32","headerLength","expectedPreludeChecksum","expectedMessageChecksum","checksummer","update","Uint8Array","digest","concat","headers","body"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nconst PRELUDE_MEMBER_LENGTH = 4;\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nconst CHECKSUM_LENGTH = 4;\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nexport function splitMessage({ byteLength, byteOffset, buffer }) {\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n    }\n    const view = new DataView(buffer, byteOffset, byteLength);\n    const messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error(\"Reported message length does not match received message length\");\n    }\n    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\n    };\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AACzC,MAAMC,qBAAqB,GAAG,CAAC;AAC/B,MAAMC,cAAc,GAAGD,qBAAqB,GAAG,CAAC;AAChD,MAAME,eAAe,GAAG,CAAC;AACzB,MAAMC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAC;AACnE,OAAO,SAASE,YAAYA,CAAAC,IAAA,EAAqC;EAAA,IAApC;IAAEC,UAAU;IAAEC,UAAU;IAAEC;EAAO,CAAC,GAAAH,IAAA;EAC3D,IAAIC,UAAU,GAAGH,sBAAsB,EAAE;IACrC,MAAM,IAAIM,KAAK,CAAC,yEAAyE,CAAC;EAC9F;EACA,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,EAAED,UAAU,EAAED,UAAU,CAAC;EACzD,MAAMM,aAAa,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC;EAC9C,IAAIP,UAAU,KAAKM,aAAa,EAAE;IAC9B,MAAM,IAAIH,KAAK,CAAC,gEAAgE,CAAC;EACrF;EACA,MAAMK,YAAY,GAAGJ,IAAI,CAACG,SAAS,CAACb,qBAAqB,EAAE,KAAK,CAAC;EACjE,MAAMe,uBAAuB,GAAGL,IAAI,CAACG,SAAS,CAACZ,cAAc,EAAE,KAAK,CAAC;EACrE,MAAMe,uBAAuB,GAAGN,IAAI,CAACG,SAAS,CAACP,UAAU,GAAGJ,eAAe,EAAE,KAAK,CAAC;EACnF,MAAMe,WAAW,GAAG,IAAIlB,KAAK,CAAC,CAAC,CAACmB,MAAM,CAAC,IAAIC,UAAU,CAACX,MAAM,EAAED,UAAU,EAAEN,cAAc,CAAC,CAAC;EAC1F,IAAIc,uBAAuB,KAAKE,WAAW,CAACG,MAAM,CAAC,CAAC,EAAE;IAClD,MAAM,IAAIX,KAAK,mDAAAY,MAAA,CAAmDN,uBAAuB,sDAAAM,MAAA,CAAmDJ,WAAW,CAACG,MAAM,CAAC,CAAC,MAAG,CAAC;EACxK;EACAH,WAAW,CAACC,MAAM,CAAC,IAAIC,UAAU,CAACX,MAAM,EAAED,UAAU,GAAGN,cAAc,EAAEK,UAAU,IAAIL,cAAc,GAAGC,eAAe,CAAC,CAAC,CAAC;EACxH,IAAIc,uBAAuB,KAAKC,WAAW,CAACG,MAAM,CAAC,CAAC,EAAE;IAClD,MAAM,IAAIX,KAAK,0BAAAY,MAAA,CAA0BJ,WAAW,CAACG,MAAM,CAAC,CAAC,4CAAAC,MAAA,CAAyCL,uBAAuB,CAAE,CAAC;EACpI;EACA,OAAO;IACHM,OAAO,EAAE,IAAIX,QAAQ,CAACH,MAAM,EAAED,UAAU,GAAGN,cAAc,GAAGC,eAAe,EAAEY,YAAY,CAAC;IAC1FS,IAAI,EAAE,IAAIJ,UAAU,CAACX,MAAM,EAAED,UAAU,GAAGN,cAAc,GAAGC,eAAe,GAAGY,YAAY,EAAEF,aAAa,GAAGE,YAAY,IAAIb,cAAc,GAAGC,eAAe,GAAGA,eAAe,CAAC;EAClL,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
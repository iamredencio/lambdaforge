{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nexport class HttpRequest {\n  constructor(options) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol ? options.protocol.slice(-1) !== \":\" ? \"\".concat(options.protocol, \":\") : options.protocol : \"https:\";\n    this.path = options.path ? options.path.charAt(0) !== \"/\" ? \"/\".concat(options.path) : options.path : \"/\";\n    this.username = options.username;\n    this.password = options.password;\n    this.fragment = options.fragment;\n  }\n  static clone(request) {\n    const cloned = new HttpRequest(_objectSpread(_objectSpread({}, request), {}, {\n      headers: _objectSpread({}, request.headers)\n    }));\n    if (cloned.query) {\n      cloned.query = cloneQuery(cloned.query);\n    }\n    return cloned;\n  }\n  static isInstance(request) {\n    if (!request) {\n      return false;\n    }\n    const req = request;\n    return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n  }\n  clone() {\n    return HttpRequest.clone(this);\n  }\n}\nfunction cloneQuery(query) {\n  return Object.keys(query).reduce((carry, paramName) => {\n    const param = query[paramName];\n    return _objectSpread(_objectSpread({}, carry), {}, {\n      [paramName]: Array.isArray(param) ? [...param] : param\n    });\n  }, {});\n}","map":{"version":3,"names":["HttpRequest","constructor","options","method","hostname","port","query","headers","body","protocol","slice","concat","path","charAt","username","password","fragment","clone","request","cloned","_objectSpread","cloneQuery","isInstance","req","Object","keys","reduce","carry","paramName","param","Array","isArray"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"],"sourcesContent":["export class HttpRequest {\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.slice(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n        this.username = options.username;\n        this.password = options.password;\n        this.fragment = options.fragment;\n    }\n    static clone(request) {\n        const cloned = new HttpRequest({\n            ...request,\n            headers: { ...request.headers },\n        });\n        if (cloned.query) {\n            cloned.query = cloneQuery(cloned.query);\n        }\n        return cloned;\n    }\n    static isInstance(request) {\n        if (!request) {\n            return false;\n        }\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        return HttpRequest.clone(this);\n    }\n}\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n"],"mappings":";AAAA,OAAO,MAAMA,WAAW,CAAC;EACrBC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,KAAK;IACrC,IAAI,CAACC,QAAQ,GAAGF,OAAO,CAACE,QAAQ,IAAI,WAAW;IAC/C,IAAI,CAACC,IAAI,GAAGH,OAAO,CAACG,IAAI;IACxB,IAAI,CAACC,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAI,CAAC,CAAC;IAChC,IAAI,CAACC,OAAO,GAAGL,OAAO,CAACK,OAAO,IAAI,CAAC,CAAC;IACpC,IAAI,CAACC,IAAI,GAAGN,OAAO,CAACM,IAAI;IACxB,IAAI,CAACC,QAAQ,GAAGP,OAAO,CAACO,QAAQ,GAC1BP,OAAO,CAACO,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAAC,MAAA,CAC3BT,OAAO,CAACO,QAAQ,SACnBP,OAAO,CAACO,QAAQ,GACpB,QAAQ;IACd,IAAI,CAACG,IAAI,GAAGV,OAAO,CAACU,IAAI,GAAIV,OAAO,CAACU,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,OAAAF,MAAA,CAAOT,OAAO,CAACU,IAAI,IAAKV,OAAO,CAACU,IAAI,GAAI,GAAG;IACrG,IAAI,CAACE,QAAQ,GAAGZ,OAAO,CAACY,QAAQ;IAChC,IAAI,CAACC,QAAQ,GAAGb,OAAO,CAACa,QAAQ;IAChC,IAAI,CAACC,QAAQ,GAAGd,OAAO,CAACc,QAAQ;EACpC;EACA,OAAOC,KAAKA,CAACC,OAAO,EAAE;IAClB,MAAMC,MAAM,GAAG,IAAInB,WAAW,CAAAoB,aAAA,CAAAA,aAAA,KACvBF,OAAO;MACVX,OAAO,EAAAa,aAAA,KAAOF,OAAO,CAACX,OAAO;IAAE,EAClC,CAAC;IACF,IAAIY,MAAM,CAACb,KAAK,EAAE;MACda,MAAM,CAACb,KAAK,GAAGe,UAAU,CAACF,MAAM,CAACb,KAAK,CAAC;IAC3C;IACA,OAAOa,MAAM;EACjB;EACA,OAAOG,UAAUA,CAACJ,OAAO,EAAE;IACvB,IAAI,CAACA,OAAO,EAAE;MACV,OAAO,KAAK;IAChB;IACA,MAAMK,GAAG,GAAGL,OAAO;IACnB,OAAQ,QAAQ,IAAIK,GAAG,IACnB,UAAU,IAAIA,GAAG,IACjB,UAAU,IAAIA,GAAG,IACjB,MAAM,IAAIA,GAAG,IACb,OAAOA,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ,IAChC,OAAOA,GAAG,CAAC,SAAS,CAAC,KAAK,QAAQ;EAC1C;EACAN,KAAKA,CAAA,EAAG;IACJ,OAAOjB,WAAW,CAACiB,KAAK,CAAC,IAAI,CAAC;EAClC;AACJ;AACA,SAASI,UAAUA,CAACf,KAAK,EAAE;EACvB,OAAOkB,MAAM,CAACC,IAAI,CAACnB,KAAK,CAAC,CAACoB,MAAM,CAAC,CAACC,KAAK,EAAEC,SAAS,KAAK;IACnD,MAAMC,KAAK,GAAGvB,KAAK,CAACsB,SAAS,CAAC;IAC9B,OAAAR,aAAA,CAAAA,aAAA,KACOO,KAAK;MACR,CAACC,SAAS,GAAGE,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,GAAG,CAAC,GAAGA,KAAK,CAAC,GAAGA;IAAK;EAE9D,CAAC,EAAE,CAAC,CAAC,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
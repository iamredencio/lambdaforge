{"ast":null,"code":"import _objectSpread from\"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useEffect,useState}from'react';import{sanitizeInput,validateAWSConfig,securityUtils}from'../config/aws-config';import{jsx as _jsx}from\"react/jsx-runtime\";const SecurityContext=/*#__PURE__*/createContext();export const useSecurityContext=()=>{const context=useContext(SecurityContext);if(!context){throw new Error('useSecurityContext must be used within a SecurityProvider');}return context;};export const SecurityProvider=_ref=>{let{children}=_ref;const[securityStatus,setSecurityStatus]=useState({isSecure:false,warnings:[],errors:[],lastCheck:null});// Security check on mount and periodically\nuseEffect(()=>{const performSecurityCheck=()=>{const validation=validateAWSConfig();setSecurityStatus({isSecure:validation.isValid&&validation.warnings.length===0,warnings:validation.warnings||[],errors:validation.errors||[],lastCheck:new Date().toISOString()});// Log security status (with masked credentials)\nif(validation.warnings.length>0){console.warn('🔒 Security warnings detected:',validation.warnings);}if(validation.errors.length>0){console.error('🚨 Security errors detected:',validation.errors);}};// Initial check\nperformSecurityCheck();// Periodic security checks every 5 minutes\nconst interval=setInterval(performSecurityCheck,5*60*1000);return()=>clearInterval(interval);},[]);// Content Security Policy enforcement\nuseEffect(()=>{// Add CSP meta tag if not present\nif(!document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]')){const csp=document.createElement('meta');csp.httpEquiv='Content-Security-Policy';csp.content=\"\\n        default-src 'self';\\n        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com;\\n        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\\n        font-src 'self' https://fonts.gstatic.com;\\n        img-src 'self' data: https:;\\n        connect-src 'self' https://*.amazonaws.com https://*.amazon.com;\\n        frame-ancestors 'none';\\n        base-uri 'self';\\n        form-action 'self';\\n      \".replace(/\\s+/g,' ').trim();document.head.appendChild(csp);}},[]);// Secure input sanitization\nconst sanitizeFormData=data=>{const sanitized={};Object.keys(data).forEach(key=>{if(typeof data[key]==='string'){sanitized[key]=sanitizeInput(data[key]);}else if(Array.isArray(data[key])){sanitized[key]=data[key].map(item=>typeof item==='string'?sanitizeInput(item):item);}else{sanitized[key]=data[key];}});return sanitized;};// Validate form inputs\nconst validateFormInput=(field,value)=>{// Basic validation\nif(!value||value.trim()===''){return{isValid:false,error:'Field is required'};}// Specific field validation\nswitch(field){case'projectName':if(!securityUtils.validateInputFormat(value,'projectName')){return{isValid:false,error:'Project name must contain only letters, numbers, hyphens, and underscores (max 50 chars)'};}break;case'awsAccessKeyId':if(!securityUtils.validateInputFormat(value,'accessKeyId')){return{isValid:false,error:'Invalid AWS Access Key ID format'};}break;case'awsRegion':if(!securityUtils.validateInputFormat(value,'awsRegion')){return{isValid:false,error:'Invalid AWS region'};}break;}return{isValid:true,error:null};};// Security event logging\nconst logSecurityEvent=function(event){let details=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const securityLog={timestamp:new Date().toISOString(),event,details:_objectSpread(_objectSpread({},details),{},{userAgent:navigator.userAgent,url:window.location.href,referrer:document.referrer})};// In production, send to security monitoring service\nconsole.log('🔐 Security Event:',securityLog);};// Check for suspicious activity\nconst detectSuspiciousActivity=formData=>{const suspiciousPatterns=[/<script/i,/javascript:/i,/on\\w+=/i,/eval\\(/i,/document\\./i,/window\\./i];const suspiciousFields=[];Object.entries(formData).forEach(_ref2=>{let[key,value]=_ref2;if(typeof value==='string'){suspiciousPatterns.forEach(pattern=>{if(pattern.test(value)){suspiciousFields.push(key);logSecurityEvent('SUSPICIOUS_INPUT_DETECTED',{field:key,pattern:pattern.toString(),value:value.substring(0,100)// Log first 100 chars only\n});}});}});return suspiciousFields;};const securityContextValue={securityStatus,sanitizeFormData,validateFormInput,logSecurityEvent,detectSuspiciousActivity,utils:securityUtils};return/*#__PURE__*/_jsx(SecurityContext.Provider,{value:securityContextValue,children:children});};export default SecurityProvider;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","sanitizeInput","validateAWSConfig","securityUtils","jsx","_jsx","SecurityContext","useSecurityContext","context","Error","SecurityProvider","_ref","children","securityStatus","setSecurityStatus","isSecure","warnings","errors","lastCheck","performSecurityCheck","validation","isValid","length","Date","toISOString","console","warn","error","interval","setInterval","clearInterval","document","querySelector","csp","createElement","httpEquiv","content","replace","trim","head","appendChild","sanitizeFormData","data","sanitized","Object","keys","forEach","key","Array","isArray","map","item","validateFormInput","field","value","validateInputFormat","logSecurityEvent","event","details","arguments","undefined","securityLog","timestamp","_objectSpread","userAgent","navigator","url","window","location","href","referrer","log","detectSuspiciousActivity","formData","suspiciousPatterns","suspiciousFields","entries","_ref2","pattern","test","push","toString","substring","securityContextValue","utils","Provider"],"sources":["/Users/codinggents/Documents/lambdaforge/src/components/SecurityProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { sanitizeInput, validateAWSConfig, securityUtils } from '../config/aws-config';\n\nconst SecurityContext = createContext();\n\nexport const useSecurityContext = () => {\n  const context = useContext(SecurityContext);\n  if (!context) {\n    throw new Error('useSecurityContext must be used within a SecurityProvider');\n  }\n  return context;\n};\n\nexport const SecurityProvider = ({ children }) => {\n  const [securityStatus, setSecurityStatus] = useState({\n    isSecure: false,\n    warnings: [],\n    errors: [],\n    lastCheck: null\n  });\n\n  // Security check on mount and periodically\n  useEffect(() => {\n    const performSecurityCheck = () => {\n      const validation = validateAWSConfig();\n      \n      setSecurityStatus({\n        isSecure: validation.isValid && validation.warnings.length === 0,\n        warnings: validation.warnings || [],\n        errors: validation.errors || [],\n        lastCheck: new Date().toISOString()\n      });\n\n      // Log security status (with masked credentials)\n      if (validation.warnings.length > 0) {\n        console.warn('🔒 Security warnings detected:', validation.warnings);\n      }\n      \n      if (validation.errors.length > 0) {\n        console.error('🚨 Security errors detected:', validation.errors);\n      }\n    };\n\n    // Initial check\n    performSecurityCheck();\n\n    // Periodic security checks every 5 minutes\n    const interval = setInterval(performSecurityCheck, 5 * 60 * 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Content Security Policy enforcement\n  useEffect(() => {\n    // Add CSP meta tag if not present\n    if (!document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]')) {\n      const csp = document.createElement('meta');\n      csp.httpEquiv = 'Content-Security-Policy';\n      csp.content = `\n        default-src 'self';\n        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://fonts.googleapis.com;\n        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;\n        font-src 'self' https://fonts.gstatic.com;\n        img-src 'self' data: https:;\n        connect-src 'self' https://*.amazonaws.com https://*.amazon.com;\n        frame-ancestors 'none';\n        base-uri 'self';\n        form-action 'self';\n      `.replace(/\\s+/g, ' ').trim();\n      document.head.appendChild(csp);\n    }\n  }, []);\n\n  // Secure input sanitization\n  const sanitizeFormData = (data) => {\n    const sanitized = {};\n    \n    Object.keys(data).forEach(key => {\n      if (typeof data[key] === 'string') {\n        sanitized[key] = sanitizeInput(data[key]);\n      } else if (Array.isArray(data[key])) {\n        sanitized[key] = data[key].map(item => \n          typeof item === 'string' ? sanitizeInput(item) : item\n        );\n      } else {\n        sanitized[key] = data[key];\n      }\n    });\n    \n    return sanitized;\n  };\n\n  // Validate form inputs\n  const validateFormInput = (field, value) => {\n    // Basic validation\n    if (!value || value.trim() === '') {\n      return { isValid: false, error: 'Field is required' };\n    }\n\n    // Specific field validation\n    switch (field) {\n      case 'projectName':\n        if (!securityUtils.validateInputFormat(value, 'projectName')) {\n          return { \n            isValid: false, \n            error: 'Project name must contain only letters, numbers, hyphens, and underscores (max 50 chars)' \n          };\n        }\n        break;\n      \n      case 'awsAccessKeyId':\n        if (!securityUtils.validateInputFormat(value, 'accessKeyId')) {\n          return { \n            isValid: false, \n            error: 'Invalid AWS Access Key ID format' \n          };\n        }\n        break;\n      \n      case 'awsRegion':\n        if (!securityUtils.validateInputFormat(value, 'awsRegion')) {\n          return { \n            isValid: false, \n            error: 'Invalid AWS region' \n          };\n        }\n        break;\n    }\n\n    return { isValid: true, error: null };\n  };\n\n  // Security event logging\n  const logSecurityEvent = (event, details = {}) => {\n    const securityLog = {\n      timestamp: new Date().toISOString(),\n      event,\n      details: {\n        ...details,\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        referrer: document.referrer\n      }\n    };\n\n    // In production, send to security monitoring service\n    console.log('🔐 Security Event:', securityLog);\n  };\n\n  // Check for suspicious activity\n  const detectSuspiciousActivity = (formData) => {\n    const suspiciousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /on\\w+=/i,\n      /eval\\(/i,\n      /document\\./i,\n      /window\\./i\n    ];\n\n    const suspiciousFields = [];\n    \n    Object.entries(formData).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        suspiciousPatterns.forEach(pattern => {\n          if (pattern.test(value)) {\n            suspiciousFields.push(key);\n            logSecurityEvent('SUSPICIOUS_INPUT_DETECTED', {\n              field: key,\n              pattern: pattern.toString(),\n              value: value.substring(0, 100) // Log first 100 chars only\n            });\n          }\n        });\n      }\n    });\n\n    return suspiciousFields;\n  };\n\n  const securityContextValue = {\n    securityStatus,\n    sanitizeFormData,\n    validateFormInput,\n    logSecurityEvent,\n    detectSuspiciousActivity,\n    utils: securityUtils\n  };\n\n  return (\n    <SecurityContext.Provider value={securityContextValue}>\n      {children}\n    </SecurityContext.Provider>\n  );\n};\n\nexport default SecurityProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
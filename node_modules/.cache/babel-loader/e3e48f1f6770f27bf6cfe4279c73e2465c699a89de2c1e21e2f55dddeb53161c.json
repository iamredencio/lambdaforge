{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { HttpBindingProtocol, HttpInterceptingShapeDeserializer, HttpInterceptingShapeSerializer } from \"@smithy/core/protocols\";\nimport { NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { loadRestXmlErrorCode } from \"./parseXmlBody\";\nimport { XmlCodec } from \"./XmlCodec\";\nexport class AwsRestXmlProtocol extends HttpBindingProtocol {\n  constructor(options) {\n    super(options);\n    _defineProperty(this, \"codec\", void 0);\n    _defineProperty(this, \"serializer\", void 0);\n    _defineProperty(this, \"deserializer\", void 0);\n    const settings = {\n      timestampFormat: {\n        useTrait: true,\n        default: SCHEMA.TIMESTAMP_DATE_TIME\n      },\n      httpBindings: true,\n      xmlNamespace: options.xmlNamespace,\n      serviceNamespace: options.defaultNamespace\n    };\n    this.codec = new XmlCodec(settings);\n    this.serializer = new HttpInterceptingShapeSerializer(this.codec.createSerializer(), settings);\n    this.deserializer = new HttpInterceptingShapeDeserializer(this.codec.createDeserializer(), settings);\n  }\n  getPayloadCodec() {\n    return this.codec;\n  }\n  getShapeId() {\n    return \"aws.protocols#restXml\";\n  }\n  async serializeRequest(operationSchema, input, context) {\n    const request = await super.serializeRequest(operationSchema, input, context);\n    const ns = NormalizedSchema.of(operationSchema.input);\n    const members = ns.getMemberSchemas();\n    request.path = String(request.path).split(\"/\").filter(segment => {\n      return segment !== \"{Bucket}\";\n    }).join(\"/\") || \"/\";\n    if (!request.headers[\"content-type\"]) {\n      const httpPayloadMember = Object.values(members).find(m => {\n        return !!m.getMergedTraits().httpPayload;\n      });\n      if (httpPayloadMember) {\n        const mediaType = httpPayloadMember.getMergedTraits().mediaType;\n        if (mediaType) {\n          request.headers[\"content-type\"] = mediaType;\n        } else if (httpPayloadMember.isStringSchema()) {\n          request.headers[\"content-type\"] = \"text/plain\";\n        } else if (httpPayloadMember.isBlobSchema()) {\n          request.headers[\"content-type\"] = \"application/octet-stream\";\n        } else {\n          request.headers[\"content-type\"] = \"application/xml\";\n        }\n      } else if (!ns.isUnitSchema()) {\n        const hasBody = Object.values(members).find(m => {\n          const {\n            httpQuery,\n            httpQueryParams,\n            httpHeader,\n            httpLabel,\n            httpPrefixHeaders\n          } = m.getMergedTraits();\n          return !httpQuery && !httpQueryParams && !httpHeader && !httpLabel && httpPrefixHeaders === void 0;\n        });\n        if (hasBody) {\n          request.headers[\"content-type\"] = \"application/xml\";\n        }\n      }\n    }\n    if (request.headers[\"content-type\"] === \"application/xml\") {\n      if (typeof request.body === \"string\") {\n        request.body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + request.body;\n      }\n    }\n    if (request.body) {\n      try {\n        request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n      } catch (e) {}\n    }\n    return request;\n  }\n  async deserializeResponse(operationSchema, context, response) {\n    return super.deserializeResponse(operationSchema, context, response);\n  }\n  async handleError(operationSchema, context, response, dataObject, metadata) {\n    var _loadRestXmlErrorCode, _ref, _ref2, _ref3, _dataObject$Error$mes, _dataObject$Error, _dataObject$Error2;\n    const errorIdentifier = (_loadRestXmlErrorCode = loadRestXmlErrorCode(response, dataObject)) !== null && _loadRestXmlErrorCode !== void 0 ? _loadRestXmlErrorCode : \"Unknown\";\n    let namespace = this.options.defaultNamespace;\n    let errorName = errorIdentifier;\n    if (errorIdentifier.includes(\"#\")) {\n      [namespace, errorName] = errorIdentifier.split(\"#\");\n    }\n    const registry = TypeRegistry.for(namespace);\n    let errorSchema;\n    try {\n      errorSchema = registry.getSchema(errorIdentifier);\n    } catch (e) {\n      const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n      if (baseExceptionSchema) {\n        const ErrorCtor = baseExceptionSchema.ctor;\n        throw Object.assign(new ErrorCtor(errorName), dataObject);\n      }\n      throw new Error(errorName);\n    }\n    const ns = NormalizedSchema.of(errorSchema);\n    const message = (_ref = (_ref2 = (_ref3 = (_dataObject$Error$mes = (_dataObject$Error = dataObject.Error) === null || _dataObject$Error === void 0 ? void 0 : _dataObject$Error.message) !== null && _dataObject$Error$mes !== void 0 ? _dataObject$Error$mes : (_dataObject$Error2 = dataObject.Error) === null || _dataObject$Error2 === void 0 ? void 0 : _dataObject$Error2.Message) !== null && _ref3 !== void 0 ? _ref3 : dataObject.message) !== null && _ref2 !== void 0 ? _ref2 : dataObject.Message) !== null && _ref !== void 0 ? _ref : \"Unknown\";\n    const exception = new errorSchema.ctor(message);\n    await this.deserializeHttpMessage(errorSchema, context, response, dataObject);\n    const output = {};\n    for (const [name, member] of ns.structIterator()) {\n      var _member$getMergedTrai, _dataObject$Error$tar, _dataObject$Error3;\n      const target = (_member$getMergedTrai = member.getMergedTraits().xmlName) !== null && _member$getMergedTrai !== void 0 ? _member$getMergedTrai : name;\n      const value = (_dataObject$Error$tar = (_dataObject$Error3 = dataObject.Error) === null || _dataObject$Error3 === void 0 ? void 0 : _dataObject$Error3[target]) !== null && _dataObject$Error$tar !== void 0 ? _dataObject$Error$tar : dataObject[target];\n      output[name] = this.codec.createDeserializer().readSchema(member, value);\n    }\n    Object.assign(exception, _objectSpread({\n      $metadata: metadata,\n      $response: response,\n      $fault: ns.getMergedTraits().error,\n      message\n    }, output));\n    throw exception;\n  }\n}","map":{"version":3,"names":["HttpBindingProtocol","HttpInterceptingShapeDeserializer","HttpInterceptingShapeSerializer","NormalizedSchema","SCHEMA","TypeRegistry","calculateBodyLength","loadRestXmlErrorCode","XmlCodec","AwsRestXmlProtocol","constructor","options","_defineProperty","settings","timestampFormat","useTrait","default","TIMESTAMP_DATE_TIME","httpBindings","xmlNamespace","serviceNamespace","defaultNamespace","codec","serializer","createSerializer","deserializer","createDeserializer","getPayloadCodec","getShapeId","serializeRequest","operationSchema","input","context","request","ns","of","members","getMemberSchemas","path","String","split","filter","segment","join","headers","httpPayloadMember","Object","values","find","m","getMergedTraits","httpPayload","mediaType","isStringSchema","isBlobSchema","isUnitSchema","hasBody","httpQuery","httpQueryParams","httpHeader","httpLabel","httpPrefixHeaders","body","e","deserializeResponse","response","handleError","dataObject","metadata","_loadRestXmlErrorCode","_ref","_ref2","_ref3","_dataObject$Error$mes","_dataObject$Error","_dataObject$Error2","errorIdentifier","namespace","errorName","includes","registry","for","errorSchema","getSchema","baseExceptionSchema","getBaseException","ErrorCtor","ctor","assign","Error","message","Message","exception","deserializeHttpMessage","output","name","member","structIterator","_member$getMergedTrai","_dataObject$Error$tar","_dataObject$Error3","target","xmlName","value","readSchema","_objectSpread","$metadata","$response","$fault","error"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/AwsRestXmlProtocol.js"],"sourcesContent":["import { HttpBindingProtocol, HttpInterceptingShapeDeserializer, HttpInterceptingShapeSerializer, } from \"@smithy/core/protocols\";\nimport { NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { loadRestXmlErrorCode } from \"./parseXmlBody\";\nimport { XmlCodec } from \"./XmlCodec\";\nexport class AwsRestXmlProtocol extends HttpBindingProtocol {\n    codec;\n    serializer;\n    deserializer;\n    constructor(options) {\n        super(options);\n        const settings = {\n            timestampFormat: {\n                useTrait: true,\n                default: SCHEMA.TIMESTAMP_DATE_TIME,\n            },\n            httpBindings: true,\n            xmlNamespace: options.xmlNamespace,\n            serviceNamespace: options.defaultNamespace,\n        };\n        this.codec = new XmlCodec(settings);\n        this.serializer = new HttpInterceptingShapeSerializer(this.codec.createSerializer(), settings);\n        this.deserializer = new HttpInterceptingShapeDeserializer(this.codec.createDeserializer(), settings);\n    }\n    getPayloadCodec() {\n        return this.codec;\n    }\n    getShapeId() {\n        return \"aws.protocols#restXml\";\n    }\n    async serializeRequest(operationSchema, input, context) {\n        const request = await super.serializeRequest(operationSchema, input, context);\n        const ns = NormalizedSchema.of(operationSchema.input);\n        const members = ns.getMemberSchemas();\n        request.path =\n            String(request.path)\n                .split(\"/\")\n                .filter((segment) => {\n                return segment !== \"{Bucket}\";\n            })\n                .join(\"/\") || \"/\";\n        if (!request.headers[\"content-type\"]) {\n            const httpPayloadMember = Object.values(members).find((m) => {\n                return !!m.getMergedTraits().httpPayload;\n            });\n            if (httpPayloadMember) {\n                const mediaType = httpPayloadMember.getMergedTraits().mediaType;\n                if (mediaType) {\n                    request.headers[\"content-type\"] = mediaType;\n                }\n                else if (httpPayloadMember.isStringSchema()) {\n                    request.headers[\"content-type\"] = \"text/plain\";\n                }\n                else if (httpPayloadMember.isBlobSchema()) {\n                    request.headers[\"content-type\"] = \"application/octet-stream\";\n                }\n                else {\n                    request.headers[\"content-type\"] = \"application/xml\";\n                }\n            }\n            else if (!ns.isUnitSchema()) {\n                const hasBody = Object.values(members).find((m) => {\n                    const { httpQuery, httpQueryParams, httpHeader, httpLabel, httpPrefixHeaders } = m.getMergedTraits();\n                    return !httpQuery && !httpQueryParams && !httpHeader && !httpLabel && httpPrefixHeaders === void 0;\n                });\n                if (hasBody) {\n                    request.headers[\"content-type\"] = \"application/xml\";\n                }\n            }\n        }\n        if (request.headers[\"content-type\"] === \"application/xml\") {\n            if (typeof request.body === \"string\") {\n                request.body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + request.body;\n            }\n        }\n        if (request.body) {\n            try {\n                request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n            }\n            catch (e) { }\n        }\n        return request;\n    }\n    async deserializeResponse(operationSchema, context, response) {\n        return super.deserializeResponse(operationSchema, context, response);\n    }\n    async handleError(operationSchema, context, response, dataObject, metadata) {\n        const errorIdentifier = loadRestXmlErrorCode(response, dataObject) ?? \"Unknown\";\n        let namespace = this.options.defaultNamespace;\n        let errorName = errorIdentifier;\n        if (errorIdentifier.includes(\"#\")) {\n            [namespace, errorName] = errorIdentifier.split(\"#\");\n        }\n        const registry = TypeRegistry.for(namespace);\n        let errorSchema;\n        try {\n            errorSchema = registry.getSchema(errorIdentifier);\n        }\n        catch (e) {\n            const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n            if (baseExceptionSchema) {\n                const ErrorCtor = baseExceptionSchema.ctor;\n                throw Object.assign(new ErrorCtor(errorName), dataObject);\n            }\n            throw new Error(errorName);\n        }\n        const ns = NormalizedSchema.of(errorSchema);\n        const message = dataObject.Error?.message ?? dataObject.Error?.Message ?? dataObject.message ?? dataObject.Message ?? \"Unknown\";\n        const exception = new errorSchema.ctor(message);\n        await this.deserializeHttpMessage(errorSchema, context, response, dataObject);\n        const output = {};\n        for (const [name, member] of ns.structIterator()) {\n            const target = member.getMergedTraits().xmlName ?? name;\n            const value = dataObject.Error?.[target] ?? dataObject[target];\n            output[name] = this.codec.createDeserializer().readSchema(member, value);\n        }\n        Object.assign(exception, {\n            $metadata: metadata,\n            $response: response,\n            $fault: ns.getMergedTraits().error,\n            message,\n            ...output,\n        });\n        throw exception;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
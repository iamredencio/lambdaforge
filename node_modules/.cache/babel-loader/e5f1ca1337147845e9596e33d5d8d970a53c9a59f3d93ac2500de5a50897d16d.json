{"ast":null,"code":"import { collectBodyString } from \"../common\";\nexport const parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    try {\n      return JSON.parse(encoded);\n    } catch (e) {\n      if ((e === null || e === void 0 ? void 0 : e.name) === \"SyntaxError\") {\n        Object.defineProperty(e, \"$responseBodyText\", {\n          value: encoded\n        });\n      }\n      throw e;\n    }\n  }\n  return {};\n});\nexport const parseJsonErrorBody = async (errorBody, context) => {\n  var _value$message;\n  const value = await parseJsonBody(errorBody, context);\n  value.message = (_value$message = value.message) !== null && _value$message !== void 0 ? _value$message : value.Message;\n  return value;\n};\nexport const loadRestJsonErrorCode = (output, data) => {\n  const findKey = (object, key) => Object.keys(object).find(k => k.toLowerCase() === key.toLowerCase());\n  const sanitizeErrorCode = rawValue => {\n    let cleanValue = rawValue;\n    if (typeof cleanValue === \"number\") {\n      cleanValue = cleanValue.toString();\n    }\n    if (cleanValue.indexOf(\",\") >= 0) {\n      cleanValue = cleanValue.split(\",\")[0];\n    }\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data && typeof data === \"object\") {\n    const codeKey = findKey(data, \"code\");\n    if (codeKey && data[codeKey] !== undefined) {\n      return sanitizeErrorCode(data[codeKey]);\n    }\n    if (data[\"__type\"] !== undefined) {\n      return sanitizeErrorCode(data[\"__type\"]);\n    }\n  }\n};","map":{"version":3,"names":["collectBodyString","parseJsonBody","streamBody","context","then","encoded","length","JSON","parse","e","name","Object","defineProperty","value","parseJsonErrorBody","errorBody","_value$message","message","Message","loadRestJsonErrorCode","output","data","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","toString","indexOf","split","headerKey","headers","undefined","codeKey"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"],"sourcesContent":["import { collectBodyString } from \"../common\";\nexport const parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        try {\n            return JSON.parse(encoded);\n        }\n        catch (e) {\n            if (e?.name === \"SyntaxError\") {\n                Object.defineProperty(e, \"$responseBodyText\", {\n                    value: encoded,\n                });\n            }\n            throw e;\n        }\n    }\n    return {};\n});\nexport const parseJsonErrorBody = async (errorBody, context) => {\n    const value = await parseJsonBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nexport const loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data && typeof data === \"object\") {\n        const codeKey = findKey(data, \"code\");\n        if (codeKey && data[codeKey] !== undefined) {\n            return sanitizeErrorCode(data[codeKey]);\n        }\n        if (data[\"__type\"] !== undefined) {\n            return sanitizeErrorCode(data[\"__type\"]);\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nexport const readableStreamtoIterable = readableStream => ({\n  [Symbol.asyncIterator]: _wrapAsyncGenerator(function* () {\n    const reader = readableStream.getReader();\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = yield _awaitAsyncGenerator(reader.read());\n        if (done) return;\n        yield value;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  })\n});\nexport const iterableToReadableStream = asyncIterable => {\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    async pull(controller) {\n      const {\n        done,\n        value\n      } = await iterator.next();\n      if (done) {\n        return controller.close();\n      }\n      controller.enqueue(value);\n    }\n  });\n};","map":{"version":3,"names":["readableStreamtoIterable","readableStream","Symbol","asyncIterator","_wrapAsyncGenerator","reader","getReader","done","value","_awaitAsyncGenerator","read","releaseLock","iterableToReadableStream","asyncIterable","iterator","ReadableStream","pull","controller","next","close","enqueue"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/eventstream-serde-browser/dist-es/utils.js"],"sourcesContent":["export const readableStreamtoIterable = (readableStream) => ({\n    [Symbol.asyncIterator]: async function* () {\n        const reader = readableStream.getReader();\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    return;\n                yield value;\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    },\n});\nexport const iterableToReadableStream = (asyncIterable) => {\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n                return controller.close();\n            }\n            controller.enqueue(value);\n        },\n    });\n};\n"],"mappings":";;AAAA,OAAO,MAAMA,wBAAwB,GAAIC,cAAc,KAAM;EACzD,CAACC,MAAM,CAACC,aAAa,GAAAC,mBAAA,CAAG,aAAmB;IACvC,MAAMC,MAAM,GAAGJ,cAAc,CAACK,SAAS,CAAC,CAAC;IACzC,IAAI;MACA,OAAO,IAAI,EAAE;QACT,MAAM;UAAEC,IAAI;UAAEC;QAAM,CAAC,SAAAC,oBAAA,CAASJ,MAAM,CAACK,IAAI,CAAC,CAAC;QAC3C,IAAIH,IAAI,EACJ;QACJ,MAAMC,KAAK;MACf;IACJ,CAAC,SACO;MACJH,MAAM,CAACM,WAAW,CAAC,CAAC;IACxB;EACJ,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAMC,wBAAwB,GAAIC,aAAa,IAAK;EACvD,MAAMC,QAAQ,GAAGD,aAAa,CAACX,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC;EACtD,OAAO,IAAIY,cAAc,CAAC;IACtB,MAAMC,IAAIA,CAACC,UAAU,EAAE;MACnB,MAAM;QAAEV,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMM,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC7C,IAAIX,IAAI,EAAE;QACN,OAAOU,UAAU,CAACE,KAAK,CAAC,CAAC;MAC7B;MACAF,UAAU,CAACG,OAAO,CAACZ,KAAK,CAAC;IAC7B;EACJ,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { SMITHY_CONTEXT_KEY } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { resolveAuthOptions } from \"./resolveAuthOptions\";\nfunction convertHttpAuthSchemesToMap(httpAuthSchemes) {\n  const map = new Map();\n  for (const scheme of httpAuthSchemes) {\n    map.set(scheme.schemeId, scheme);\n  }\n  return map;\n}\nexport const httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async args => {\n  const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));\n  const authSchemePreference = config.authSchemePreference ? await config.authSchemePreference() : [];\n  const resolvedOptions = resolveAuthOptions(options, authSchemePreference);\n  const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);\n  const smithyContext = getSmithyContext(context);\n  const failureReasons = [];\n  for (const option of resolvedOptions) {\n    var _option$propertiesExt;\n    const scheme = authSchemes.get(option.schemeId);\n    if (!scheme) {\n      failureReasons.push(\"HttpAuthScheme `\".concat(option.schemeId, \"` was not enabled for this service.\"));\n      continue;\n    }\n    const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));\n    if (!identityProvider) {\n      failureReasons.push(\"HttpAuthScheme `\".concat(option.schemeId, \"` did not have an IdentityProvider configured.\"));\n      continue;\n    }\n    const {\n      identityProperties = {},\n      signingProperties = {}\n    } = ((_option$propertiesExt = option.propertiesExtractor) === null || _option$propertiesExt === void 0 ? void 0 : _option$propertiesExt.call(option, config, context)) || {};\n    option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);\n    option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);\n    smithyContext.selectedHttpAuthScheme = {\n      httpAuthOption: option,\n      identity: await identityProvider(option.identityProperties),\n      signer: scheme.signer\n    };\n    break;\n  }\n  if (!smithyContext.selectedHttpAuthScheme) {\n    throw new Error(failureReasons.join(\"\\n\"));\n  }\n  return next(args);\n};","map":{"version":3,"names":["SMITHY_CONTEXT_KEY","getSmithyContext","resolveAuthOptions","convertHttpAuthSchemesToMap","httpAuthSchemes","map","Map","scheme","set","schemeId","httpAuthSchemeMiddleware","config","mwOptions","next","context","args","options","httpAuthSchemeProvider","httpAuthSchemeParametersProvider","input","authSchemePreference","resolvedOptions","authSchemes","smithyContext","failureReasons","option","_option$propertiesExt","get","push","concat","identityProvider","identityProviderConfigProvider","identityProperties","signingProperties","propertiesExtractor","call","Object","assign","selectedHttpAuthScheme","httpAuthOption","identity","signer","Error","join"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"],"sourcesContent":["import { SMITHY_CONTEXT_KEY, } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nimport { resolveAuthOptions } from \"./resolveAuthOptions\";\nfunction convertHttpAuthSchemesToMap(httpAuthSchemes) {\n    const map = new Map();\n    for (const scheme of httpAuthSchemes) {\n        map.set(scheme.schemeId, scheme);\n    }\n    return map;\n}\nexport const httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {\n    const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));\n    const authSchemePreference = config.authSchemePreference ? await config.authSchemePreference() : [];\n    const resolvedOptions = resolveAuthOptions(options, authSchemePreference);\n    const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);\n    const smithyContext = getSmithyContext(context);\n    const failureReasons = [];\n    for (const option of resolvedOptions) {\n        const scheme = authSchemes.get(option.schemeId);\n        if (!scheme) {\n            failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` was not enabled for this service.`);\n            continue;\n        }\n        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));\n        if (!identityProvider) {\n            failureReasons.push(`HttpAuthScheme \\`${option.schemeId}\\` did not have an IdentityProvider configured.`);\n            continue;\n        }\n        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};\n        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);\n        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);\n        smithyContext.selectedHttpAuthScheme = {\n            httpAuthOption: option,\n            identity: await identityProvider(option.identityProperties),\n            signer: scheme.signer,\n        };\n        break;\n    }\n    if (!smithyContext.selectedHttpAuthScheme) {\n        throw new Error(failureReasons.join(\"\\n\"));\n    }\n    return next(args);\n};\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAS,eAAe;AACnD,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,2BAA2BA,CAACC,eAAe,EAAE;EAClD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;EACrB,KAAK,MAAMC,MAAM,IAAIH,eAAe,EAAE;IAClCC,GAAG,CAACG,GAAG,CAACD,MAAM,CAACE,QAAQ,EAAEF,MAAM,CAAC;EACpC;EACA,OAAOF,GAAG;AACd;AACA,OAAO,MAAMK,wBAAwB,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EAC9F,MAAMC,OAAO,GAAGL,MAAM,CAACM,sBAAsB,CAAC,MAAML,SAAS,CAACM,gCAAgC,CAACP,MAAM,EAAEG,OAAO,EAAEC,IAAI,CAACI,KAAK,CAAC,CAAC;EAC5H,MAAMC,oBAAoB,GAAGT,MAAM,CAACS,oBAAoB,GAAG,MAAMT,MAAM,CAACS,oBAAoB,CAAC,CAAC,GAAG,EAAE;EACnG,MAAMC,eAAe,GAAGnB,kBAAkB,CAACc,OAAO,EAAEI,oBAAoB,CAAC;EACzE,MAAME,WAAW,GAAGnB,2BAA2B,CAACQ,MAAM,CAACP,eAAe,CAAC;EACvE,MAAMmB,aAAa,GAAGtB,gBAAgB,CAACa,OAAO,CAAC;EAC/C,MAAMU,cAAc,GAAG,EAAE;EACzB,KAAK,MAAMC,MAAM,IAAIJ,eAAe,EAAE;IAAA,IAAAK,qBAAA;IAClC,MAAMnB,MAAM,GAAGe,WAAW,CAACK,GAAG,CAACF,MAAM,CAAChB,QAAQ,CAAC;IAC/C,IAAI,CAACF,MAAM,EAAE;MACTiB,cAAc,CAACI,IAAI,oBAAAC,MAAA,CAAqBJ,MAAM,CAAChB,QAAQ,wCAAsC,CAAC;MAC9F;IACJ;IACA,MAAMqB,gBAAgB,GAAGvB,MAAM,CAACuB,gBAAgB,CAAC,MAAMlB,SAAS,CAACmB,8BAA8B,CAACpB,MAAM,CAAC,CAAC;IACxG,IAAI,CAACmB,gBAAgB,EAAE;MACnBN,cAAc,CAACI,IAAI,oBAAAC,MAAA,CAAqBJ,MAAM,CAAChB,QAAQ,mDAAiD,CAAC;MACzG;IACJ;IACA,MAAM;MAAEuB,kBAAkB,GAAG,CAAC,CAAC;MAAEC,iBAAiB,GAAG,CAAC;IAAE,CAAC,GAAG,EAAAP,qBAAA,GAAAD,MAAM,CAACS,mBAAmB,cAAAR,qBAAA,uBAA1BA,qBAAA,CAAAS,IAAA,CAAAV,MAAM,EAAuBd,MAAM,EAAEG,OAAO,CAAC,KAAI,CAAC,CAAC;IAC/GW,MAAM,CAACO,kBAAkB,GAAGI,MAAM,CAACC,MAAM,CAACZ,MAAM,CAACO,kBAAkB,IAAI,CAAC,CAAC,EAAEA,kBAAkB,CAAC;IAC9FP,MAAM,CAACQ,iBAAiB,GAAGG,MAAM,CAACC,MAAM,CAACZ,MAAM,CAACQ,iBAAiB,IAAI,CAAC,CAAC,EAAEA,iBAAiB,CAAC;IAC3FV,aAAa,CAACe,sBAAsB,GAAG;MACnCC,cAAc,EAAEd,MAAM;MACtBe,QAAQ,EAAE,MAAMV,gBAAgB,CAACL,MAAM,CAACO,kBAAkB,CAAC;MAC3DS,MAAM,EAAElC,MAAM,CAACkC;IACnB,CAAC;IACD;EACJ;EACA,IAAI,CAAClB,aAAa,CAACe,sBAAsB,EAAE;IACvC,MAAM,IAAII,KAAK,CAAClB,cAAc,CAACmB,IAAI,CAAC,IAAI,CAAC,CAAC;EAC9C;EACA,OAAO9B,IAAI,CAACE,IAAI,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
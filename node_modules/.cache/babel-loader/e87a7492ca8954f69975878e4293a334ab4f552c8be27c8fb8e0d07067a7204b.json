{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { evaluateRules } from \"./evaluateRules\";\nexport const evaluateTreeRule = (treeRule, options) => {\n  const {\n    conditions,\n    rules\n  } = treeRule;\n  const {\n    result,\n    referenceRecord\n  } = evaluateConditions(conditions, options);\n  if (!result) {\n    return;\n  }\n  return evaluateRules(rules, _objectSpread(_objectSpread({}, options), {}, {\n    referenceRecord: _objectSpread(_objectSpread({}, options.referenceRecord), referenceRecord)\n  }));\n};","map":{"version":3,"names":["evaluateConditions","evaluateRules","evaluateTreeRule","treeRule","options","conditions","rules","result","referenceRecord","_objectSpread"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js"],"sourcesContent":["import { evaluateConditions } from \"./evaluateConditions\";\nimport { evaluateRules } from \"./evaluateRules\";\nexport const evaluateTreeRule = (treeRule, options) => {\n    const { conditions, rules } = treeRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    return evaluateRules(rules, {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    });\n};\n"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;EACnD,MAAM;IAAEC,UAAU;IAAEC;EAAM,CAAC,GAAGH,QAAQ;EACtC,MAAM;IAAEI,MAAM;IAAEC;EAAgB,CAAC,GAAGR,kBAAkB,CAACK,UAAU,EAAED,OAAO,CAAC;EAC3E,IAAI,CAACG,MAAM,EAAE;IACT;EACJ;EACA,OAAON,aAAa,CAACK,KAAK,EAAAG,aAAA,CAAAA,aAAA,KACnBL,OAAO;IACVI,eAAe,EAAAC,aAAA,CAAAA,aAAA,KAAOL,OAAO,CAACI,eAAe,GAAKA,eAAe;EAAE,EACtE,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
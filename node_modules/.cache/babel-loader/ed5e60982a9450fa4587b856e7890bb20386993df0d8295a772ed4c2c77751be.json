{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getSkewCorrectedDate } from \"../utils\";\nimport { AwsSdkSigV4Signer, validateSigningProperties } from \"./AwsSdkSigV4Signer\";\nexport class AwsSdkSigV4ASigner extends AwsSdkSigV4Signer {\n  async sign(httpRequest, identity, signingProperties) {\n    var _config$sigv4aSigning, _ref;\n    if (!HttpRequest.isInstance(httpRequest)) {\n      throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n    }\n    const {\n      config,\n      signer,\n      signingRegion,\n      signingRegionSet,\n      signingName\n    } = await validateSigningProperties(signingProperties);\n    const configResolvedSigningRegionSet = await ((_config$sigv4aSigning = config.sigv4aSigningRegionSet) === null || _config$sigv4aSigning === void 0 ? void 0 : _config$sigv4aSigning.call(config));\n    const multiRegionOverride = ((_ref = configResolvedSigningRegionSet !== null && configResolvedSigningRegionSet !== void 0 ? configResolvedSigningRegionSet : signingRegionSet) !== null && _ref !== void 0 ? _ref : [signingRegion]).join(\",\");\n    const signedRequest = await signer.sign(httpRequest, {\n      signingDate: getSkewCorrectedDate(config.systemClockOffset),\n      signingRegion: multiRegionOverride,\n      signingService: signingName\n    });\n    return signedRequest;\n  }\n}","map":{"version":3,"names":["HttpRequest","getSkewCorrectedDate","AwsSdkSigV4Signer","validateSigningProperties","AwsSdkSigV4ASigner","sign","httpRequest","identity","signingProperties","_config$sigv4aSigning","_ref","isInstance","Error","config","signer","signingRegion","signingRegionSet","signingName","configResolvedSigningRegionSet","sigv4aSigningRegionSet","call","multiRegionOverride","join","signedRequest","signingDate","systemClockOffset","signingService"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getSkewCorrectedDate } from \"../utils\";\nimport { AwsSdkSigV4Signer, validateSigningProperties } from \"./AwsSdkSigV4Signer\";\nexport class AwsSdkSigV4ASigner extends AwsSdkSigV4Signer {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!HttpRequest.isInstance(httpRequest)) {\n            throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const { config, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);\n        const configResolvedSigningRegionSet = await config.sigv4aSigningRegionSet?.();\n        const multiRegionOverride = (configResolvedSigningRegionSet ??\n            signingRegionSet ?? [signingRegion]).join(\",\");\n        const signedRequest = await signer.sign(httpRequest, {\n            signingDate: getSkewCorrectedDate(config.systemClockOffset),\n            signingRegion: multiRegionOverride,\n            signingService: signingName,\n        });\n        return signedRequest;\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,SAASC,iBAAiB,EAAEC,yBAAyB,QAAQ,qBAAqB;AAClF,OAAO,MAAMC,kBAAkB,SAASF,iBAAiB,CAAC;EACtD,MAAMG,IAAIA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,iBAAiB,EAAE;IAAA,IAAAC,qBAAA,EAAAC,IAAA;IACjD,IAAI,CAACV,WAAW,CAACW,UAAU,CAACL,WAAW,CAAC,EAAE;MACtC,MAAM,IAAIM,KAAK,CAAC,sEAAsE,CAAC;IAC3F;IACA,MAAM;MAAEC,MAAM;MAAEC,MAAM;MAAEC,aAAa;MAAEC,gBAAgB;MAAEC;IAAY,CAAC,GAAG,MAAMd,yBAAyB,CAACK,iBAAiB,CAAC;IAC3H,MAAMU,8BAA8B,GAAG,QAAAT,qBAAA,GAAMI,MAAM,CAACM,sBAAsB,cAAAV,qBAAA,uBAA7BA,qBAAA,CAAAW,IAAA,CAAAP,MAAgC,CAAC;IAC9E,MAAMQ,mBAAmB,GAAG,EAAAX,IAAA,GAACQ,8BAA8B,aAA9BA,8BAA8B,cAA9BA,8BAA8B,GACvDF,gBAAgB,cAAAN,IAAA,cAAAA,IAAA,GAAI,CAACK,aAAa,CAAC,EAAEO,IAAI,CAAC,GAAG,CAAC;IAClD,MAAMC,aAAa,GAAG,MAAMT,MAAM,CAACT,IAAI,CAACC,WAAW,EAAE;MACjDkB,WAAW,EAAEvB,oBAAoB,CAACY,MAAM,CAACY,iBAAiB,CAAC;MAC3DV,aAAa,EAAEM,mBAAmB;MAClCK,cAAc,EAAET;IACpB,CAAC,CAAC;IACF,OAAOM,aAAa;EACxB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
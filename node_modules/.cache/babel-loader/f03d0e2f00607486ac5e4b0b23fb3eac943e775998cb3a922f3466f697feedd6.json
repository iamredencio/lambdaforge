{"ast":null,"code":"import _objectSpread from \"/Users/codinggents/Documents/lambdaforge/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { normalizeProvider } from \"@smithy/util-middleware\";\nimport { getEndpointFromRegion } from \"./utils/getEndpointFromRegion\";\nexport const resolveEndpointsConfig = input => {\n  var _input$useDualstackEn;\n  const useDualstackEndpoint = normalizeProvider((_input$useDualstackEn = input.useDualstackEndpoint) !== null && _input$useDualstackEn !== void 0 ? _input$useDualstackEn : false);\n  const {\n    endpoint,\n    useFipsEndpoint,\n    urlParser,\n    tls\n  } = input;\n  return Object.assign(input, {\n    tls: tls !== null && tls !== void 0 ? tls : true,\n    endpoint: endpoint ? normalizeProvider(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion(_objectSpread(_objectSpread({}, input), {}, {\n      useDualstackEndpoint,\n      useFipsEndpoint\n    })),\n    isCustomEndpoint: !!endpoint,\n    useDualstackEndpoint\n  });\n};","map":{"version":3,"names":["normalizeProvider","getEndpointFromRegion","resolveEndpointsConfig","input","_input$useDualstackEn","useDualstackEndpoint","endpoint","useFipsEndpoint","urlParser","tls","Object","assign","_objectSpread","isCustomEndpoint"],"sources":["/Users/codinggents/Documents/lambdaforge/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"],"sourcesContent":["import { normalizeProvider } from \"@smithy/util-middleware\";\nimport { getEndpointFromRegion } from \"./utils/getEndpointFromRegion\";\nexport const resolveEndpointsConfig = (input) => {\n    const useDualstackEndpoint = normalizeProvider(input.useDualstackEndpoint ?? false);\n    const { endpoint, useFipsEndpoint, urlParser, tls } = input;\n    return Object.assign(input, {\n        tls: tls ?? true,\n        endpoint: endpoint\n            ? normalizeProvider(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint)\n            : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),\n        isCustomEndpoint: !!endpoint,\n        useDualstackEndpoint,\n    });\n};\n"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,OAAO,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EAAA,IAAAC,qBAAA;EAC7C,MAAMC,oBAAoB,GAAGL,iBAAiB,EAAAI,qBAAA,GAACD,KAAK,CAACE,oBAAoB,cAAAD,qBAAA,cAAAA,qBAAA,GAAI,KAAK,CAAC;EACnF,MAAM;IAAEE,QAAQ;IAAEC,eAAe;IAAEC,SAAS;IAAEC;EAAI,CAAC,GAAGN,KAAK;EAC3D,OAAOO,MAAM,CAACC,MAAM,CAACR,KAAK,EAAE;IACxBM,GAAG,EAAEA,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,IAAI;IAChBH,QAAQ,EAAEA,QAAQ,GACZN,iBAAiB,CAAC,OAAOM,QAAQ,KAAK,QAAQ,GAAGE,SAAS,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAAC,GAChF,MAAML,qBAAqB,CAAAW,aAAA,CAAAA,aAAA,KAAMT,KAAK;MAAEE,oBAAoB;MAAEE;IAAe,EAAE,CAAC;IACtFM,gBAAgB,EAAE,CAAC,CAACP,QAAQ;IAC5BD;EACJ,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import AWS from 'aws-sdk';\nimport { awsConfig, validateAWSConfig } from '../config/aws-config';\n\n// AWS Bedrock configuration\nconst bedrock = new AWS.BedrockRuntime({\n  region: awsConfig.bedrock.region,\n  accessKeyId: awsConfig.credentials.accessKeyId,\n  secretAccessKey: awsConfig.credentials.secretAccessKey\n});\nclass AIService {\n  constructor() {\n    this.modelId = awsConfig.bedrock.modelId;\n    this.maxTokens = awsConfig.bedrock.maxTokens;\n    this.temperature = awsConfig.bedrock.temperature;\n    this.topP = awsConfig.bedrock.topP;\n\n    // Validate configuration on initialization\n    this.configValidation = validateAWSConfig();\n  }\n  async generateArchitectureRecommendations(formData) {\n    try {\n      const prompt = this.buildArchitecturePrompt(formData);\n      const params = {\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify({\n          anthropic_version: 'bedrock-2023-05-31',\n          max_tokens: this.maxTokens,\n          messages: [{\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.1,\n          top_p: 0.9\n        })\n      };\n      const response = await bedrock.invokeModel(params).promise();\n      const responseBody = JSON.parse(response.body);\n      return this.parseAIResponse(responseBody.content[0].text, formData);\n    } catch (error) {\n      console.error('AI Service Error:', error);\n      // Fallback to rule-based recommendations if AI fails\n      return this.getFallbackRecommendations(formData);\n    }\n  }\n  buildArchitecturePrompt(formData) {\n    const currentServices = {\n      infrastructure: formData.selectedInfrastructure || [],\n      compute: formData.selectedCompute || [],\n      integration: formData.selectedIntegration || [],\n      security: formData.selectedSecurity || [],\n      monitoring: formData.selectedMonitoring || [],\n      deployment: formData.selectedDeployment || [],\n      optimization: formData.selectedOptimization || []\n    };\n    return `You are an AWS Solutions Architect AI assistant. Analyze the following infrastructure configuration and provide specific, actionable recommendations.\n\nPROJECT DETAILS:\n- Project Name: ${formData.projectName || 'Not specified'}\n- Environment: ${formData.environment || 'Development'}\n- AWS Region: ${formData.awsRegion || 'us-east-1'}\n- VPC CIDR: ${formData.vpcCidrBlock || 'Not specified'}\n\nCURRENT SERVICES SELECTED:\n- Infrastructure: ${currentServices.infrastructure.join(', ') || 'None'}\n- Compute: ${currentServices.compute.join(', ') || 'None'}\n- Integration: ${currentServices.integration.join(', ') || 'None'}\n- Security: ${currentServices.security.join(', ') || 'None'}\n- Monitoring: ${currentServices.monitoring.join(', ') || 'None'}\n- Deployment: ${currentServices.deployment.join(', ') || 'None'}\n- Optimization: ${currentServices.optimization.join(', ') || 'None'}\n\nPlease provide 3-5 specific recommendations in the following JSON format:\n{\n  \"recommendations\": [\n    {\n      \"id\": \"unique-id\",\n      \"type\": \"security|cost|performance|architecture|monitoring\",\n      \"title\": \"Recommendation Title\",\n      \"description\": \"Brief description of the recommendation\",\n      \"impact\": \"Critical|High|Medium|Low\",\n      \"confidence\": 85,\n      \"savings\": \"$X/month or Risk Reduction or Operational Efficiency\",\n      \"reasoning\": \"Why this recommendation is important\",\n      \"recommendations\": [\"Step 1\", \"Step 2\", \"Step 3\"],\n      \"applyData\": {\n        \"selectedSecurity\": [\"service-to-add\"],\n        \"selectedMonitoring\": [\"service-to-add\"]\n      }\n    }\n  ]\n}\n\nFocus on:\n1. Security best practices and compliance\n2. Cost optimization opportunities\n3. Performance improvements\n4. Serverless-first architecture when appropriate\n5. Monitoring and observability gaps\n6. AWS Well-Architected Framework principles\n\nProvide only the JSON response, no additional text.`;\n  }\n  parseAIResponse(aiResponse, formData) {\n    try {\n      const parsed = JSON.parse(aiResponse);\n      return parsed.recommendations.map(rec => ({\n        ...rec,\n        icon: this.getIconForType(rec.type),\n        // Ensure applyData maintains existing selections\n        applyData: this.mergeApplyData(rec.applyData, formData)\n      }));\n    } catch (error) {\n      console.error('Failed to parse AI response:', error);\n      return this.getFallbackRecommendations(formData);\n    }\n  }\n  mergeApplyData(newData, formData) {\n    const merged = {};\n    Object.keys(newData).forEach(key => {\n      if (Array.isArray(newData[key])) {\n        // Merge arrays, avoiding duplicates\n        const existing = formData[key] || [];\n        merged[key] = [...new Set([...existing, ...newData[key]])];\n      } else {\n        merged[key] = newData[key];\n      }\n    });\n    return merged;\n  }\n  getIconForType(type) {\n    // Return icon components based on type\n    const iconMap = {\n      security: '🛡️',\n      cost: '💰',\n      performance: '⚡',\n      architecture: '🏗️',\n      monitoring: '📊'\n    };\n    return iconMap[type] || '💡';\n  }\n  getFallbackRecommendations(formData) {\n    var _formData$selectedSec, _formData$selectedCom, _formData$selectedOpt;\n    // Fallback rule-based recommendations if AI fails\n    const recommendations = [];\n\n    // Security recommendations\n    if (!((_formData$selectedSec = formData.selectedSecurity) !== null && _formData$selectedSec !== void 0 && _formData$selectedSec.includes('waf-protection'))) {\n      recommendations.push({\n        id: 'security-waf',\n        type: 'security',\n        title: 'Enable AWS WAF Protection',\n        description: 'Add Web Application Firewall for enhanced security',\n        impact: 'High',\n        confidence: 95,\n        savings: 'Risk Reduction',\n        reasoning: 'WAF protects against common web exploits and attacks',\n        recommendations: ['Enable AWS WAF', 'Configure rate limiting', 'Set up geo-blocking'],\n        icon: '🛡️',\n        applyData: {\n          selectedSecurity: [...(formData.selectedSecurity || []), 'waf-protection']\n        }\n      });\n    }\n\n    // Cost optimization\n    if ((_formData$selectedCom = formData.selectedCompute) !== null && _formData$selectedCom !== void 0 && _formData$selectedCom.includes('ec2-instances') && !((_formData$selectedOpt = formData.selectedOptimization) !== null && _formData$selectedOpt !== void 0 && _formData$selectedOpt.includes('auto-scaling'))) {\n      recommendations.push({\n        id: 'cost-autoscaling',\n        type: 'cost',\n        title: 'Implement Auto Scaling',\n        description: 'Reduce costs with automatic scaling based on demand',\n        impact: 'Medium',\n        confidence: 88,\n        savings: '$120/month',\n        reasoning: 'Auto scaling optimizes resource usage and reduces costs',\n        recommendations: ['Configure Auto Scaling Groups', 'Set up CloudWatch alarms', 'Define scaling policies'],\n        icon: '💰',\n        applyData: {\n          selectedOptimization: [...(formData.selectedOptimization || []), 'auto-scaling']\n        }\n      });\n    }\n    return recommendations;\n  }\n  async validateRecommendation(recommendation, currentFormData) {\n    // Validate that the recommendation doesn't conflict with current setup\n    const conflicts = [];\n    if (recommendation.applyData) {\n      Object.keys(recommendation.applyData).forEach(key => {\n        const newServices = recommendation.applyData[key];\n        const currentServices = currentFormData[key] || [];\n\n        // Check for any logical conflicts\n        if (key === 'selectedCompute') {\n          if (newServices.includes('lambda-functions') && currentServices.includes('ec2-instances')) {\n            conflicts.push('Mixing Lambda and EC2 may require additional configuration');\n          }\n        }\n      });\n    }\n    return {\n      isValid: conflicts.length === 0,\n      conflicts,\n      recommendation\n    };\n  }\n  async estimateCostImpact(recommendation, currentFormData) {\n    // Estimate the cost impact of applying this recommendation\n    const costMap = {\n      'waf-protection': 35,\n      'auto-scaling': -120,\n      // Negative means savings\n      'lambda-functions': -50,\n      'cloudfront-cdn': 25,\n      'x-ray-tracing': 22\n    };\n    let totalImpact = 0;\n    if (recommendation.applyData) {\n      Object.values(recommendation.applyData).flat().forEach(service => {\n        if (costMap[service]) {\n          totalImpact += costMap[service];\n        }\n      });\n    }\n    return {\n      monthlyImpact: totalImpact,\n      yearlyImpact: totalImpact * 12,\n      description: totalImpact < 0 ? `Saves $${Math.abs(totalImpact)}/month` : `Adds $${totalImpact}/month`\n    };\n  }\n}\nexport default new AIService();","map":{"version":3,"names":["AWS","awsConfig","validateAWSConfig","bedrock","BedrockRuntime","region","accessKeyId","credentials","secretAccessKey","AIService","constructor","modelId","maxTokens","temperature","topP","configValidation","generateArchitectureRecommendations","formData","prompt","buildArchitecturePrompt","params","contentType","accept","body","JSON","stringify","anthropic_version","max_tokens","messages","role","content","top_p","response","invokeModel","promise","responseBody","parse","parseAIResponse","text","error","console","getFallbackRecommendations","currentServices","infrastructure","selectedInfrastructure","compute","selectedCompute","integration","selectedIntegration","security","selectedSecurity","monitoring","selectedMonitoring","deployment","selectedDeployment","optimization","selectedOptimization","projectName","environment","awsRegion","vpcCidrBlock","join","aiResponse","parsed","recommendations","map","rec","icon","getIconForType","type","applyData","mergeApplyData","newData","merged","Object","keys","forEach","key","Array","isArray","existing","Set","iconMap","cost","performance","architecture","_formData$selectedSec","_formData$selectedCom","_formData$selectedOpt","includes","push","id","title","description","impact","confidence","savings","reasoning","validateRecommendation","recommendation","currentFormData","conflicts","newServices","isValid","length","estimateCostImpact","costMap","totalImpact","values","flat","service","monthlyImpact","yearlyImpact","Math","abs"],"sources":["/Users/codinggents/Documents/lambdaforge/src/services/aiService.js"],"sourcesContent":["import AWS from 'aws-sdk';\nimport { awsConfig, validateAWSConfig } from '../config/aws-config';\n\n// AWS Bedrock configuration\nconst bedrock = new AWS.BedrockRuntime({\n  region: awsConfig.bedrock.region,\n  accessKeyId: awsConfig.credentials.accessKeyId,\n  secretAccessKey: awsConfig.credentials.secretAccessKey\n});\n\nclass AIService {\n  constructor() {\n    this.modelId = awsConfig.bedrock.modelId;\n    this.maxTokens = awsConfig.bedrock.maxTokens;\n    this.temperature = awsConfig.bedrock.temperature;\n    this.topP = awsConfig.bedrock.topP;\n    \n    // Validate configuration on initialization\n    this.configValidation = validateAWSConfig();\n  }\n\n  async generateArchitectureRecommendations(formData) {\n    try {\n      const prompt = this.buildArchitecturePrompt(formData);\n      \n      const params = {\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify({\n          anthropic_version: 'bedrock-2023-05-31',\n          max_tokens: this.maxTokens,\n          messages: [\n            {\n              role: 'user',\n              content: prompt\n            }\n          ],\n          temperature: 0.1,\n          top_p: 0.9\n        })\n      };\n\n      const response = await bedrock.invokeModel(params).promise();\n      const responseBody = JSON.parse(response.body);\n      \n      return this.parseAIResponse(responseBody.content[0].text, formData);\n    } catch (error) {\n      console.error('AI Service Error:', error);\n      // Fallback to rule-based recommendations if AI fails\n      return this.getFallbackRecommendations(formData);\n    }\n  }\n\n  buildArchitecturePrompt(formData) {\n    const currentServices = {\n      infrastructure: formData.selectedInfrastructure || [],\n      compute: formData.selectedCompute || [],\n      integration: formData.selectedIntegration || [],\n      security: formData.selectedSecurity || [],\n      monitoring: formData.selectedMonitoring || [],\n      deployment: formData.selectedDeployment || [],\n      optimization: formData.selectedOptimization || []\n    };\n\n    return `You are an AWS Solutions Architect AI assistant. Analyze the following infrastructure configuration and provide specific, actionable recommendations.\n\nPROJECT DETAILS:\n- Project Name: ${formData.projectName || 'Not specified'}\n- Environment: ${formData.environment || 'Development'}\n- AWS Region: ${formData.awsRegion || 'us-east-1'}\n- VPC CIDR: ${formData.vpcCidrBlock || 'Not specified'}\n\nCURRENT SERVICES SELECTED:\n- Infrastructure: ${currentServices.infrastructure.join(', ') || 'None'}\n- Compute: ${currentServices.compute.join(', ') || 'None'}\n- Integration: ${currentServices.integration.join(', ') || 'None'}\n- Security: ${currentServices.security.join(', ') || 'None'}\n- Monitoring: ${currentServices.monitoring.join(', ') || 'None'}\n- Deployment: ${currentServices.deployment.join(', ') || 'None'}\n- Optimization: ${currentServices.optimization.join(', ') || 'None'}\n\nPlease provide 3-5 specific recommendations in the following JSON format:\n{\n  \"recommendations\": [\n    {\n      \"id\": \"unique-id\",\n      \"type\": \"security|cost|performance|architecture|monitoring\",\n      \"title\": \"Recommendation Title\",\n      \"description\": \"Brief description of the recommendation\",\n      \"impact\": \"Critical|High|Medium|Low\",\n      \"confidence\": 85,\n      \"savings\": \"$X/month or Risk Reduction or Operational Efficiency\",\n      \"reasoning\": \"Why this recommendation is important\",\n      \"recommendations\": [\"Step 1\", \"Step 2\", \"Step 3\"],\n      \"applyData\": {\n        \"selectedSecurity\": [\"service-to-add\"],\n        \"selectedMonitoring\": [\"service-to-add\"]\n      }\n    }\n  ]\n}\n\nFocus on:\n1. Security best practices and compliance\n2. Cost optimization opportunities\n3. Performance improvements\n4. Serverless-first architecture when appropriate\n5. Monitoring and observability gaps\n6. AWS Well-Architected Framework principles\n\nProvide only the JSON response, no additional text.`;\n  }\n\n  parseAIResponse(aiResponse, formData) {\n    try {\n      const parsed = JSON.parse(aiResponse);\n      return parsed.recommendations.map(rec => ({\n        ...rec,\n        icon: this.getIconForType(rec.type),\n        // Ensure applyData maintains existing selections\n        applyData: this.mergeApplyData(rec.applyData, formData)\n      }));\n    } catch (error) {\n      console.error('Failed to parse AI response:', error);\n      return this.getFallbackRecommendations(formData);\n    }\n  }\n\n  mergeApplyData(newData, formData) {\n    const merged = {};\n    \n    Object.keys(newData).forEach(key => {\n      if (Array.isArray(newData[key])) {\n        // Merge arrays, avoiding duplicates\n        const existing = formData[key] || [];\n        merged[key] = [...new Set([...existing, ...newData[key]])];\n      } else {\n        merged[key] = newData[key];\n      }\n    });\n    \n    return merged;\n  }\n\n  getIconForType(type) {\n    // Return icon components based on type\n    const iconMap = {\n      security: '🛡️',\n      cost: '💰',\n      performance: '⚡',\n      architecture: '🏗️',\n      monitoring: '📊'\n    };\n    return iconMap[type] || '💡';\n  }\n\n  getFallbackRecommendations(formData) {\n    // Fallback rule-based recommendations if AI fails\n    const recommendations = [];\n\n    // Security recommendations\n    if (!formData.selectedSecurity?.includes('waf-protection')) {\n      recommendations.push({\n        id: 'security-waf',\n        type: 'security',\n        title: 'Enable AWS WAF Protection',\n        description: 'Add Web Application Firewall for enhanced security',\n        impact: 'High',\n        confidence: 95,\n        savings: 'Risk Reduction',\n        reasoning: 'WAF protects against common web exploits and attacks',\n        recommendations: ['Enable AWS WAF', 'Configure rate limiting', 'Set up geo-blocking'],\n        icon: '🛡️',\n        applyData: {\n          selectedSecurity: [...(formData.selectedSecurity || []), 'waf-protection']\n        }\n      });\n    }\n\n    // Cost optimization\n    if (formData.selectedCompute?.includes('ec2-instances') && \n        !formData.selectedOptimization?.includes('auto-scaling')) {\n      recommendations.push({\n        id: 'cost-autoscaling',\n        type: 'cost',\n        title: 'Implement Auto Scaling',\n        description: 'Reduce costs with automatic scaling based on demand',\n        impact: 'Medium',\n        confidence: 88,\n        savings: '$120/month',\n        reasoning: 'Auto scaling optimizes resource usage and reduces costs',\n        recommendations: ['Configure Auto Scaling Groups', 'Set up CloudWatch alarms', 'Define scaling policies'],\n        icon: '💰',\n        applyData: {\n          selectedOptimization: [...(formData.selectedOptimization || []), 'auto-scaling']\n        }\n      });\n    }\n\n    return recommendations;\n  }\n\n  async validateRecommendation(recommendation, currentFormData) {\n    // Validate that the recommendation doesn't conflict with current setup\n    const conflicts = [];\n    \n    if (recommendation.applyData) {\n      Object.keys(recommendation.applyData).forEach(key => {\n        const newServices = recommendation.applyData[key];\n        const currentServices = currentFormData[key] || [];\n        \n        // Check for any logical conflicts\n        if (key === 'selectedCompute') {\n          if (newServices.includes('lambda-functions') && currentServices.includes('ec2-instances')) {\n            conflicts.push('Mixing Lambda and EC2 may require additional configuration');\n          }\n        }\n      });\n    }\n    \n    return {\n      isValid: conflicts.length === 0,\n      conflicts,\n      recommendation\n    };\n  }\n\n  async estimateCostImpact(recommendation, currentFormData) {\n    // Estimate the cost impact of applying this recommendation\n    const costMap = {\n      'waf-protection': 35,\n      'auto-scaling': -120, // Negative means savings\n      'lambda-functions': -50,\n      'cloudfront-cdn': 25,\n      'x-ray-tracing': 22\n    };\n\n    let totalImpact = 0;\n    \n    if (recommendation.applyData) {\n      Object.values(recommendation.applyData).flat().forEach(service => {\n        if (costMap[service]) {\n          totalImpact += costMap[service];\n        }\n      });\n    }\n\n    return {\n      monthlyImpact: totalImpact,\n      yearlyImpact: totalImpact * 12,\n      description: totalImpact < 0 ? `Saves $${Math.abs(totalImpact)}/month` : `Adds $${totalImpact}/month`\n    };\n  }\n}\n\nexport default new AIService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
import React, { useState, useEffect } from 'react';
import { Play, Download, Clock, DollarSign, CheckCircle, Zap, TrendingUp, Shield, Monitor, FileText, Package } from 'lucide-react';

const GenerateStep = ({ formData, prevStep, currentStep, totalSteps }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentTask, setCurrentTask] = useState('');
  const [estimatedCost, setEstimatedCost] = useState(0);
  const [generatedResources, setGeneratedResources] = useState([]);
  const [deploymentStatus, setDeploymentStatus] = useState('ready'); // ready, generating, completed, error
  const [generatedFiles, setGeneratedFiles] = useState(null);
  const [isExporting, setIsExporting] = useState(false);

  // Calculate estimated monthly cost based on selections
  useEffect(() => {
    let cost = 0;
    
    // Infrastructure costs
    if (formData.selectedInfrastructure?.includes('s3-bucket')) cost += 23;
    if (formData.selectedInfrastructure?.includes('dynamodb')) cost += 45;
    if (formData.selectedInfrastructure?.includes('rds-database')) cost += 85;
    if (formData.selectedInfrastructure?.includes('vpc-networking')) cost += 15;
    if (formData.selectedInfrastructure?.includes('ebs-volumes')) cost += 30;

    // Compute costs
    if (formData.selectedCompute?.includes('lambda-functions')) cost += 12;
    if (formData.selectedCompute?.includes('ec2-instances')) cost += 120;
    if (formData.selectedCompute?.includes('ecs-containers')) cost += 95;
    if (formData.selectedCompute?.includes('fargate-serverless')) cost += 75;

    // Integration costs
    if (formData.selectedIntegration?.includes('api-gateway')) cost += 25;
    if (formData.selectedIntegration?.includes('eventbridge')) cost += 8;
    if (formData.selectedIntegration?.includes('step-functions')) cost += 15;
    if (formData.selectedIntegration?.includes('sns-notifications')) cost += 5;

    // Security costs
    if (formData.selectedSecurity?.includes('kms-encryption')) cost += 12;
    if (formData.selectedSecurity?.includes('secrets-manager')) cost += 8;
    if (formData.selectedSecurity?.includes('waf-protection')) cost += 35;

    // Monitoring costs
    if (formData.selectedMonitoring?.includes('cloudwatch')) cost += 18;
    if (formData.selectedMonitoring?.includes('x-ray-tracing')) cost += 22;
    if (formData.selectedMonitoring?.includes('cloudtrail')) cost += 10;

    setEstimatedCost(cost);
  }, [formData]);

  // File generation functions
  const generateCloudFormationTemplate = () => {
    const projectName = formData.projectName || 'lambdaforge-project';
    const environment = formData.environment || 'Development';
    
    // Generate YAML format instead of JSON
    const yamlTemplate = `AWSTemplateFormatVersion: '2010-09-09'
Description: '${projectName} - Generated by LambdaForge'

Parameters:
  ProjectName:
    Type: String
    Default: ${projectName}
    Description: Name of the project
  Environment:
    Type: String
    Default: ${environment}
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Environment type

Resources:
${generateResourcesYAML()}

Outputs:
${generateOutputsYAML()}`;

    return yamlTemplate;
  };

  // YAML generation functions for proper CloudFormation format
  const generateResourcesYAML = () => {
    let yamlResources = '';

    // Infrastructure Resources
    if (formData.selectedInfrastructure?.includes('s3-bucket')) {
      yamlResources += `  # S3 Bucket with versioning and static website hosting
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '\${ProjectName}-storage-\${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Policy for static website hosting
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '\${S3Bucket}/*'

`;
    }

    if (formData.selectedInfrastructure?.includes('dynamodb')) {
      yamlResources += `  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '\${ProjectName}-data'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    // Compute Resources - Fixed IAM role without custom naming
    if (formData.selectedCompute?.includes('lambda-functions')) {
      yamlResources += `  # Lambda Execution Role (no custom name to avoid conflicts)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '\${ProjectName}-function'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log('Event:', JSON.stringify(event, null, 2));
              
              const response = {
                  statusCode: 200,
                  headers: {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  body: JSON.stringify({
                      message: 'Hello from ${formData.projectName || 'LambdaForge'}!',
                      timestamp: new Date().toISOString(),
                      environment: process.env.ENVIRONMENT || 'Development'
                  })
              };
              
              return response;
          };
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    // Integration Resources
    if (formData.selectedIntegration?.includes('api-gateway')) {
      yamlResources += `  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '\${ProjectName}-api'
      Description: !Sub 'API for \${ProjectName}'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;

      if (formData.selectedCompute?.includes('lambda-functions')) {
        yamlResources += `  # API Gateway Resource
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: api

  # API Gateway Method
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${LambdaFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:\${AWS::Region}::/restapis/\${ApiGateway}/stages/\${Environment}/*/*'

`;
      }
    }

    // Monitoring Resources
    if (formData.selectedMonitoring?.includes('cloudwatch')) {
      yamlResources += `  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/\${ProjectName}-logs'
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    return yamlResources || '  # No resources selected';
  };

  const generateOutputsYAML = () => {
    let yamlOutputs = '';

    if (formData.selectedInfrastructure?.includes('s3-bucket')) {
      yamlOutputs += `  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '\${ProjectName}-s3-bucket'
  S3BucketConsoleLink:
    Description: S3 Bucket Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/s3/buckets/\${S3Bucket}'
  S3WebsiteURL:
    Description: S3 Static Website URL
    Value: !Sub 'http://\${S3Bucket}.s3-website-\${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '\${ProjectName}-website-url'

`;
    }

    if (formData.selectedInfrastructure?.includes('dynamodb')) {
      yamlOutputs += `  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub '\${ProjectName}-dynamodb-table'
  DynamoDBConsoleLink:
    Description: DynamoDB Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=\${AWS::Region}#table?name=\${DynamoDBTable}'

`;
    }

    if (formData.selectedCompute?.includes('lambda-functions')) {
      yamlOutputs += `  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '\${ProjectName}-lambda-arn'
  LambdaConsoleLink:
    Description: Lambda Function Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/lambda/home?region=\${AWS::Region}#/functions/\${LambdaFunction}'

`;
    }

    if (formData.selectedIntegration?.includes('api-gateway')) {
      yamlOutputs += `  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://\${ApiGateway}.execute-api.\${AWS::Region}.amazonaws.com/\${Environment}'
    Export:
      Name: !Sub '\${ProjectName}-api-endpoint'
  ApiGatewayConsoleLink:
    Description: API Gateway Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/apigateway/home?region=\${AWS::Region}#/apis/\${ApiGateway}'

`;
    }

    if (formData.selectedMonitoring?.includes('cloudwatch')) {
      yamlOutputs += `  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub '\${ProjectName}-log-group'
  CloudWatchConsoleLink:
    Description: CloudWatch Logs Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=\${AWS::Region}#logsV2:log-groups/log-group/\${LogGroup}'

`;
    }

    yamlOutputs += `  CloudFormationConsoleLink:
    Description: CloudFormation Stack Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/cloudformation/home?region=\${AWS::Region}#/stacks/stackinfo?stackId=\${AWS::StackName}'

  DeploymentRegion:
    Description: AWS Region where resources are deployed
    Value: !Ref AWS::Region

`;

    return yamlOutputs;
  };

  /* eslint-disable no-useless-escape */
  const generateDeploymentScript = () => {
    const projectName = formData.projectName || 'lambdaforge-project';
    const environment = formData.environment || 'Development';

    return `#!/bin/bash

# ${projectName} Deployment Script
# Generated by LambdaForge on ${new Date().toISOString()}

set -e

# Configuration
PROJECT_NAME="${projectName}"
ENVIRONMENT="${environment}"
# Auto-detect AWS region from AWS CLI configuration
AWS_REGION=\$(aws configure get region)
if [ -z "\$AWS_REGION" ]; then
    echo "⚠️  No default region configured. Using us-east-1"
    AWS_REGION="us-east-1"
fi
STACK_NAME="\${PROJECT_NAME}-stack"

# Template Selection - Choose based on IAM permissions
# Use template_no_iam.yaml for limited permissions, template.yaml for full permissions
TEMPLATE_FILE="template_no_iam.yaml"

# =============================================================================
# 🌐 WEB APPLICATION CONFIGURATION
# =============================================================================
# Uncomment and configure ONE of the following options to deploy a web app:

# Option 1: Deploy from Local Folder
# WEB_APP_LOCAL_PATH="/Users/username/Documents/my-react-app"
# Example: WEB_APP_LOCAL_PATH="/Users/codinggents/Documents/lambdaforge"

# Option 2: Deploy from GitHub Repository  
# WEB_APP_GITHUB_REPO="https://github.com/username/repository-name"
# Example: WEB_APP_GITHUB_REPO="https://github.com/your-username/lambdaforge"

# Option 3: Infrastructure Only (Default)
# Leave both options commented out to deploy only AWS infrastructure

# 📋 Requirements for Web Apps:
# - Must have package.json file
# - Must have "build" script that creates build/ or dist/ folder
# - Supports React, Vue, Angular, and other Node.js web apps
# =============================================================================

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m'

print_status() {
    echo -e "\${BLUE}[INFO]\${NC} \$1"
}

print_success() {
    echo -e "\${GREEN}[SUCCESS]\${NC} \$1"
}

print_error() {
    echo -e "\${RED}[ERROR]\${NC} \$1"
}

print_warning() {
    echo -e "\${YELLOW}[WARNING]\${NC} \$1"
}

# Progress bar function
show_progress() {
    local duration=\$1
    local message=\$2
    local progress=0
    local bar_length=50
    
    echo -n "\$message "
    while [ \$progress -le \$duration ]; do
        local filled=\$((progress * bar_length / duration))
        local empty=\$((bar_length - filled))
        
        printf "\\r\$message ["
        printf "%\${filled}s" | tr ' ' '█'
        printf "%\${empty}s" | tr ' ' '░'
        printf "] %d%%" \$((progress * 100 / duration))
        
        sleep 1
        progress=\$((progress + 1))
    done
    echo
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials not configured. Run 'aws configure' first."
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Check specific AWS permissions
check_permissions() {
    print_status "Checking AWS permissions..."
    
    # Test S3 permissions
    if aws s3 ls &> /dev/null; then
        print_success "✓ S3 permissions OK"
    else
        print_error "✗ S3 permissions missing"
        return 1
    fi
    
    # Test CloudFormation permissions
    if aws cloudformation list-stacks --max-items 1 &> /dev/null; then
        print_success "✓ CloudFormation permissions OK"
    else
        print_error "✗ CloudFormation permissions missing"
        return 1
    fi
    
    # Test IAM permissions (optional)
    if aws iam list-roles --max-items 1 &> /dev/null 2>&1; then
        # Test Lambda permissions
        if aws lambda list-functions --max-items 1 &> /dev/null 2>&1; then
            # Test API Gateway permissions  
            if aws apigateway get-rest-apis --limit 1 &> /dev/null 2>&1; then
                print_success "✓ Full AWS permissions detected"
                print_warning "⚠ Using simplified template for reliability"
                TEMPLATE_FILE="template_no_iam.yaml"
            else
                print_warning "⚠ Limited API Gateway permissions - using simplified template"
                TEMPLATE_FILE="template_no_iam.yaml"
            fi
        else
            print_warning "⚠ Limited Lambda permissions - using simplified template"
            TEMPLATE_FILE="template_no_iam.yaml"
        fi
    else
        print_warning "⚠ Limited IAM permissions - using simplified template"
        TEMPLATE_FILE="template_no_iam.yaml"
    fi
}

# Check web application configuration
check_web_app_config() {
    if [ -n "\$WEB_APP_LOCAL_PATH" ] && [ -n "\$WEB_APP_GITHUB_REPO" ]; then
        print_error "Cannot specify both local path and GitHub repo. Choose one."
        exit 1
    fi
    
    if [ -n "\$WEB_APP_LOCAL_PATH" ]; then
        if [ ! -d "\$WEB_APP_LOCAL_PATH" ]; then
            print_error "Local web app path does not exist: \$WEB_APP_LOCAL_PATH"
            exit 1
        fi
        print_status "Web app source: Local folder (\$WEB_APP_LOCAL_PATH)"
    elif [ -n "\$WEB_APP_GITHUB_REPO" ]; then
        print_status "Web app source: GitHub repository (\$WEB_APP_GITHUB_REPO)"
    else
        print_warning "No web app source specified. Only AWS infrastructure will be created."
        echo ""
        print_status "💡 To deploy a web application alongside your infrastructure:"
        echo "   1. Edit this script (deploy.sh)"
        echo "   2. Uncomment and set either:"
        echo "      • WEB_APP_LOCAL_PATH=\"/path/to/your/app\""
        echo "      • WEB_APP_GITHUB_REPO=\"https://github.com/user/repo\""
        echo "   3. Re-run: ./deploy.sh"
        echo ""
    fi
}

# Build and package web application
build_web_app() {
    if [ -z "\$WEB_APP_LOCAL_PATH" ] && [ -z "\$WEB_APP_GITHUB_REPO" ]; then
        print_status "Skipping web app build - no source specified"
        return 0
    fi
    
    print_status "Building web application..."
    
    if [ -n "\$WEB_APP_LOCAL_PATH" ]; then
        # Build from local path (in place)
        print_status "Building from local path: \$WEB_APP_LOCAL_PATH"
        
        # Save current directory
        ORIGINAL_DIR=\$(pwd)
        
        # Go to the local path and build there
        cd "\$WEB_APP_LOCAL_PATH"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="\$WEB_APP_LOCAL_PATH/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="\$WEB_APP_LOCAL_PATH/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                cd "\$ORIGINAL_DIR"
                exit 1
            fi
        else
            print_error "No package.json found in \$WEB_APP_LOCAL_PATH"
            cd "\$ORIGINAL_DIR"
            exit 1
        fi
        
        # Return to original directory
        cd "\$ORIGINAL_DIR"
        
    elif [ -n "\$WEB_APP_GITHUB_REPO" ]; then
        # Clone from GitHub to temporary directory
        print_status "Cloning from GitHub repository: \$WEB_APP_GITHUB_REPO"
        
        BUILD_DIR="\$(mktemp -d)"
        print_status "Using build directory: \$BUILD_DIR"
        
        git clone "\$WEB_APP_GITHUB_REPO" "\$BUILD_DIR"
        cd "\$BUILD_DIR"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="\$BUILD_DIR/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="\$BUILD_DIR/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                exit 1
            fi
        else
            print_error "No package.json found in cloned repository"
            exit 1
        fi
    fi
    
    print_success "Web application built successfully"
    echo "Built app location: \$BUILT_APP_PATH"
}

# Deploy CloudFormation stack
deploy_stack() {
    print_status "Checking if stack exists..."
    
    if aws cloudformation describe-stacks --stack-name "\$STACK_NAME" --region "\$AWS_REGION" &> /dev/null; then
        print_status "Stack exists. Updating..."
        print_status "Using template: \$TEMPLATE_FILE"
        
        aws cloudformation update-stack \\
            --stack-name "\$STACK_NAME" \\
            --template-body file://\$TEMPLATE_FILE \\
            --parameters ParameterKey=ProjectName,ParameterValue="\$PROJECT_NAME" \\
                        ParameterKey=Environment,ParameterValue="\$ENVIRONMENT" \\
            --capabilities CAPABILITY_IAM \\
            --region "\$AWS_REGION"
        
        print_status "Waiting for stack update to complete..."
        show_progress 180 "🔄 Updating AWS resources"
        
        if aws cloudformation wait stack-update-complete --stack-name "\$STACK_NAME" --region "\$AWS_REGION"; then
            print_success "Stack updated successfully!"
        else
            print_error "Stack update failed!"
            print_status "Checking stack events for details..."
            aws cloudformation describe-stack-events --stack-name "\$STACK_NAME" --region "\$AWS_REGION" --query 'StackEvents[?ResourceStatus==\`UPDATE_FAILED\`].[LogicalResourceId,ResourceStatusReason]' --output table
            return 1
        fi
    else
        print_status "Stack does not exist. Creating..."
        print_status "Using template: \$TEMPLATE_FILE"
        
        # Show resource creation progress
        print_status "📋 Resources to be created:"
        if [ "\$TEMPLATE_FILE" = "template.yaml" ]; then
            echo "  • S3 Bucket (Static Website)"
            echo "  • IAM Execution Role"
            echo "  • Lambda Function"  
            echo "  • API Gateway"
            echo "  • CloudWatch Log Group"
        else
            echo "  • S3 Bucket (Static Website)"
            echo "  • CloudWatch Log Group"
        fi
        echo
        
        aws cloudformation create-stack \\
            --stack-name "\$STACK_NAME" \\
            --template-body file://\$TEMPLATE_FILE \\
            --parameters ParameterKey=ProjectName,ParameterValue="\$PROJECT_NAME" \\
                        ParameterKey=Environment,ParameterValue="\$ENVIRONMENT" \\
            --capabilities CAPABILITY_IAM \\
            --region "\$AWS_REGION"
        
        print_status "Waiting for stack creation to complete..."
        
        # Show progress for different resource types
        (
            show_progress 30 "🪣 Creating S3 Bucket" &
            sleep 35
            show_progress 20 "📊 Creating CloudWatch Log Group" &
            sleep 25
            if [ "\$TEMPLATE_FILE" = "template.yaml" ]; then
                show_progress 60 "🔐 Creating IAM Role & Lambda Function" &
                sleep 65
                show_progress 40 "🌐 Creating API Gateway" &
            fi
        ) &
        
        if aws cloudformation wait stack-create-complete --stack-name "\$STACK_NAME" --region "\$AWS_REGION"; then
            print_success "Stack created successfully!"
        else
            print_error "Stack creation failed!"
            print_status "Checking stack events for details..."
            aws cloudformation describe-stack-events --stack-name "\$STACK_NAME" --region "\$AWS_REGION" --query 'StackEvents[?ResourceStatus==\`CREATE_FAILED\`].[LogicalResourceId,ResourceStatusReason]' --output table
            return 1
        fi
    fi
}

# Deploy web application to S3
deploy_web_app() {
    if [ -z "\$BUILT_APP_PATH" ]; then
        print_status "Skipping web app deployment - no built app"
        return 0
    fi
    
    print_status "Deploying web application to S3..."
    
    # Get S3 bucket name from CloudFormation outputs
    S3_BUCKET=\$(aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs[?OutputKey==\`S3BucketName\`].OutputValue' \\
        --output text)
    
    if [ -z "\$S3_BUCKET" ] || [ "\$S3_BUCKET" = "None" ]; then
        print_warning "No S3 bucket found in stack outputs. Skipping web app deployment."
        return 0
    fi
    
    print_status "Uploading to S3 bucket: \$S3_BUCKET"
    
    # Upload files to S3
    aws s3 sync "\$BUILT_APP_PATH" "s3://\$S3_BUCKET" \\
        --region "\$AWS_REGION" \\
        --delete
    
    # Configure S3 public access for static website hosting
    print_status "Configuring S3 bucket for static website hosting..."
    
    # Disable public access block (required for static websites)
    aws s3api put-public-access-block \\
        --bucket "\$S3_BUCKET" \\
        --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false" \\
        --region "\$AWS_REGION"
    
    # Create bucket policy for public read access
    cat > bucket-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::\$S3_BUCKET/*"
        }
    ]
}
EOF
    
    # Apply bucket policy
    aws s3api put-bucket-policy \\
        --bucket "\$S3_BUCKET" \\
        --policy file://bucket-policy.json \\
        --region "\$AWS_REGION"
    
    # Configure S3 for static website hosting
    aws s3 website "s3://\$S3_BUCKET" \\
        --index-document index.html \\
        --error-document index.html \\
        --region "\$AWS_REGION"
    
    # Get website URL (correct format for different regions)
    if [ "\$AWS_REGION" = "us-east-1" ]; then
        WEBSITE_URL="http://\$S3_BUCKET.s3-website-\$AWS_REGION.amazonaws.com"
    else
        WEBSITE_URL="http://\$S3_BUCKET.s3-website.\$AWS_REGION.amazonaws.com"
    fi
    
    # Clean up temporary files
    rm -f bucket-policy.json
    
    print_success "Web application deployed successfully!"
    echo ""
    print_success "🌐 Your web application is available at:"
    echo "   \$WEBSITE_URL"
    echo ""
    print_status "📋 S3 Configuration Applied:"
    echo "  • Public read access enabled"
    echo "  • Static website hosting configured"
    echo "  • Bucket policy applied for public access"
    echo ""
}

# Main deployment function
main() {
    print_status "🚀 Starting deployment process..."
    echo "Project: \$PROJECT_NAME"
    echo "Environment: \$ENVIRONMENT" 
    echo "Region: \$AWS_REGION"
    echo "Stack: \$STACK_NAME"
    echo

    # Run checks
    check_prerequisites
    check_permissions
    check_web_app_config

    # Build and deploy
    build_web_app
    deploy_stack
    deploy_web_app

    print_success "🎉 Deployment completed successfully!"
    echo
    print_status "📋 Deployment Summary:"
    echo "• Stack Name: \$STACK_NAME"
    echo "• Template Used: \$TEMPLATE_FILE"
    echo "• Region: \$AWS_REGION"
    echo "• Console: https://\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\$AWS_REGION#/stacks"
    
    # Show stack outputs
    print_status "🔗 Resource Links:"
    aws cloudformation describe-stacks --stack-name "\$STACK_NAME" --region "\$AWS_REGION" --query 'Stacks[0].Outputs[].[OutputKey,OutputValue]' --output table 2>/dev/null || echo "Stack outputs not available yet"
}

# Run main function
main "\$@"
`;
  };
  /* eslint-enable no-useless-escape */

  /* eslint-disable no-useless-escape */
  const generateDeleteScript = () => {
    const projectName = formData.projectName || 'lambdaforge-project';

    return `#!/bin/bash

# ${projectName} Resource Cleanup Script
# Generated by LambdaForge on ${new Date().toISOString()}
# ⚠️  WARNING: This script will DELETE all resources created by the deployment!

set -e

# Configuration
PROJECT_NAME="${projectName}"
# Auto-detect AWS region from AWS CLI configuration
AWS_REGION=\$(aws configure get region)
if [ -z "\$AWS_REGION" ]; then
    echo "⚠️  No default region configured. Using us-east-1"
    AWS_REGION="us-east-1"
fi
STACK_NAME="\${PROJECT_NAME}-stack"

# Web Application Deployment Configuration
# Set one of these to deploy the actual web application:
# WEB_APP_LOCAL_PATH="/path/to/your/web/app"          # Local folder path
# WEB_APP_GITHUB_REPO="https://github.com/user/repo" # GitHub repository URL
WEB_APP_LOCAL_PATH=""
WEB_APP_GITHUB_REPO=""

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Print functions
print_status() {
    echo -e "\${BLUE}ℹ️  \$1\${NC}"
}

print_success() {
    echo -e "\${GREEN}✅ \$1\${NC}"
}

print_warning() {
    echo -e "\${YELLOW}⚠️  \$1\${NC}"
}

print_error() {
    echo -e "\${RED}❌ \$1\${NC}"
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials not configured. Run 'aws configure' first."
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Check web application configuration
check_web_app_config() {
    if [ -n "\$WEB_APP_LOCAL_PATH" ] && [ -n "\$WEB_APP_GITHUB_REPO" ]; then
        print_error "Cannot specify both local path and GitHub repo. Choose one."
        exit 1
    fi
    
    if [ -n "\$WEB_APP_LOCAL_PATH" ]; then
        if [ ! -d "\$WEB_APP_LOCAL_PATH" ]; then
            print_error "Local web app path does not exist: \$WEB_APP_LOCAL_PATH"
            exit 1
        fi
        print_status "Web app source: Local folder (\$WEB_APP_LOCAL_PATH)"
    elif [ -n "\$WEB_APP_GITHUB_REPO" ]; then
        print_status "Web app source: GitHub repository (\$WEB_APP_GITHUB_REPO)"
    else
        print_warning "No web app source specified. Only AWS infrastructure will be created."
        echo ""
        print_status "💡 To deploy a web application alongside your infrastructure:"
        echo "   1. Edit this script (deploy.sh)"
        echo "   2. Uncomment and set either:"
        echo "      • WEB_APP_LOCAL_PATH=\"/path/to/your/app\""
        echo "      • WEB_APP_GITHUB_REPO=\"https://github.com/user/repo\""
        echo "   3. Re-run: ./deploy.sh"
        echo ""
    fi
}

# Build and package web application
build_web_app() {
    if [ -z "\$WEB_APP_LOCAL_PATH" ] && [ -z "\$WEB_APP_GITHUB_REPO" ]; then
        print_status "Skipping web app build - no source specified"
        return 0
    fi
    
    print_status "Building web application..."
    
    if [ -n "\$WEB_APP_LOCAL_PATH" ]; then
        # Build from local path (in place)
        print_status "Building from local path: \$WEB_APP_LOCAL_PATH"
        
        # Save current directory
        ORIGINAL_DIR=\$(pwd)
        
        # Go to the local path and build there
        cd "\$WEB_APP_LOCAL_PATH"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="\$WEB_APP_LOCAL_PATH/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="\$WEB_APP_LOCAL_PATH/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                cd "\$ORIGINAL_DIR"
                exit 1
            fi
        else
            print_error "No package.json found in \$WEB_APP_LOCAL_PATH"
            cd "\$ORIGINAL_DIR"
            exit 1
        fi
        
        # Return to original directory
        cd "\$ORIGINAL_DIR"
        
    elif [ -n "\$WEB_APP_GITHUB_REPO" ]; then
        # Clone from GitHub to temporary directory
        print_status "Cloning from GitHub repository: \$WEB_APP_GITHUB_REPO"
        
        BUILD_DIR="\$(mktemp -d)"
        print_status "Using build directory: \$BUILD_DIR"
        
        git clone "\$WEB_APP_GITHUB_REPO" "\$BUILD_DIR"
        cd "\$BUILD_DIR"
        
        if [ -f "package.json" ]; then
            print_status "Installing dependencies..."
            npm install
            
            print_status "Building application..."
            npm run build
            
            if [ -d "build" ]; then
                BUILT_APP_PATH="\$BUILD_DIR/build"
            elif [ -d "dist" ]; then
                BUILT_APP_PATH="\$BUILD_DIR/dist"
            else
                print_error "Build directory not found. Expected 'build' or 'dist' folder."
                exit 1
            fi
        else
            print_error "No package.json found in cloned repository"
            exit 1
        fi
    fi
    
    print_success "Web application built successfully"
    echo "Built app location: \$BUILT_APP_PATH"
}

# Deploy web application to S3
deploy_web_app() {
    if [ -z "\$BUILT_APP_PATH" ]; then
        print_status "Skipping web app deployment - no built app"
        return 0
    fi
    
    print_status "Deploying web application to S3..."
    
    # Get S3 bucket name from CloudFormation outputs
    S3_BUCKET=\$(aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs[?OutputKey==\`S3BucketName\`].OutputValue' \\
        --output text)
    
    if [ -z "\$S3_BUCKET" ] || [ "\$S3_BUCKET" = "None" ]; then
        print_warning "No S3 bucket found in stack outputs. Skipping web app deployment."
        return 0
    fi
    
    print_status "Uploading to S3 bucket: \$S3_BUCKET"
    
    # Upload files to S3
    aws s3 sync "\$BUILT_APP_PATH" "s3://\$S3_BUCKET" \\
        --region "\$AWS_REGION" \\
        --delete
    
    # Configure S3 public access for static website hosting
    print_status "Configuring S3 bucket for static website hosting..."
    
    # Disable public access block (required for static websites)
    aws s3api put-public-access-block \\
        --bucket "\$S3_BUCKET" \\
        --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false" \\
        --region "\$AWS_REGION"
    
    # Create bucket policy for public read access
    cat > bucket-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::\$S3_BUCKET/*"
        }
    ]
}
EOF
    
    # Apply bucket policy
    aws s3api put-bucket-policy \\
        --bucket "\$S3_BUCKET" \\
        --policy file://bucket-policy.json \\
        --region "\$AWS_REGION"
    
    # Configure S3 for static website hosting
    aws s3 website "s3://\$S3_BUCKET" \\
        --index-document index.html \\
        --error-document index.html \\
        --region "\$AWS_REGION"
    
    # Get website URL (correct format for different regions)
    if [ "\$AWS_REGION" = "us-east-1" ]; then
        WEBSITE_URL="http://\$S3_BUCKET.s3-website-\$AWS_REGION.amazonaws.com"
    else
        WEBSITE_URL="http://\$S3_BUCKET.s3-website.\$AWS_REGION.amazonaws.com"
    fi
    
    # Clean up temporary files
    rm -f bucket-policy.json
    
    print_success "Web application deployed successfully!"
    echo ""
    print_success "🌐 Your web application is available at:"
    echo "   \$WEBSITE_URL"
    echo ""
}

# Deploy or update the CloudFormation stack
deploy_stack() {
    print_status "Checking if stack exists..."
    
    if aws cloudformation describe-stacks --stack-name "\$STACK_NAME" --region "\$AWS_REGION" &>/dev/null; then
        print_status "Stack exists. Updating..."
        OPERATION="update-stack"
    else
        print_status "Stack does not exist. Creating..."
        OPERATION="create-stack"
    fi
    
    print_status "Deploying CloudFormation stack..."
    print_status "Stack Name: \$STACK_NAME"
    print_status "Region: \$AWS_REGION"
    print_status "Template: template.yaml"
    
    # Deploy the stack
    aws cloudformation \$OPERATION \\
        --stack-name "\$STACK_NAME" \\
        --template-body file://template.yaml \\
        --capabilities CAPABILITY_IAM \\
        --region "\$AWS_REGION"
    
    if [ \$? -ne 0 ]; then
        print_error "Failed to create/update the stack"
        exit 1
    fi
    
    print_status "Waiting for stack operation to complete..."
    print_status "This may take several minutes..."
    
    # Wait for the operation to complete
    if [ "\$OPERATION" = "create-stack" ]; then
        WAIT_CONDITION="stack-create-complete"
    else
        WAIT_CONDITION="stack-update-complete"
    fi
    
    if aws cloudformation wait \$WAIT_CONDITION --stack-name "\$STACK_NAME" --region "\$AWS_REGION"; then
        print_success "Stack operation completed successfully! 🎉"
    else
        print_error "Stack operation failed or timed out"
        print_status "Check the CloudFormation console for details:"
        echo "https://\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\$AWS_REGION#/stacks"
        exit 1
    fi
}

# Show deployment results
show_results() {
    print_success "🎉 Deployment completed successfully!"
    echo ""
    print_status "📋 Resource Summary:"
    
    # Get stack outputs
    aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \\
        --output table
    
    echo ""
    print_status "🔗 AWS Console Links:"
    
    # CloudFormation Console
    echo "📊 CloudFormation Stack:"
    echo "   https://\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\$AWS_REGION#/stacks/stackinfo?stackId=\$STACK_NAME"
    
    # Get resource links
    LAMBDA_FUNCTION=\$(aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs[?OutputKey==\`LambdaFunctionName\`].OutputValue' \\
        --output text 2>/dev/null)
    
    API_GATEWAY=\$(aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs[?OutputKey==\`ApiGatewayUrl\`].OutputValue' \\
        --output text 2>/dev/null)
    
    S3_BUCKET=\$(aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs[?OutputKey==\`S3BucketName\`].OutputValue' \\
        --output text 2>/dev/null)
    
    if [ -n "\$LAMBDA_FUNCTION" ] && [ "\$LAMBDA_FUNCTION" != "None" ]; then
        echo "⚡ Lambda Function:"
        echo "   https://\$AWS_REGION.console.aws.amazon.com/lambda/home?region=\$AWS_REGION#/functions/\$LAMBDA_FUNCTION"
    fi
    
    if [ -n "\$API_GATEWAY" ] && [ "\$API_GATEWAY" != "None" ]; then
        echo "🌐 API Gateway:"
        echo "   \$API_GATEWAY"
    fi
    
    if [ -n "\$S3_BUCKET" ] && [ "\$S3_BUCKET" != "None" ]; then
        echo "🪣 S3 Bucket:"
        echo "   https://s3.console.aws.amazon.com/s3/buckets/\$S3_BUCKET?region=\$AWS_REGION"
    fi
    
    echo ""
    print_status "💡 Next Steps:"
    echo "  • Test your deployed resources using the links above"
    echo "  • Monitor logs in CloudWatch"
    echo "  • Use delete.sh to clean up resources when done"
    echo ""
}

# Main deployment function
main() {
    echo ""
    echo "======================================"
    echo "🚀 ${projectName} Deployment"
    echo "======================================"
    echo "Project: \$PROJECT_NAME"
    echo "Region: \$AWS_REGION"
    echo ""
    
    check_prerequisites
    check_web_app_config
    build_web_app
    deploy_stack
    deploy_web_app
    show_results
}

# Run with error handling
if [ "\${BASH_SOURCE[0]}" == "\${0}" ]; then
    main "$@"
fi
`;
  };
  /* eslint-enable no-useless-escape */

  const generateReadme = () => {
    const projectName = formData.projectName || 'lambdaforge-project';

    return `# ${projectName} - AWS Infrastructure Deployment

Generated by **LambdaForge** on ${new Date().toLocaleDateString()}

## 🚀 Quick Start

1. **Configure AWS CLI** (if not already done):
   \`\`\`bash
   aws configure
   \`\`\`

2. **Deploy Infrastructure**:
   \`\`\`bash
   ./deploy.sh
   \`\`\`

3. **Clean Up** (when done):
   \`\`\`bash
   ./delete.sh
   \`\`\`

## 📋 What's Included

- **template.yaml** / **template_no_iam.yaml**: CloudFormation infrastructure templates
- **deploy.sh**: Intelligent deployment script with permission detection and progress bars
- **delete.sh**: Safe cleanup script with confirmation prompts
- **README.md**: This documentation file

## 🔧 Features

### Intelligent Permission Detection
The deployment script automatically detects your AWS permissions and chooses the appropriate template:
- **Full Permissions**: Uses complete template with Lambda, API Gateway, and IAM roles
- **Limited Permissions**: Falls back to simplified template with S3 and CloudWatch only

### Visual Progress Tracking
- Real-time progress bars for resource creation
- Clear status messages and error handling
- Resource-specific deployment phases

### Web Application Support
Deploy any React/Node.js web application alongside your infrastructure:

#### Option 1: Local Development
\`\`\`bash
# Edit deploy.sh and set:
WEB_APP_LOCAL_PATH="/path/to/your/web/app"
\`\`\`

#### Option 2: GitHub Repository
\`\`\`bash
# Edit deploy.sh and set:
WEB_APP_GITHUB_REPO="https://github.com/user/repo"
\`\`\`

#### Option 3: Infrastructure Only (Default)
If neither path is set, only AWS infrastructure will be created.

### Automatic S3 Website Configuration
When deploying a web application, the script automatically:
- **Disables S3 Public Access Block**: Required for static website hosting
- **Creates Bucket Policy**: Allows public read access to website files
- **Configures Website Hosting**: Sets index.html as the default document
- **Generates Correct URL**: Uses proper regional endpoint format

### Example: Deploy LambdaForge Application
\`\`\`bash
# To deploy LambdaForge itself:
WEB_APP_GITHUB_REPO="https://github.com/your-username/lambdaforge"
\`\`\`

## ⚠️ Important Requirements

### Required AWS Permissions

**Minimum Required:**
- \`s3:*\` - S3 bucket operations
- \`cloudformation:*\` - Stack management
- \`logs:*\` - CloudWatch logs

**For Full Template:**
- \`iam:*\` - IAM role management
- \`lambda:*\` - Lambda function operations
- \`apigateway:*\` - API Gateway management

### Common Error Solutions

#### Error: "User is not authorized to perform: iam:CreateRole"
**Solution**: Your AWS user lacks IAM permissions. The script will automatically use the simplified template.

#### Error: "Stack with id X does not exist"
**Solution**: This is normal for first deployment. The script will create a new stack.

#### Error: "Template format error"
**Solution**: Ensure you're using the correct template file. The script auto-selects based on permissions.

## 🏗️ Infrastructure Overview

### Resources Created (Full Template)
- **S3 Bucket**: Static website hosting with public read access
- **Lambda Function**: Serverless compute with execution role
- **API Gateway**: RESTful API endpoint
- **CloudWatch Log Group**: Application logging
- **IAM Role**: Lambda execution permissions

### Resources Created (Simplified Template)
- **S3 Bucket**: Static website hosting with public read access
- **CloudWatch Log Group**: Application logging

## 🔗 Useful Links

After deployment, check these AWS Console links:
- **CloudFormation**: Monitor stack status and resources
- **S3**: View uploaded files and website configuration
- **CloudWatch**: Check application logs and metrics
- **Lambda**: Test functions and view code (full template only)
- **API Gateway**: Test endpoints and view usage (full template only)

## 🛡️ Security Notes

- S3 bucket is configured for **public read access** (required for static websites)
- IAM roles follow **least privilege principle**
- All resources are tagged for easy identification
- Use **delete.sh** to clean up resources and avoid ongoing charges

## 🆘 Troubleshooting

### Deployment Fails
1. Check AWS credentials: \`aws sts get-caller-identity\`
2. Verify region configuration: \`aws configure get region\`
3. Review CloudFormation events in AWS Console
4. Check the deployment script output for specific errors

### Web App Deployment Issues
1. Ensure \`package.json\` exists in your web app directory
2. Verify build script creates \`build/\` or \`dist/\` folder
3. Check S3 bucket permissions and website configuration

### S3 Website Hosting Issues
1. **DNS_PROBE_FINISHED_NXDOMAIN Error**: Check URL format
   - ✅ **Correct**: \`bucket-name.s3-website.region.amazonaws.com\`
   - ❌ **Wrong**: \`bucket-name.s3-website-region.amazonaws.com\`
2. **Access Denied Error**: Bucket policy or public access block issue
   - Run deployment script again to fix S3 configuration
   - Check AWS Console for bucket policy and public access settings
3. **Website Not Loading**: Verify index.html exists in bucket root

## 📞 Support

- **AWS Documentation**: https://docs.aws.amazon.com/
- **CloudFormation Guide**: https://docs.aws.amazon.com/cloudformation/
- **LambdaForge**: Generated with intelligent deployment automation

---

**Generated by LambdaForge** - Making AWS deployment simple and reliable! 🚀
`;
  };

  // Create and download zip file
  const downloadZipFile = async (files, projectName) => {
    // Dynamically import JSZip
    const JSZip = (await import('jszip')).default;
    
    const zip = new JSZip();
    
    // Add all files to zip
    Object.entries(files).forEach(([filename, content]) => {
      zip.file(filename, content);
    });
    
    // Generate zip file
    const zipBlob = await zip.generateAsync({ type: 'blob' });
    
    // Download zip file
    const element = document.createElement('a');
    element.href = URL.createObjectURL(zipBlob);
    element.download = `${projectName}-infrastructure.zip`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    URL.revokeObjectURL(element.href);
  };

  // Export Configuration function - makes the button functional!
  const exportConfiguration = async () => {
    setIsExporting(true);
    
    try {
      const projectName = formData.projectName || 'lambdaforge-project';
      
      // Generate all files
      const files = {
        'template.yaml': generateCloudFormationTemplate(),
        'deploy.sh': generateDeploymentScript(),
        'delete.sh': generateDeleteScript(),
        'README.md': generateReadme()
      };

      setGeneratedFiles(files);

      // Download as zip file
      await downloadZipFile(files, projectName);



    } catch (error) {
      console.error('Export failed:', error);
      alert('❌ Export failed. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const simulateDeployment = async () => {
    setIsGenerating(true);
    setDeploymentStatus('generating');
    setProgress(0);
    setGeneratedResources([]);

    const tasks = [
      { name: 'Validating AWS credentials', duration: 800 },
      { name: 'Analyzing infrastructure requirements', duration: 1200 },
      { name: 'Generating CloudFormation templates', duration: 1500 },
      { name: 'Creating deployment scripts', duration: 1000 },
      { name: 'Creating resource cleanup scripts', duration: 800 },
      { name: 'Generating documentation', duration: 800 },
      { name: 'Validating template syntax', duration: 1000 },
      { name: 'Preparing deployment package', duration: 700 }
    ];

    let totalProgress = 0;
    const progressStep = 100 / tasks.length;

    for (let i = 0; i < tasks.length; i++) {
      setCurrentTask(tasks[i].name);
      
      await new Promise(resolve => setTimeout(resolve, tasks[i].duration));
      
      totalProgress += progressStep;
      setProgress(Math.round(totalProgress));

      // Add generated resources as we progress
      if (i === 2) { // After CloudFormation generation
        setGeneratedResources(prev => [...prev, 
          { name: 'CloudFormation Template', id: 'template.yaml', status: 'generated', type: 'infrastructure' }
        ]);
      }
      if (i === 3) { // After deployment script
        setGeneratedResources(prev => [...prev, 
          { name: 'Deployment Script', id: 'deploy.sh', status: 'generated', type: 'automation' }
        ]);
      }
      if (i === 4) { // After generating cleanup script
        setGeneratedResources(prev => [...prev, 
          { name: 'Resource Cleanup Script', id: 'delete.sh', status: 'generated', type: 'automation' }
        ]);
      }
      if (i === 5) { // After documentation
        setGeneratedResources(prev => [...prev, 
          { name: 'README Documentation', id: 'README.md', status: 'generated', type: 'documentation' }
        ]);
      }
    }

    // Generate all files automatically
    const files = {
      'template.yaml': generateCloudFormationTemplate(),
      'deploy.sh': generateDeploymentScript(),
      'delete.sh': generateDeleteScript(),
      'README.md': generateReadme()
    };
    
    setGeneratedFiles(files);
    setCurrentTask('All deployment files generated successfully!');
    setDeploymentStatus('completed');
    setIsGenerating(false);
  };

  const getServiceCounts = () => {
    return {
      infrastructure: formData.selectedInfrastructure?.length || 0,
      compute: formData.selectedCompute?.length || 0,
      integration: formData.selectedIntegration?.length || 0,
      security: formData.selectedSecurity?.length || 0,
      monitoring: formData.selectedMonitoring?.length || 0,
      deployment: formData.selectedDeployment?.length || 0,
      optimization: formData.selectedOptimization?.length || 0
    };
  };

  const serviceCounts = getServiceCounts();
  const totalServices = Object.values(serviceCounts).reduce((a, b) => a + b, 0);

  return (
    <div className="space-y-8">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-bold text-aws-blue mb-2">Generate Infrastructure</h2>
        <p className="text-aws-gray-600">
          Review your configuration and deploy your Lambda-powered infrastructure automation.
        </p>
      </div>

      {/* Project Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Project Info */}
        <div className="lg:col-span-2 space-y-6">
          {/* Configuration Summary */}
          <div className="bg-aws-gray-50 border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
              <Zap className="w-5 h-5 mr-2 text-aws-orange" />
              Configuration Summary
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-aws-blue">{serviceCounts.infrastructure}</div>
                <div className="text-sm text-aws-gray-600">Infrastructure</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{serviceCounts.compute}</div>
                <div className="text-sm text-aws-gray-600">Compute</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{serviceCounts.security}</div>
                <div className="text-sm text-aws-gray-600">Security</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-aws-orange">{totalServices}</div>
                <div className="text-sm text-aws-gray-600">Total Services</div>
              </div>
            </div>
          </div>

          {/* Live Progress */}
          {isGenerating && (
            <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
                <Clock className="w-5 h-5 mr-2 text-aws-orange animate-spin" />
                Deployment Progress
              </h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-aws-gray-700">{currentTask}</span>
                  <span className="text-sm font-bold text-aws-blue">{progress}%</span>
                </div>
                <div className="w-full bg-aws-gray-200 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-aws-orange to-green-500 h-3 rounded-full transition-all duration-500"
                    style={{ width: `${progress}%` }}
                  ></div>
                </div>
              </div>
            </div>
          )}

          {/* Generated Resources */}
          {generatedResources.length > 0 && (
            <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
                <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
                Generated Resources
              </h3>
              <div className="space-y-3">
                {generatedResources.map((resource, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <div>
                        <div className="font-medium text-aws-blue">{resource.name}</div>
                        <div className="text-sm text-aws-gray-600">{resource.id}</div>
                      </div>
                    </div>
                    <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded">
                      {resource.status}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Cost Estimate & Actions */}
        <div className="space-y-6">
          {/* New: Intelligent Deployment Features */}
          <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
              <Shield className="w-5 h-5 mr-2 text-blue-600" />
              Intelligent Deployment System
            </h3>
            <div className="space-y-4">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <div className="flex items-center mb-2">
                  <CheckCircle className="w-4 h-4 mr-2 text-blue-600" />
                  <span className="font-medium text-blue-800">Smart Permission Detection</span>
                </div>
                <p className="text-sm text-blue-700">
                  Automatically detects your AWS permissions and selects the appropriate template (full or simplified)
                </p>
              </div>
              
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center mb-2">
                  <TrendingUp className="w-4 h-4 mr-2 text-green-600" />
                  <span className="font-medium text-green-800">Visual Progress Tracking</span>
                </div>
                <p className="text-sm text-green-700">
                  Real-time progress bars and status updates during deployment with resource-specific phases
                </p>
              </div>
              
              <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
                <div className="flex items-center mb-2">
                  <Monitor className="w-4 h-4 mr-2 text-purple-600" />
                  <span className="font-medium text-purple-800">Enhanced Error Handling</span>
                </div>
                <p className="text-sm text-purple-700">
                  Comprehensive error detection with detailed troubleshooting guidance and automatic fallbacks
                </p>
              </div>
              
              <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                <div className="flex items-center mb-2">
                  <Package className="w-4 h-4 mr-2 text-orange-600" />
                  <span className="font-medium text-orange-800">Web App Integration</span>
                </div>
                <p className="text-sm text-orange-700">
                  Build-in-place support for React/Node.js apps with automatic S3 deployment and website hosting
                </p>
              </div>
            </div>
          </div>

          {/* Cost Estimate */}
          <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
              <DollarSign className="w-5 h-5 mr-2 text-green-600" />
              Cost Estimate
            </h3>
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600">${estimatedCost}</div>
              <div className="text-sm text-aws-gray-600">per month</div>
            </div>
            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center text-sm text-blue-800">
                <TrendingUp className="w-4 h-4 mr-2" />
                Auto-scaling enabled for cost optimization
              </div>
            </div>
          </div>

          {/* Project Details */}
          <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4">Project Details</h3>
            <div className="space-y-3">
              <div>
                <div className="text-sm text-aws-gray-600">Project Name</div>
                <div className="font-medium text-aws-blue">{formData.projectName || 'Unnamed Project'}</div>
              </div>
              <div>
                <div className="text-sm text-aws-gray-600">Environment</div>
                <div className="font-medium text-aws-blue">{formData.environment || 'Development'}</div>
              </div>
              <div>
                <div className="text-sm text-aws-gray-600">AWS Region</div>
                <div className="font-medium text-aws-blue">{formData.awsRegion || 'us-east-1'}</div>
              </div>
            </div>
          </div>

          {/* Health Status */}
          {deploymentStatus === 'completed' && (
            <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
                <Monitor className="w-5 h-5 mr-2 text-green-500" />
                Health Status
              </h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-aws-gray-600">Infrastructure</span>
                  <span className="flex items-center text-green-600">
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Healthy
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-aws-gray-600">Security</span>
                  <span className="flex items-center text-green-600">
                    <Shield className="w-4 h-4 mr-1" />
                    Secure
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-aws-gray-600">Performance</span>
                  <span className="flex items-center text-green-600">
                    <TrendingUp className="w-4 h-4 mr-1" />
                    Optimal
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Enhanced Export Section */}
      {generatedFiles && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-800 mb-4 flex items-center">
            <Package className="w-5 h-5 mr-2" />
            Intelligent Deployment Package
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            {Object.entries(generatedFiles).map(([filename, content]) => (
              <div key={filename} className="bg-white border border-blue-200 rounded-lg p-3 text-center">
                <FileText className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                <div className="font-medium text-blue-800 text-sm">{filename}</div>
                <div className="text-xs text-blue-600">{Math.round(content.length / 1024)}KB</div>
              </div>
            ))}
          </div>
          <p className="text-sm text-blue-700">
            Smart deployment package with automatic permission detection, progress tracking, and enhanced error handling. Extract and run ./deploy.sh to start.
          </p>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4">
        <button
          onClick={simulateDeployment}
          disabled={isGenerating || deploymentStatus === 'completed'}
          className={`flex-1 flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
            isGenerating || deploymentStatus === 'completed'
              ? 'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed'
              : 'bg-aws-orange text-white hover:bg-aws-orange-dark shadow-lg hover:shadow-xl'
          }`}
        >
          {isGenerating ? (
            <>
              <Clock className="w-5 h-5 animate-spin" />
              <span>Deploying Infrastructure...</span>
            </>
          ) : deploymentStatus === 'completed' ? (
            <>
              <CheckCircle className="w-5 h-5" />
              <span>Deployment Complete</span>
            </>
          ) : (
            <>
              <Play className="w-5 h-5" />
              <span>Deploy Infrastructure</span>
            </>
          )}
        </button>

        <button 
          onClick={exportConfiguration}
          disabled={isExporting}
          className={`flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
            isExporting 
              ? 'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed'
              : 'bg-green-600 text-white hover:bg-green-700 shadow-lg hover:shadow-xl'
          }`}
        >
          {isExporting ? (
            <>
              <Clock className="w-5 h-5 animate-spin" />
              <span>Exporting...</span>
            </>
          ) : (
            <>
              <Download className="w-5 h-5" />
              <span>Export Smart Deployment</span>
            </>
          )}
        </button>
      </div>

      {/* Navigation */}
      <div className="flex items-center justify-between pt-6 border-t border-aws-gray-200">
        <button
          onClick={prevStep}
          className="flex items-center space-x-2 text-aws-gray-600 hover:text-aws-blue transition-colors duration-200"
        >
          <span>← BACK</span>
        </button>
        <div className="text-sm text-aws-gray-500">
          Step {currentStep} of {totalSteps} - Ready to deploy! 🚀
        </div>
      </div>
    </div>
  );
};

export default GenerateStep; 
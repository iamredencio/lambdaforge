import React, { useState, useEffect } from 'react';
import { Play, Download, Clock, DollarSign, CheckCircle, Zap, TrendingUp, Shield, Monitor, FileText, Package } from 'lucide-react';

const GenerateStep = ({ formData, prevStep, currentStep, totalSteps }) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentTask, setCurrentTask] = useState('');
  const [estimatedCost, setEstimatedCost] = useState(0);
  const [generatedResources, setGeneratedResources] = useState([]);
  const [deploymentStatus, setDeploymentStatus] = useState('ready'); // ready, generating, completed, error
  const [generatedFiles, setGeneratedFiles] = useState(null);
  const [isExporting, setIsExporting] = useState(false);

  // Calculate estimated monthly cost based on selections
  useEffect(() => {
    let cost = 0;
    
    // Infrastructure costs
    if (formData.selectedInfrastructure?.includes('s3-bucket')) cost += 23;
    if (formData.selectedInfrastructure?.includes('dynamodb')) cost += 45;
    if (formData.selectedInfrastructure?.includes('rds-database')) cost += 85;
    if (formData.selectedInfrastructure?.includes('vpc-networking')) cost += 15;
    if (formData.selectedInfrastructure?.includes('ebs-volumes')) cost += 30;

    // Compute costs
    if (formData.selectedCompute?.includes('lambda-functions')) cost += 12;
    if (formData.selectedCompute?.includes('ec2-instances')) cost += 120;
    if (formData.selectedCompute?.includes('ecs-containers')) cost += 95;
    if (formData.selectedCompute?.includes('fargate-serverless')) cost += 75;

    // Integration costs
    if (formData.selectedIntegration?.includes('api-gateway')) cost += 25;
    if (formData.selectedIntegration?.includes('eventbridge')) cost += 8;
    if (formData.selectedIntegration?.includes('step-functions')) cost += 15;
    if (formData.selectedIntegration?.includes('sns-notifications')) cost += 5;

    // Security costs
    if (formData.selectedSecurity?.includes('kms-encryption')) cost += 12;
    if (formData.selectedSecurity?.includes('secrets-manager')) cost += 8;
    if (formData.selectedSecurity?.includes('waf-protection')) cost += 35;

    // Monitoring costs
    if (formData.selectedMonitoring?.includes('cloudwatch')) cost += 18;
    if (formData.selectedMonitoring?.includes('x-ray-tracing')) cost += 22;
    if (formData.selectedMonitoring?.includes('cloudtrail')) cost += 10;

    setEstimatedCost(cost);
  }, [formData]);

  // File generation functions
  const generateCloudFormationTemplate = () => {
    const projectName = formData.projectName || 'lambdaforge-project';
    const environment = formData.environment || 'Development';
    
    // Generate YAML format instead of JSON
    const yamlTemplate = `AWSTemplateFormatVersion: '2010-09-09'
Description: '${projectName} - Generated by LambdaForge'

Parameters:
  ProjectName:
    Type: String
    Default: ${projectName}
    Description: Name of the project
  Environment:
    Type: String
    Default: ${environment}
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Environment type

Resources:
${generateResourcesYAML()}

Outputs:
${generateOutputsYAML()}`;

    return yamlTemplate;
  };

  const generateResources = () => {
    const resources = {};

    // Infrastructure Resources
    if (formData.selectedInfrastructure?.includes('s3-bucket')) {
      resources.S3Bucket = {
        Type: 'AWS::S3::Bucket',
        Properties: {
          BucketName: { 'Fn::Sub': '${ProjectName}-storage-${AWS::AccountId}' },
          VersioningConfiguration: { Status: 'Enabled' },
          PublicAccessBlockConfiguration: {
            BlockPublicAcls: true,
            BlockPublicPolicy: true,
            IgnorePublicAcls: true,
            RestrictPublicBuckets: true
          },
          Tags: [
            { Key: 'Project', Value: { Ref: 'ProjectName' } },
            { Key: 'Environment', Value: { Ref: 'Environment' } }
          ]
        }
      };
    }

    if (formData.selectedInfrastructure?.includes('dynamodb')) {
      resources.DynamoDBTable = {
        Type: 'AWS::DynamoDB::Table',
        Properties: {
          TableName: { 'Fn::Sub': '${ProjectName}-data' },
          AttributeDefinitions: [
            { AttributeName: 'id', AttributeType: 'S' }
          ],
          KeySchema: [
            { AttributeName: 'id', KeyType: 'HASH' }
          ],
          BillingMode: 'PAY_PER_REQUEST',
          PointInTimeRecoverySpecification: {
            PointInTimeRecoveryEnabled: true
          },
          Tags: [
            { Key: 'Project', Value: { Ref: 'ProjectName' } },
            { Key: 'Environment', Value: { Ref: 'Environment' } }
          ]
        }
      };
    }

    // Compute Resources
    if (formData.selectedCompute?.includes('lambda-functions')) {
      resources.LambdaExecutionRole = {
        Type: 'AWS::IAM::Role',
        Properties: {
          RoleName: { 'Fn::Sub': '${ProjectName}-lambda-role' },
          AssumeRolePolicyDocument: {
            Version: '2012-10-17',
            Statement: [{
              Effect: 'Allow',
              Principal: { Service: 'lambda.amazonaws.com' },
              Action: 'sts:AssumeRole'
            }]
          },
          ManagedPolicyArns: [
            'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          ],
          Tags: [
            { Key: 'Project', Value: { Ref: 'ProjectName' } },
            { Key: 'Environment', Value: { Ref: 'Environment' } }
          ]
        }
      };

      resources.LambdaFunction = {
        Type: 'AWS::Lambda::Function',
        Properties: {
          FunctionName: { 'Fn::Sub': '${ProjectName}-function' },
          Runtime: 'nodejs18.x',
          Handler: 'index.handler',
          Role: { 'Fn::GetAtt': ['LambdaExecutionRole', 'Arn'] },
          Code: {
            ZipFile: `exports.handler = async (event) => {
    console.log('Event:', JSON.stringify(event, null, 2));
    
    const response = {
        statusCode: 200,
        headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        body: JSON.stringify({
            message: 'Hello from ${formData.projectName || 'LambdaForge'}!',
            timestamp: new Date().toISOString(),
            environment: '${formData.environment || 'Development'}'
        })
    };
    
    return response;
};`
          },
          Environment: {
            Variables: {
              PROJECT_NAME: { Ref: 'ProjectName' },
              ENVIRONMENT: { Ref: 'Environment' }
            }
          },
          Tags: [
            { Key: 'Project', Value: { Ref: 'ProjectName' } },
            { Key: 'Environment', Value: { Ref: 'Environment' } }
          ]
        }
      };
    }

    // Integration Resources
    if (formData.selectedIntegration?.includes('api-gateway')) {
      resources.ApiGateway = {
        Type: 'AWS::ApiGateway::RestApi',
        Properties: {
          Name: { 'Fn::Sub': '${ProjectName}-api' },
          Description: `API for ${formData.projectName || 'LambdaForge Project'}`,
          EndpointConfiguration: {
            Types: ['REGIONAL']
          },
          Tags: [
            { Key: 'Project', Value: { Ref: 'ProjectName' } },
            { Key: 'Environment', Value: { Ref: 'Environment' } }
          ]
        }
      };

      if (formData.selectedCompute?.includes('lambda-functions')) {
        resources.ApiGatewayResource = {
          Type: 'AWS::ApiGateway::Resource',
          Properties: {
            RestApiId: { Ref: 'ApiGateway' },
            ParentId: { 'Fn::GetAtt': ['ApiGateway', 'RootResourceId'] },
            PathPart: 'api'
          }
        };

        resources.ApiGatewayMethod = {
          Type: 'AWS::ApiGateway::Method',
          Properties: {
            RestApiId: { Ref: 'ApiGateway' },
            ResourceId: { Ref: 'ApiGatewayResource' },
            HttpMethod: 'ANY',
            AuthorizationType: 'NONE',
            Integration: {
              Type: 'AWS_PROXY',
              IntegrationHttpMethod: 'POST',
              Uri: {
                'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
              }
            }
          }
        };

        resources.ApiGatewayDeployment = {
          Type: 'AWS::ApiGateway::Deployment',
          DependsOn: ['ApiGatewayMethod'],
          Properties: {
            RestApiId: { Ref: 'ApiGateway' },
            StageName: { Ref: 'Environment' }
          }
        };

        resources.LambdaApiGatewayPermission = {
          Type: 'AWS::Lambda::Permission',
          Properties: {
            FunctionName: { Ref: 'LambdaFunction' },
            Action: 'lambda:InvokeFunction',
            Principal: 'apigateway.amazonaws.com',
            SourceArn: {
              'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${Environment}/*/*'
            }
          }
        };
      }
    }

    // Monitoring Resources
    if (formData.selectedMonitoring?.includes('cloudwatch')) {
      resources.LogGroup = {
        Type: 'AWS::Logs::LogGroup',
        Properties: {
          LogGroupName: { 'Fn::Sub': '/aws/lambda/${ProjectName}-logs' },
          RetentionInDays: 14,
          Tags: [
            { Key: 'Project', Value: { Ref: 'ProjectName' } },
            { Key: 'Environment', Value: { Ref: 'Environment' } }
          ]
        }
      };
    }

    return resources;
  };

  const generateOutputs = () => {
    const outputs = {};

    if (formData.selectedInfrastructure?.includes('s3-bucket')) {
      outputs.S3BucketName = {
        Description: 'S3 Bucket Name',
        Value: { Ref: 'S3Bucket' },
        Export: { Name: { 'Fn::Sub': '${ProjectName}-s3-bucket' } }
      };
    }

    if (formData.selectedCompute?.includes('lambda-functions')) {
      outputs.LambdaFunctionArn = {
        Description: 'Lambda Function ARN',
        Value: { 'Fn::GetAtt': ['LambdaFunction', 'Arn'] },
        Export: { Name: { 'Fn::Sub': '${ProjectName}-lambda-arn' } }
      };
    }

    if (formData.selectedIntegration?.includes('api-gateway')) {
      outputs.ApiEndpoint = {
        Description: 'API Gateway endpoint URL',
        Value: {
          'Fn::Sub': 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
        },
        Export: { Name: { 'Fn::Sub': '${ProjectName}-api-endpoint' } }
      };
    }

    return outputs;
  };

  // YAML generation functions for proper CloudFormation format
  const generateResourcesYAML = () => {
    let yamlResources = '';

    // Infrastructure Resources
    if (formData.selectedInfrastructure?.includes('s3-bucket')) {
      yamlResources += `  # S3 Bucket with versioning and security
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '\${ProjectName}-storage-\${AWS::AccountId}-\${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    if (formData.selectedInfrastructure?.includes('dynamodb')) {
      yamlResources += `  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '\${ProjectName}-data'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    // Compute Resources - Fixed IAM role without custom naming
    if (formData.selectedCompute?.includes('lambda-functions')) {
      yamlResources += `  # Lambda Execution Role (no custom name to avoid conflicts)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '\${ProjectName}-function'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log('Event:', JSON.stringify(event, null, 2));
              
              const response = {
                  statusCode: 200,
                  headers: {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  body: JSON.stringify({
                      message: 'Hello from ${formData.projectName || 'LambdaForge'}!',
                      timestamp: new Date().toISOString(),
                      environment: process.env.ENVIRONMENT || 'Development'
                  })
              };
              
              return response;
          };
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    // Integration Resources
    if (formData.selectedIntegration?.includes('api-gateway')) {
      yamlResources += `  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '\${ProjectName}-api'
      Description: !Sub 'API for \${ProjectName}'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;

      if (formData.selectedCompute?.includes('lambda-functions')) {
        yamlResources += `  # API Gateway Resource
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: api

  # API Gateway Method
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:\${AWS::Region}:lambda:path/2015-03-31/functions/\${LambdaFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:apigateway:\${AWS::Region}::/restapis/\${ApiGateway}/stages/\${Environment}/*/*'

`;
      }
    }

    // Monitoring Resources
    if (formData.selectedMonitoring?.includes('cloudwatch')) {
      yamlResources += `  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/\${ProjectName}-logs'
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

`;
    }

    return yamlResources || '  # No resources selected';
  };

  const generateOutputsYAML = () => {
    let yamlOutputs = '';

    if (formData.selectedInfrastructure?.includes('s3-bucket')) {
      yamlOutputs += `  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '\${ProjectName}-s3-bucket'
  S3BucketConsoleLink:
    Description: S3 Bucket Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/s3/buckets/\${S3Bucket}'

`;
    }

    if (formData.selectedInfrastructure?.includes('dynamodb')) {
      yamlOutputs += `  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub '\${ProjectName}-dynamodb-table'
  DynamoDBConsoleLink:
    Description: DynamoDB Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=\${AWS::Region}#table?name=\${DynamoDBTable}'

`;
    }

    if (formData.selectedCompute?.includes('lambda-functions')) {
      yamlOutputs += `  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '\${ProjectName}-lambda-arn'
  LambdaConsoleLink:
    Description: Lambda Function Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/lambda/home?region=\${AWS::Region}#/functions/\${LambdaFunction}'

`;
    }

    if (formData.selectedIntegration?.includes('api-gateway')) {
      yamlOutputs += `  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://\${ApiGateway}.execute-api.\${AWS::Region}.amazonaws.com/\${Environment}'
    Export:
      Name: !Sub '\${ProjectName}-api-endpoint'
  ApiGatewayConsoleLink:
    Description: API Gateway Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/apigateway/home?region=\${AWS::Region}#/apis/\${ApiGateway}'

`;
    }

    if (formData.selectedMonitoring?.includes('cloudwatch')) {
      yamlOutputs += `  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref LogGroup
    Export:
      Name: !Sub '\${ProjectName}-log-group'
  CloudWatchConsoleLink:
    Description: CloudWatch Logs Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=\${AWS::Region}#logsV2:log-groups/log-group/\${LogGroup}'

`;
    }

    yamlOutputs += `  CloudFormationConsoleLink:
    Description: CloudFormation Stack Console Link
    Value: !Sub 'https://\${AWS::Region}.console.aws.amazon.com/cloudformation/home?region=\${AWS::Region}#/stacks/stackinfo?stackId=\${AWS::StackName}'

  DeploymentRegion:
    Description: AWS Region where resources are deployed
    Value: !Ref AWS::Region

`;

    return yamlOutputs;
  };

  const generateDeploymentScript = () => {
    const projectName = formData.projectName || 'lambdaforge-project';
    const environment = formData.environment || 'Development';

    return `#!/bin/bash

# ${projectName} Deployment Script
# Generated by LambdaForge on ${new Date().toISOString()}

set -e

# Configuration
PROJECT_NAME="${projectName}"
ENVIRONMENT="${environment}"
# Auto-detect AWS region from AWS CLI configuration
AWS_REGION=\$(aws configure get region)
if [ -z "\$AWS_REGION" ]; then
    echo "⚠️  No default region configured. Using us-east-1"
    AWS_REGION="us-east-1"
fi
STACK_NAME="\${PROJECT_NAME}-stack"

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m'

print_status() {
    echo -e "\${BLUE}[INFO]\${NC} $1"
}

print_success() {
    echo -e "\${GREEN}[SUCCESS]\${NC} $1"
}

print_error() {
    echo -e "\${RED}[ERROR]\${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials are not configured. Please run 'aws configure' first."
        exit 1
    fi
    
    print_success "Prerequisites check passed."
}

# Deploy CloudFormation stack
deploy_stack() {
    print_status "Deploying CloudFormation stack..."
    
    aws cloudformation deploy \\
        --template-file template.yaml \\
        --stack-name "\$STACK_NAME" \\
        --parameter-overrides \\
            ProjectName="\$PROJECT_NAME" \\
            Environment="\$ENVIRONMENT" \\
        --capabilities CAPABILITY_NAMED_IAM \\
        --region "\$AWS_REGION" \\
        --no-fail-on-empty-changeset
    
    if [ $? -eq 0 ]; then
        print_success "Stack deployment completed successfully!"
    else
        print_error "Stack deployment failed!"
        exit 1
    fi
}

# Get stack outputs and show resource links
get_outputs() {
    print_status "Retrieving stack outputs..."
    
    aws cloudformation describe-stacks \\
        --stack-name "\$STACK_NAME" \\
        --region "\$AWS_REGION" \\
        --query 'Stacks[0].Outputs' \\
        --output table
    
    echo ""
    print_success "🔗 Resource Access Links:"
    echo ""
    echo "📊 CloudFormation Stack:"
    echo "   https://\$AWS_REGION.console.aws.amazon.com/cloudformation/home?region=\$AWS_REGION#/stacks/stackinfo?stackId=\$STACK_NAME"
    echo ""
    
    # Get specific resource links from outputs
    OUTPUTS=\$(aws cloudformation describe-stacks --stack-name "\$STACK_NAME" --region "\$AWS_REGION" --query 'Stacks[0].Outputs' --output json)
    
    # Parse and display resource-specific links
    if echo "\$OUTPUTS" | jq -e '.[] | select(.OutputKey | contains("ConsoleLink"))' > /dev/null 2>&1; then
        echo "\$OUTPUTS" | jq -r '.[] | select(.OutputKey | contains("ConsoleLink")) | "🔗 " + .Description + ":\\n   " + .OutputValue + "\\n"'
    fi
}

# Main deployment function
main() {
    echo ""
    echo "======================================"
    echo "🚀 ${projectName} Deployment"
    echo "======================================"
    echo "Project: \$PROJECT_NAME"
    echo "Environment: \$ENVIRONMENT"
    echo "Region: \$AWS_REGION"
    echo ""
    
    check_prerequisites
    deploy_stack
    get_outputs
    
    print_success "Deployment completed successfully! 🎉"
}

main "$@"
`;
  };

  const generateReadme = () => {
    const projectName = formData.projectName || 'LambdaForge Project';
    const environment = formData.environment || 'Development';

    return `# ${projectName}

Generated by **LambdaForge** - AWS Infrastructure Automation Platform

## Overview

This project contains the infrastructure and deployment configuration for **${projectName}**.

- **Environment:** ${environment}
- **AWS Region:** Auto-detected from AWS CLI configuration
- **Generated:** ${new Date().toISOString()}

## Architecture

### Selected AWS Services

#### Infrastructure Services
${formData.selectedInfrastructure?.map(service => `- ${service.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`).join('\n') || '- None selected'}

#### Compute Services
${formData.selectedCompute?.map(service => `- ${service.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`).join('\n') || '- None selected'}

#### Integration Services
${formData.selectedIntegration?.map(service => `- ${service.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`).join('\n') || '- None selected'}

#### Security Services
${formData.selectedSecurity?.map(service => `- ${service.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`).join('\n') || '- None selected'}

#### Monitoring Services
${formData.selectedMonitoring?.map(service => `- ${service.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}`).join('\n') || '- None selected'}

## Quick Start

### Prerequisites

- AWS CLI installed and configured
- Appropriate IAM permissions for the selected services
- Bash shell (for deployment script)

### Deployment

\`\`\`bash
# Make the script executable
chmod +x deploy.sh

# Run deployment
./deploy.sh
\`\`\`

## Cost Estimation

Based on your selected services, the estimated monthly cost is **$${estimatedCost}**.

## AWS Console Links

After deployment, the script will provide direct links to all created resources.

General AWS Console links:
- [CloudFormation Stacks](https://console.aws.amazon.com/cloudformation/)
- [Lambda Functions](https://console.aws.amazon.com/lambda/)
- [S3 Buckets](https://console.aws.amazon.com/s3/)
- [Cost Explorer](https://console.aws.amazon.com/cost-management/home#/cost-explorer)

## Files Included

- \`template.yaml\` - CloudFormation template with all resources
- \`deploy.sh\` - Automated deployment script
- \`README.md\` - This documentation file

---

**Generated by LambdaForge** - Making AWS deployment simple and automated.
`;
  };

  // Download single file
  const downloadFile = (filename, content) => {
    const element = document.createElement('a');
    const file = new Blob([content], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = filename;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    URL.revokeObjectURL(element.href);
  };

  // Export Configuration function - makes the button functional!
  const exportConfiguration = async () => {
    setIsExporting(true);
    
    try {
      // Generate all files
      const files = {
        'template.yaml': generateCloudFormationTemplate(),
        'deploy.sh': generateDeploymentScript(),
        'README.md': generateReadme()
      };

      setGeneratedFiles(files);

      // Download all files with a small delay between each
      const fileEntries = Object.entries(files);
      for (let i = 0; i < fileEntries.length; i++) {
        const [filename, content] = fileEntries[i];
        setTimeout(() => {
          downloadFile(filename, content);
        }, i * 500); // 500ms delay between downloads
      }

      // Show success message
      setTimeout(() => {
        alert(`✅ Successfully exported ${fileEntries.length} files!\n\nFiles downloaded:\n${fileEntries.map(([filename]) => `• ${filename}`).join('\n')}\n\n🚀 Next steps:\n1. Extract files to a directory\n2. Run: chmod +x deploy.sh\n3. Run: ./deploy.sh\n\n✨ Features included:\n• Auto-detects your AWS region\n• Provides direct links to all created resources\n• Fixed IAM role naming issues\n• Proper YAML CloudFormation format`);
      }, fileEntries.length * 500 + 500);

    } catch (error) {
      console.error('Export failed:', error);
      alert('❌ Export failed. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const simulateDeployment = async () => {
    setIsGenerating(true);
    setDeploymentStatus('generating');
    setProgress(0);
    setGeneratedResources([]);

    const tasks = [
      { name: 'Validating AWS credentials', duration: 800 },
      { name: 'Analyzing infrastructure requirements', duration: 1200 },
      { name: 'Generating CloudFormation templates', duration: 1500 },
      { name: 'Creating deployment scripts', duration: 1000 },
      { name: 'Generating documentation', duration: 800 },
      { name: 'Validating template syntax', duration: 1000 },
      { name: 'Preparing deployment package', duration: 700 }
    ];

    let totalProgress = 0;
    const progressStep = 100 / tasks.length;

    for (let i = 0; i < tasks.length; i++) {
      setCurrentTask(tasks[i].name);
      
      await new Promise(resolve => setTimeout(resolve, tasks[i].duration));
      
      totalProgress += progressStep;
      setProgress(Math.round(totalProgress));

      // Add generated resources as we progress
      if (i === 2) { // After CloudFormation generation
        setGeneratedResources(prev => [...prev, 
          { name: 'CloudFormation Template', id: 'template.yaml', status: 'generated', type: 'infrastructure' }
        ]);
      }
      if (i === 3) { // After deployment script
        setGeneratedResources(prev => [...prev, 
          { name: 'Deployment Script', id: 'deploy.sh', status: 'generated', type: 'automation' }
        ]);
      }
      if (i === 4) { // After documentation
        setGeneratedResources(prev => [...prev, 
          { name: 'README Documentation', id: 'README.md', status: 'generated', type: 'documentation' }
        ]);
      }
    }

    // Generate all files automatically
    const files = {
      'template.yaml': generateCloudFormationTemplate(),
      'deploy.sh': generateDeploymentScript(),
      'README.md': generateReadme()
    };
    
    setGeneratedFiles(files);
    setCurrentTask('All deployment files generated successfully!');
    setDeploymentStatus('completed');
    setIsGenerating(false);
  };

  const getServiceCounts = () => {
    return {
      infrastructure: formData.selectedInfrastructure?.length || 0,
      compute: formData.selectedCompute?.length || 0,
      integration: formData.selectedIntegration?.length || 0,
      security: formData.selectedSecurity?.length || 0,
      monitoring: formData.selectedMonitoring?.length || 0,
      deployment: formData.selectedDeployment?.length || 0,
      optimization: formData.selectedOptimization?.length || 0
    };
  };

  const serviceCounts = getServiceCounts();
  const totalServices = Object.values(serviceCounts).reduce((a, b) => a + b, 0);

  return (
    <div className="space-y-8">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-bold text-aws-blue mb-2">Generate Infrastructure</h2>
        <p className="text-aws-gray-600">
          Review your configuration and deploy your Lambda-powered infrastructure automation.
        </p>
      </div>

      {/* Project Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Project Info */}
        <div className="lg:col-span-2 space-y-6">
          {/* Configuration Summary */}
          <div className="bg-aws-gray-50 border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
              <Zap className="w-5 h-5 mr-2 text-aws-orange" />
              Configuration Summary
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-aws-blue">{serviceCounts.infrastructure}</div>
                <div className="text-sm text-aws-gray-600">Infrastructure</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{serviceCounts.compute}</div>
                <div className="text-sm text-aws-gray-600">Compute</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">{serviceCounts.security}</div>
                <div className="text-sm text-aws-gray-600">Security</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-aws-orange">{totalServices}</div>
                <div className="text-sm text-aws-gray-600">Total Services</div>
              </div>
            </div>
          </div>

          {/* Live Progress */}
          {isGenerating && (
            <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
                <Clock className="w-5 h-5 mr-2 text-aws-orange animate-spin" />
                Deployment Progress
              </h3>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium text-aws-gray-700">{currentTask}</span>
                  <span className="text-sm font-bold text-aws-blue">{progress}%</span>
                </div>
                <div className="w-full bg-aws-gray-200 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-aws-orange to-green-500 h-3 rounded-full transition-all duration-500"
                    style={{ width: `${progress}%` }}
                  ></div>
                </div>
              </div>
            </div>
          )}

          {/* Generated Resources */}
          {generatedResources.length > 0 && (
            <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
                <CheckCircle className="w-5 h-5 mr-2 text-green-500" />
                Generated Resources
              </h3>
              <div className="space-y-3">
                {generatedResources.map((resource, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <div>
                        <div className="font-medium text-aws-blue">{resource.name}</div>
                        <div className="text-sm text-aws-gray-600">{resource.id}</div>
                      </div>
                    </div>
                    <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded">
                      {resource.status}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Cost Estimate & Actions */}
        <div className="space-y-6">
          {/* Cost Estimate */}
          <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
              <DollarSign className="w-5 h-5 mr-2 text-green-600" />
              Cost Estimate
            </h3>
            <div className="text-center">
              <div className="text-3xl font-bold text-green-600">${estimatedCost}</div>
              <div className="text-sm text-aws-gray-600">per month</div>
            </div>
            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center text-sm text-blue-800">
                <TrendingUp className="w-4 h-4 mr-2" />
                Auto-scaling enabled for cost optimization
              </div>
            </div>
          </div>

          {/* Project Details */}
          <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-aws-blue mb-4">Project Details</h3>
            <div className="space-y-3">
              <div>
                <div className="text-sm text-aws-gray-600">Project Name</div>
                <div className="font-medium text-aws-blue">{formData.projectName || 'Unnamed Project'}</div>
              </div>
              <div>
                <div className="text-sm text-aws-gray-600">Environment</div>
                <div className="font-medium text-aws-blue">{formData.environment || 'Development'}</div>
              </div>
              <div>
                <div className="text-sm text-aws-gray-600">AWS Region</div>
                <div className="font-medium text-aws-blue">{formData.awsRegion || 'us-east-1'}</div>
              </div>
            </div>
          </div>

          {/* Health Status */}
          {deploymentStatus === 'completed' && (
            <div className="bg-white border border-aws-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-aws-blue mb-4 flex items-center">
                <Monitor className="w-5 h-5 mr-2 text-green-500" />
                Health Status
              </h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-aws-gray-600">Infrastructure</span>
                  <span className="flex items-center text-green-600">
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Healthy
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-aws-gray-600">Security</span>
                  <span className="flex items-center text-green-600">
                    <Shield className="w-4 h-4 mr-1" />
                    Secure
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-aws-gray-600">Performance</span>
                  <span className="flex items-center text-green-600">
                    <TrendingUp className="w-4 h-4 mr-1" />
                    Optimal
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Enhanced Export Section */}
      {generatedFiles && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-800 mb-4 flex items-center">
            <Package className="w-5 h-5 mr-2" />
            Generated Deployment Package
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            {Object.entries(generatedFiles).map(([filename, content]) => (
              <div key={filename} className="bg-white border border-blue-200 rounded-lg p-3 text-center">
                <FileText className="w-8 h-8 text-blue-600 mx-auto mb-2" />
                <div className="font-medium text-blue-800 text-sm">{filename}</div>
                <div className="text-xs text-blue-600">{Math.round(content.length / 1024)}KB</div>
              </div>
            ))}
          </div>
          <p className="text-sm text-blue-700">
            All files have been generated and downloaded. Extract them to a directory and run the deployment script.
          </p>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4">
        <button
          onClick={simulateDeployment}
          disabled={isGenerating || deploymentStatus === 'completed'}
          className={`flex-1 flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
            isGenerating || deploymentStatus === 'completed'
              ? 'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed'
              : 'bg-aws-orange text-white hover:bg-aws-orange-dark shadow-lg hover:shadow-xl'
          }`}
        >
          {isGenerating ? (
            <>
              <Clock className="w-5 h-5 animate-spin" />
              <span>Deploying Infrastructure...</span>
            </>
          ) : deploymentStatus === 'completed' ? (
            <>
              <CheckCircle className="w-5 h-5" />
              <span>Deployment Complete</span>
            </>
          ) : (
            <>
              <Play className="w-5 h-5" />
              <span>Deploy Infrastructure</span>
            </>
          )}
        </button>

        <button 
          onClick={exportConfiguration}
          disabled={isExporting}
          className={`flex items-center justify-center space-x-2 py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
            isExporting 
              ? 'bg-aws-gray-300 text-aws-gray-500 cursor-not-allowed'
              : 'bg-green-600 text-white hover:bg-green-700 shadow-lg hover:shadow-xl'
          }`}
        >
          {isExporting ? (
            <>
              <Clock className="w-5 h-5 animate-spin" />
              <span>Exporting...</span>
            </>
          ) : (
            <>
              <Download className="w-5 h-5" />
              <span>Export Configuration</span>
            </>
          )}
        </button>
      </div>

      {/* Navigation */}
      <div className="flex items-center justify-between pt-6 border-t border-aws-gray-200">
        <button
          onClick={prevStep}
          className="flex items-center space-x-2 text-aws-gray-600 hover:text-aws-blue transition-colors duration-200"
        >
          <span>← BACK</span>
        </button>
        <div className="text-sm text-aws-gray-500">
          Step {currentStep} of {totalSteps} - Ready to deploy! 🚀
        </div>
      </div>
    </div>
  );
};

export default GenerateStep; 